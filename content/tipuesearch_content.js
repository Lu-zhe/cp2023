var tipuesearch = {"pages": [{'title': 'About', 'text': ' https://github.com/zhe41223118/cp2023 \xa0(個人倉儲連結)\xa0 \n https://github.com/FGH41223111/cp2023_ag6 \xa0(小組倉儲連結) \n', 'tags': '', 'url': 'About.html'}, {'title': 'w15', 'text': '題目: \n 1. 在 這個 gd檔中加入, 利用白色作為畫線顏色,  將第二組的 ABED 等四個點的座標, 以直線相連 \n \n 2. 列出第二組 ABED 的四條直線與白日中的大圓所相交 (intersect) 的四個點座標 \n A coord: (429,125) B coord: (279,165) E coord: (170,274) D coord: (319,234) \n (註:題目的意思就是要把第一題所連成線，與國旗上的圓形圖案， 兩者相交的四個點 ，要 像範例一樣列出 )', 'tags': '', 'url': 'w15.html'}, {'title': 'try Do', 'text': '第一次嘗試(錯誤答案) \n \n // https://en.wikipedia.org/wiki/Flag_of_the_Republic_of_China\n// 內政部國旗參考資料: https://www.moi.gov.tw/cp.aspx?n=10621\n// cc roc_flag_in_gd.c -lgd -lm to link with gd and math library\n// https://www.rapidtables.com/web/color/RGB_Color.html\n// 幾何形狀著色與繪圖練習\n// 以下 gd 繪圖程式嘗試畫出 ROC 國旗, 請根據下列程式內容完成後續的國旗繪圖\n#include <stdio.h>\n#include <gd.h>\n#include <math.h>\n \nvoid draw_roc_flag(gdImagePtr img);\nvoid draw_white_sun(gdImagePtr img, int x, int y, int size, int color);\n \nint main() {\n    // width 3: height 2\n    int width = 1200;\n    // 國旗長寬比為 3:2\n    int height = (int)(width*2.0 / 3.0);\n \n    gdImagePtr img = gdImageCreateTrueColor(width, height);\n    gdImageAlphaBlending(img, 0);\n \n    draw_roc_flag(img);\n \n    FILE *outputFile = fopen("roc_flag_in_gd.png", "wb");\n    if (outputFile == NULL) {\n        fprintf(stderr, "Error opening the output file.\\n");\n        return 1;\n    }\n    gdImagePngEx(img, outputFile, 9);\n    fclose(outputFile);\n    gdImageDestroy(img);\n    return 0;\n}\n \nvoid draw_roc_flag(gdImagePtr img) {\n    int width = gdImageSX(img);\n    int height = gdImageSY(img);\n    int red, white, blue;\n    // 白日位於青天面積正中央, 因此中心點座標為長寬各 1/4 處\n    int center_x = (int)(width/4);\n    int center_y = (int)(height/4);\n    // gdImageFilledEllipse 需以長寬方向的 diameter 作圖\n    // 由於中央白日圓形的半徑為青天寬度的 1/8\n    // 因此中央白日圓形的直徑為青天寬度的 1/4, 也就是國旗寬度的 1/8\n    // 而且白日十二道光芒的外圍圓形其半徑也是國旗寬度的1/8\n    int sun_radius = (int)(width/8);\n    // 中央白日圓形的直徑等於十二道光芒外圍圓形的半徑\n    int white_circle_dia = sun_radius;\n    // 中央藍色圓形半徑為中央白日的 1又 2/15\n    int blue_circle_dia = white_circle_dia +  white_circle_dia*2/15;\n    // 根據 https://www.moi.gov.tw/cp.aspx?n=10621 訂定國旗三種顏色值\n    red = gdImageColorAllocate(img, 255, 0, 0); // 紅色\n    white = gdImageColorAllocate(img, 255, 255, 255); // 白色\n    blue = gdImageColorAllocate(img, 0, 0, 149); // 藍色\n    // 根據畫布大小塗上紅色長方形區域\n    gdImageFilledRectangle(img, 0, 0, width, height, red);\n    // 青天面積為整面國旗的 1/4, 也是採用長方形塗色\n    gdImageFilledRectangle(img, 0, 0, (int)(width/2.0), (int)(height/2.0), blue);\n    // 先設法以填色畫出六個白色堆疊菱形\n    draw_white_sun(img, center_x, center_y, sun_radius, white);\n    // 利用一個藍色大圓與白色小圓畫出藍色環狀\n    gdImageFilledEllipse(img, center_x, center_y, blue_circle_dia, blue_circle_dia, blue);\n    gdImageFilledEllipse(img, center_x, center_y, white_circle_dia, white_circle_dia, white);\n   \n}\n \nvoid draw_white_sun(gdImagePtr img, int center_x, int center_y, int sun_radius, int color) {\n    // M_PI 大小定義於 math.h 標頭檔中, 因為三角函數中採用徑度為角度單位\n    // 因此定義將角度轉為徑度的轉換變數為 deg, 角度值乘上 deg 就可轉為徑度\n    float deg = M_PI/180;\n    // 根據十二道光芒的每一尖角的角度為 15 度, 求出其對應直角三角形的另一角度為 75 度\n    // 求出十二道光芒中任一菱形的 small radius, 也就是菱形的另一個對應小圓的半徑大小\n    float sr = sun_radius/tan(75*deg);\n    int ax, ay, bx, by, dx, dy, ex, ey;\n    gdPoint points[4];\n    /* 在塗上十二道光芒中的單一菱形區域之前, 先以座標點畫線測試是否正確\n    ax = center_x;\n    ay = center_y - sun_radius;\n    bx = center_x - sun_radius*tan(15*deg);\n    by = center_y;\n    ex = center_x;\n    ey = center_y + sun_radius;\n    dx = center_x + sun_radius*tan(15*deg);\n    dy = center_y;\n    // AB\n    gdImageLine(img, ax, ay, bx, by, color);\n    // BE\n    gdImageLine(img, bx, by, ex, ey, color);\n    // ED\n    gdImageLine(img, ex, ey, dx, dy, color);\n    // DA\n    gdImageLine(img, dx, dy, ax, ay, color);\n    */\n    ax = center_x;\n    ay = center_y - sun_radius;\n    printf("%d,%d\\n",ax, ay);\n    bx = center_x - sun_radius*tan(15*deg);\n    by = center_y;\n    ex = center_x;\n    ey = center_y + sun_radius;\n    dx = center_x + sun_radius*tan(15*deg);\n    dy = center_y;\n    // 確定單一菱形區域的塗色正確後, 利用迴圈每次轉動 30 度, 總共轉六次即可塗上十二道光芒區域\n    for (int i=1;i<=6;i++){\n    // A\n    points[0].x = ax+sun_radius*sin(30*deg*i);\n    points[0].y = ay+sun_radius-sun_radius*cos(30*deg*i);\n    printf("A coord: (%d,%d)\\n", points[0].x, points[0].y);\n    // B\n    points[1].x = bx+sr-sr*cos(30*deg*i);\n    points[1].y = by-sr*sin(30*deg*i);\n    printf("B coord: (%d,%d)\\n", points[1].x, points[1].y);\n    // E\n    points[2].x = ex-sun_radius*sin(30*deg*i);\n    points[2].y = ey-(sun_radius-sun_radius*cos(30*deg*i));\n    printf("E coord: (%d,%d)\\n", points[2].x, points[2].y);\n    // D\n    points[3].x = dx-(sr-sr*cos(30*deg*i));\n    points[3].y = dy+sr*sin(30*deg*i);\n    printf("D coord: (%d,%d)\\n\\n", points[2].x, points[2].y);\n    // 對菱形區域範圍塗色\n    gdImageFilledPolygon(img, points, 4, color);\n    // 在菱形區域外圍畫線, 明確界定菱形範圍\n    gdImagePolygon(img, points, 4, color);\n    }\n} \n 第二次製作(有點是答案) \n \n \n #include <stdio.h>\n#include <gd.h>\n#include <math.h>\n \nvoid draw_roc_flag(gdImagePtr img);\nvoid draw_white_sun(gdImagePtr img, int x, int y, int size, int color);\n \nvoid connectPoints(gdImagePtr img, int x1, int y1, int x2, int y2, int color);\n \nint main() {\n// width 3: height 2\nint width = 1200;\n// 國旗長寬比為 3:2\nint height = (int)(width * 2.0 / 3.0);\n \ngdImagePtr img = gdImageCreateTrueColor(width, height);\ngdImageAlphaBlending(img, 0);\n \ndraw_roc_flag(img);\n \nFILE *outputFile = fopen("Y:/tmp/c_ex/roc_flag_in_gd.png", "wb");\nif (outputFile == NULL) {\nfprintf(stderr, "Error opening the output file.\\n");\nreturn 1;\n}\ngdImagePngEx(img, outputFile, 9);\nfclose(outputFile);\ngdImageDestroy(img);\nreturn 0;\n}\n \nvoid draw_roc_flag(gdImagePtr img) {\nint width = gdImageSX(img);\nint height = gdImageSY(img);\nint red, white, blue;\n// 白日位於青天面積正中央, 因此中心點座標為長寬各 1/4 處\nint center_x = (int)(width / 4);\nint center_y = (int)(height / 4);\n// gdImageFilledEllipse 需以長寬方向的 diameter 作圖\n// 由於中央白日圓形的半徑為青天寬度的 1/8\n// 因此中央白日圓形的直徑為青天寬度的 1/4, 也就是國旗寬度的 1/8\n// 而且白日十二道光芒的外圍圓形其半徑也是國旗寬度的1/8\nint sun_radius = (int)(width / 8);\n// 中央白日圓形的直徑等於十二道光芒外圍圓形的半徑\nint white_circle_dia = sun_radius;\n// 中央藍色圓形半徑為中央白日的 1又 2/15\nint blue_circle_dia = white_circle_dia + white_circle_dia * 2 / 15;\n// 根據 https://www.moi.gov.tw/cp.aspx?n=10621 訂定國旗三種顏色值\nred = gdImageColorAllocate(img, 255, 0, 0); // 紅色\nwhite = gdImageColorAllocate(img, 255, 255, 255); // 白色\nblue = gdImageColorAllocate(img, 0, 0, 149); // 藍色\n// 根據畫布大小塗上紅色長方形區域\ngdImageFilledRectangle(img, 0, 0, width, height, red);\n// 青天面積為整面國旗的 1/4, 也是採用長方形塗色\ngdImageFilledRectangle(img, 0, 0, (int)(width / 2.0), (int)(height / 2.0), blue);\n// 先設法以填色畫出六個白色堆疊菱形\ndraw_white_sun(img, center_x, center_y, sun_radius, white);\n// 利用一個藍色大圓與白色小圓畫出藍色環狀\ngdImageFilledEllipse(img, center_x, center_y, blue_circle_dia, blue_circle_dia, blue);\ngdImageFilledEllipse(img, center_x, center_y, white_circle_dia, white_circle_dia, white);\n \n// 連接四個座標點\nconnectPoints(img, 429, 125, 279, 165, white);\nconnectPoints(img, 279, 165, 170, 274, white);\nconnectPoints(img, 170, 274, 319, 234, white);\nconnectPoints(img, 319, 234, 429, 125, white);\n}\n \nvoid draw_white_sun(gdImagePtr img, int center_x, int center_y, int sun_radius, int color) {\nfloat deg = M_PI / 180;\nfloat sr = sun_radius / tan(75 * deg);\nint ax, ay, bx, by, dx, dy, ex, ey;\n \nax = center_x;\nay = center_y - sun_radius;\n \nbx = center_x - sun_radius * tan(15 * deg);\nby = center_y;\n \nex = center_x;\ney = center_y + sun_radius;\n \ndx = center_x + sun_radius * tan(15 * deg);\ndy = center_y;\n \nfor (int i = 1; i <= 6; i++) {\nint ax1 = ax + sun_radius * sin(30 * deg * i);\nint ay1 = ay + sun_radius - sun_radius * cos(30 * deg * i);\n \nint bx1 = bx + sr - sr * cos(30 * deg * i);\nint by1 = by - sr * sin(30 * deg * i);\n \nint ex1 = ex - sun_radius * sin(30 * deg * i);\nint ey1 = ey - (sun_radius - sun_radius * cos(30 * deg * i));\n \nint dx1 = dx - (sr - sr * cos(30 * deg * i));\nint dy1 = dy + sr * sin(30 * deg * i);\n \n// 對菱形區域範圍塗色\ngdImageFilledPolygon(img, (gdPoint[4]){{ax1, ay1}, {bx1, by1}, {ex1, ey1}, {dx1, dy1}}, 4, color);\n \n// 在菱形區域外圍畫線，明確界定菱形範圍\ngdImageLine(img, ax1, ay1, bx1, by1, color);\ngdImageLine(img, bx1, by1, ex1, ey1, color);\ngdImageLine(img, ex1, ey1, dx1, dy1, color);\ngdImageLine(img, dx1, dy1, ax1, ay1, color);\n}\n}\n \nvoid connectPoints(gdImagePtr img, int x1, int y1, int x2, int y2, int color) {\ngdImageLine(img, x1, y1, x2, y2, color); \n \n 配合ChatGTP，在原式上新增 \n gdImageLine(img, ax1, ay1, bx1, by1, color);\ngdImageLine(img, bx1, by1, ex1, ey1, color);\ngdImageLine(img, ex1, ey1, dx1, dy1, color);\ngdImageLine(img, dx1, dy1, ax1, ay1, color);\n}\n} \n 這個還不是正確答案還需將 白色太陽塗色部分 跟 非第二組座標連成的線條 移除 \n 第三次製作(以為是答案) \n \n #include <stdio.h>\n#include <gd.h>\n#include <math.h>\n   \nvoid draw_roc_flag(gdImagePtr img);\nvoid draw_white_sun(gdImagePtr img, int x, int y, int size, int color);\n   \n//void connectPoints(gdImagePtr img, int x1, int y1, int x2, int y2, int color);\n   \nint main() {\n// width 3: height 2\nint width = 1200;\n// 國旗長寬比為 3:2\nint height = (int)(width * 2.0 / 3.0);\n   \ngdImagePtr img = gdImageCreateTrueColor(width, height);\ngdImageAlphaBlending(img, 0);\n   \ndraw_roc_flag(img);\n   \nFILE *outputFile = fopen("Y:/tmp/c_ex/roc_flag_04_gd.png", "wb");\nif (outputFile == NULL) {\nfprintf(stderr, "Error opening the output file.\\n");\nreturn 1;\n}\ngdImagePngEx(img, outputFile, 9);\nfclose(outputFile);\ngdImageDestroy(img);\nreturn 0;\n}\n   \nvoid draw_roc_flag(gdImagePtr img) {\nint width = gdImageSX(img);\nint height = gdImageSY(img);\nint red, white, blue;\n// 白日位於青天面積正中央, 因此中心點座標為長寬各 1/4 處\nint center_x = (int)(width / 4);\nint center_y = (int)(height / 4);\n// gdImageFilledEllipse 需以長寬方向的 diameter 作圖\n// 由於中央白日圓形的半徑為青天寬度的 1/8\n// 因此中央白日圓形的直徑為青天寬度的 1/4, 也就是國旗寬度的 1/8\n// 而且白日十二道光芒的外圍圓形其半徑也是國旗寬度的1/8\nint sun_radius = (int)(width / 8);\n// 中央白日圓形的直徑等於十二道光芒外圍圓形的半徑\nint white_circle_dia = sun_radius;\n// 中央藍色圓形半徑為中央白日的 1又 2/15\nint blue_circle_dia = white_circle_dia + white_circle_dia * 2 / 15;\n// 根據 https://www.moi.gov.tw/cp.aspx?n=10621 訂定國旗三種顏色值\nred = gdImageColorAllocate(img, 255, 0, 0); // 紅色\nwhite = gdImageColorAllocate(img, 255, 255, 255); // 白色\nblue = gdImageColorAllocate(img, 0, 0, 149); // 藍色\n// 根據畫布大小塗上紅色長方形區域\ngdImageFilledRectangle(img, 0, 0, width, height, red);\n// 青天面積為整面國旗的 1/4, 也是採用長方形塗色\ngdImageFilledRectangle(img, 0, 0, (int)(width / 2.0), (int)(height / 2.0), blue);\n// 先設法以填色畫出六個白色堆疊菱形\n//draw_white_sun(img, center_x, center_y, sun_radius, white);\n// 利用一個藍色大圓與白色小圓畫出藍色環狀\n//gdImageFilledEllipse(img, center_x, center_y, blue_circle_dia, blue_circle_dia, blue);\n//gdImageFilledEllipse(img, center_x, center_y, white_circle_dia, white_circle_dia, white);\n \n  {int x1 = 429;\n   int y1 = 125;\n   int x2 = 279;\n   int y2 = 165;\n  \n   // 畫一條線連接兩個點\n   gdImageLine(img, x1, y1, x2, y2, white);\n  }\n  {int x1 = 170;\n     int y1 = 274;\n     int x2 = 279;\n     int y2 = 165;\n  \n     // 畫一條線連接兩個點\n     gdImageLine(img, x1, y1, x2, y2, white);\n  }\n  {\n    int x1 = 170;\n     int y1 = 274;\n     int x2 = 429;\n     int y2 = 125;\n  \n     // 畫一條線連接兩個點\n     gdImageLine(img, x1, y1, x2, y2, white);\n  }\n}\n//void connectPoints(gdImagePtr img, int x1, int y1, int x2, int y2, int color) {\n//gdImageLine(img, x1, y1, x2, y2, color); \n 誤以為這就是解答，一開時候第四個點看錯，導致變成三角形。 \n \n 第二題(錯誤答案) \n \n #include <stdio.h>\n#include <gd.h>\n#include <math.h>\n \n// 定義座標結構\ntypedef struct {\n    double x;\n    double y;\n} Point;\n \n// Function prototypes\nvoid draw_roc_flag(gdImagePtr img);\nvoid draw_white_sun(gdImagePtr img, int x, int y, int size, int color);\nvoid connectPoints(gdImagePtr img, int x1, int y1, int x2, int y2, int color);\nPoint circleLineIntersection(double h, double k, double r, double x1, double y1, double x2, double y2);\n \n \nint main() {\n    // width 3: height 2\n    int width = 1200;\n    // 國旗長寬比為 3:2\n    int height = (int)(width*2.0 / 3.0);\n  \n    gdImagePtr img = gdImageCreateTrueColor(width, height);\n    gdImageAlphaBlending(img, 0);\n  \n    draw_roc_flag(img);\n  \n    FILE *outputFile = fopen("Y:/tmp/c_ex/roc_flag_07_gd_2.png", "wb");\n    if (outputFile == NULL) {\n        fprintf(stderr, "Error opening the output file.\\n");\n        return 1;\n    }\n    gdImagePngEx(img, outputFile, 9);\n    fclose(outputFile);\n    gdImageDestroy(img);\n    return 0;\n}\nvoid connectPoints(gdImagePtr img, int x1, int y1, int x2, int y2, int color) {\n    gdImageLine(img, x1, y1, x2, y2, color);\n}\n \n// ... connectPoints 函式的實作 ...\n \n// 實作 draw_white_sun 函式\n \n// 修改 circleLineIntersection 函式\nPoint circleLineIntersection(double h, double k, double r, double x1, double y1, double x2, double y2) {\n    Point intersection;\n \n    // 直線斜率\n    double m = (y2 - y1) / (x2 - x1);\n \n    // 直線方程式中的常數項\n    double b = y1 - m * x1;\n \n    // 圓與直線交點的計算\n    double A = 1 + pow(m, 2);\n    double B = 2 * (m * b - m * k - h);\n    double C = pow(k, 2) - pow(r, 2) + pow(h, 2) - 2 * b * k + pow(b, 2);\n \n    // 判斷交點個數\n    double discriminant = pow(B, 2) - 4 * A * C;\n    if (discriminant > 0) {\n        intersection.x = (-B + sqrt(discriminant)) / (2 * A);\n        intersection.y = m * intersection.x + b;\n        printf("交點: (%.2f, %.2f)\\n", intersection.x, intersection.y);\n \n        intersection.x = (-B - sqrt(discriminant)) / (2 * A);\n        intersection.y = m * intersection.x + b;\n        printf("交點: (%.2f, %.2f)\\n", intersection.x, intersection.y);\n    } else if (discriminant == 0) {\n        intersection.x = -B / (2 * A);\n        intersection.y = m * intersection.x + b;\n        printf("交點: (%.2f, %.2f)\\n", intersection.x, intersection.y);\n    } else {\n        printf("No points.\\n");\n    }\n \n    return intersection;\n}\n \n// 完成 draw_roc_flag 函式\nvoid draw_roc_flag(gdImagePtr img) {\n    int width = gdImageSX(img);\n    int height = gdImageSY(img);\n    int red, white, blue;\n \n    // 白日位於青天面積正中央, 因此中心點座標為長寬各 1/4 處\n    int center_x = (int)(width / 4);\n    int center_y = (int)(height / 4);\n \n    // gdImageFilledEllipse 需以長寬方向的 diameter 作圖\n    // 由於中央白日圓形的半徑為青天寬度的 1/8\n    // 因此中央白日圓形的直徑為青天寬度的 1/4, 也就是國旗寬度的 1/8\n    // 而且白日十二道光芒的外圍圓形其半徑也是國旗寬度的1/8\n    int sun_radius = (int)(width / 8);\n    // 中央白日圓形的直徑等於十二道光芒外圍圓形的半徑\n    int white_circle_dia = sun_radius;\n    // 中央藍色圓形半徑為中央白日的 1又 2/15\n    int blue_circle_dia = white_circle_dia + white_circle_dia * 2 / 15;\n \n    // 根據 https://www.moi.gov.tw/cp.aspx?n=10621 訂定國旗三種顏色值\n    red = gdImageColorAllocate(img, 255, 0, 0);      // 紅色\n    white = gdImageColorAllocate(img, 255, 255, 255); // 白色\n    blue = gdImageColorAllocate(img, 0, 0, 149);      // 藍色\n \n    // 根據畫布大小塗上紅色長方形區域\n    gdImageFilledRectangle(img, 0, 0, width, height, red);\n    // 青天面積為整面國旗的 1/4, 也是採用長方形塗色\n    gdImageFilledRectangle(img, 0, 0, (int)(width / 2.0), (int)(height / 2.0), blue);\n \n    // 先設法以填色畫出六個白色堆疊菱形\n    connectPoints(img, 429, 125, 279, 165, white);\n    connectPoints(img, 170, 274, 279, 165, white);\n    connectPoints(img, 170, 274, 429, 125, white);\n \n    // 利用一個藍色大圓與白色小圓畫出藍色環狀\n    gdImageFilledEllipse(img, center_x, center_y, blue_circle_dia, blue_circle_dia, blue);\n    gdImageFilledEllipse(img, center_x, center_y, white_circle_dia, white_circle_dia, white);\n \n    // 計算圓與線的交點\n    double circle_x = (int)(width / 4);  // 圓心 x 座標\n    double circle_y = (int)(height / 4); // 圓心 y 座標\n    double radius = white_circle_dia + white_circle_dia * 2 / 15; // 圓半徑\n \n    // 兩點座標\n    double x3 = 170;\n    double y3 = 274;\n    double x4 = 279;\n    double y4 = 165;\n \n    Point intersection1 = circleLineIntersection(circle_x, circle_y, radius, x4, y4, x3, y3);\n \n    double x5 = 279;\n    double y5 = 165;\n    double x6 = 429;\n    double y6 = 125;\n \n    Point intersection2 = circleLineIntersection(circle_x, circle_y, radius, x6, y6, x5, y5);\n \n    // 使用交點座標，例如印出或繪製到圖片中\n    //printf("Intersection 1: (%.2f, %.2f)\\n", intersection1.x, intersection1.y);\n    //printf("Intersection 2: (%.2f, %.2f)\\n", intersection2.x, intersection2.y);\n    // ... 計算其他兩條直線的座標 ...\n} \n 跟第一題錯的一樣，忘記第四個點，導致求出的點有誤。', 'tags': '', 'url': 'try Do.html'}, {'title': 'ANS 1', 'text': '\n 在 try Do 裡嘗試修改與詢問 chatGTB 後將程式太陽的部分根線條一併移除後，將第二組點位一一輸入後，得到此結果，下面是程式碼的部分。 \n #include <stdio.h>\n#include <gd.h>\n#include <math.h>\n   \nvoid draw_roc_flag(gdImagePtr img);\nvoid draw_white_sun(gdImagePtr img, int x, int y, int size, int color);\n   \n//void connectPoints(gdImagePtr img, int x1, int y1, int x2, int y2, int color);\n   \nint main() {\n// width 3: height 2\nint width = 1200;\n// 國旗長寬比為 3:2\nint height = (int)(width * 2.0 / 3.0);\n   \ngdImagePtr img = gdImageCreateTrueColor(width, height);\ngdImageAlphaBlending(img, 0);\n   \ndraw_roc_flag(img);\n   \nFILE *outputFile = fopen("Y:/tmp/c_ex/roc_02.png", "wb");\nif (outputFile == NULL) {\nfprintf(stderr, "Error opening the output file.\\n");\nreturn 1;\n}\ngdImagePngEx(img, outputFile, 9);\nfclose(outputFile);\ngdImageDestroy(img);\nreturn 0;\n}\n   \nvoid draw_roc_flag(gdImagePtr img) {\nint width = gdImageSX(img);\nint height = gdImageSY(img);\nint red, white, blue;\n// 白日位於青天面積正中央, 因此中心點座標為長寬各 1/4 處\nint center_x = (int)(width / 4);\nint center_y = (int)(height / 4);\n// gdImageFilledEllipse 需以長寬方向的 diameter 作圖\n// 由於中央白日圓形的半徑為青天寬度的 1/8\n// 因此中央白日圓形的直徑為青天寬度的 1/4, 也就是國旗寬度的 1/8\n// 而且白日十二道光芒的外圍圓形其半徑也是國旗寬度的1/8\nint sun_radius = (int)(width / 8);\n// 中央白日圓形的直徑等於十二道光芒外圍圓形的半徑\nint white_circle_dia = sun_radius;\n// 中央藍色圓形半徑為中央白日的 1又 2/15\nint blue_circle_dia = white_circle_dia + white_circle_dia * 2 / 15;\n// 根據 https://www.moi.gov.tw/cp.aspx?n=10621 訂定國旗三種顏色值\nred = gdImageColorAllocate(img, 255, 0, 0); // 紅色\nwhite = gdImageColorAllocate(img, 255, 255, 255); // 白色\nblue = gdImageColorAllocate(img, 0, 0, 149); // 藍色\n// 根據畫布大小塗上紅色長方形區域\ngdImageFilledRectangle(img, 0, 0, width, height, red);\n// 青天面積為整面國旗的 1/4, 也是採用長方形塗色\ngdImageFilledRectangle(img, 0, 0, (int)(width / 2.0), (int)(height / 2.0), blue);\n// 先設法以填色畫出六個白色堆疊菱形\n//draw_white_sun(img, center_x, center_y, sun_radius, white);\n// 利用一個藍色大圓與白色小圓畫出藍色環狀\n//gdImageFilledEllipse(img, center_x, center_y, blue_circle_dia, blue_circle_dia, blue);\n//gdImageFilledEllipse(img, center_x, center_y, white_circle_dia, white_circle_dia, white);\n \n  {int x1 = 429;\n   int y1 = 125;\n   int x2 = 279;\n   int y2 = 165;\n  \n   // 畫第一條線連接兩個點(AB)\n   gdImageLine(img, x1, y1, x2, y2, white);\n  }\n  {int x1 = 170;\n     int y1 = 274;\n     int x2 = 279;\n     int y2 = 165;\n  \n     // 畫第二條線連接兩個點(EB)\n     gdImageLine(img, x1, y1, x2, y2, white);\n  }\n  {\n    int x1 = 170;\n     int y1 = 274;\n     int x2 = 319;\n     int y2 = 234;\n      \n   // 畫第三條線連接兩個點(ED)\n     gdImageLine(img, x1, y1, x2, y2, white);\n  }\n  {\n    int x1 = 319;\n     int y1 = 234;\n     int x2 = 429;\n     int y2 = 125;\n      \n     // 畫第四條線連接兩個點(DA)\n     gdImageLine(img, x1, y1, x2, y2, white);\n  }\n}\n//void connectPoints(gdImagePtr img, int x1, int y1, int x2, int y2, int color) {\n//gdImageLine(img, x1, y1, x2, y2, color); \n 原本連線因為第四點看錯，而變成三角形，後來檢查時發現，立即將第四點重新補上，圖根程式也重新修改完成。 \n (註:使用繪圖方法為在自己USB存的 tinyc 檔裡的 gd 線條畫圖畫的) \n', 'tags': '', 'url': 'ANS 1.html'}, {'title': 'ANS 2', 'text': '操作影片結果，請點 這裡 (沒聲音)，在原是基礎不動上新增定義和交線反饋。 \n \n #include <stdio.h>\n#include <gd.h>\n#include <math.h>\n \n// 定義座標結構\ntypedef struct {\n    double x;\n    double y;\n} Point;\n \n// Function prototypes\nvoid draw_roc_flag(gdImagePtr img);\nvoid draw_white_sun(gdImagePtr img, int x, int y, int size, int color);\nvoid connectPoints(gdImagePtr img, int x1, int y1, int x2, int y2, int color);\nPoint circleLineIntersection(double h, double k, double r, double x1, double y1, double x2, double y2);\n \n \nint main() {\n    // width 3: height 2\n    int width = 1200;\n    // 國旗長寬比為 3:2\n    int height = (int)(width*2.0 / 3.0);\n  \n    gdImagePtr img = gdImageCreateTrueColor(width, height);\n    gdImageAlphaBlending(img, 0);\n  \n    draw_roc_flag(img);\n  \n    FILE *outputFile = fopen("Y:/tmp/c_ex/roc03.png", "wb");\n    if (outputFile == NULL) {\n        fprintf(stderr, "Error opening the output file.\\n");\n        return 1;\n    }\n    gdImagePngEx(img, outputFile, 9);\n    fclose(outputFile);\n    gdImageDestroy(img);\n    return 0;\n}\nvoid connectPoints(gdImagePtr img, int x1, int y1, int x2, int y2, int color) {\n    gdImageLine(img, x1, y1, x2, y2, color);\n}\n \n// ... connectPoints 函式的實作 ...\n \n// 實作 draw_white_sun 函式\n \n// 修改 circleLineIntersection 函式\nPoint circleLineIntersection(double h, double k, double r, double x1, double y1, double x2, double y2) {\n    Point intersection;\n \n    // 直線斜率\n    double m = (y2 - y1) / (x2 - x1);\n \n    // 直線方程式中的常數項\n    double b = y1 - m * x1;\n \n    // 圓與直線交點的計算\n    double A = 1 + pow(m, 2);\n    double B = 2 * (m * b - m * k - h);\n    double C = pow(k, 2) - pow(r, 2) + pow(h, 2) - 2 * b * k + pow(b, 2);\n \n    // 判斷交點個數\n    double discriminant = pow(B, 2) - 4 * A * C;\n    if (discriminant > 0) {\n        intersection.x = (-B + sqrt(discriminant)) / (2 * A);\n        intersection.y = m * intersection.x + b;\n        printf("交點: (%.2f, %.2f)\\n", intersection.x, intersection.y);\n \n        intersection.x = (-B - sqrt(discriminant)) / (2 * A);\n        intersection.y = m * intersection.x + b;\n        printf("交點: (%.2f, %.2f)\\n", intersection.x, intersection.y);\n    } else if (discriminant == 0) {\n        intersection.x = -B / (2 * A);\n        intersection.y = m * intersection.x + b;\n        printf("交點: (%.2f, %.2f)\\n", intersection.x, intersection.y);\n    } else {\n        printf("No points.\\n");\n    }\n \n    return intersection;\n}\n \n// 完成 draw_roc_flag 函式\nvoid draw_roc_flag(gdImagePtr img) {\n    int width = gdImageSX(img);\n    int height = gdImageSY(img);\n    int red, white, blue;\n \n    // 白日位於青天面積正中央, 因此中心點座標為長寬各 1/4 處\n    int center_x = (int)(width / 4);\n    int center_y = (int)(height / 4);\n \n    // gdImageFilledEllipse 需以長寬方向的 diameter 作圖\n    // 由於中央白日圓形的半徑為青天寬度的 1/8\n    // 因此中央白日圓形的直徑為青天寬度的 1/4, 也就是國旗寬度的 1/8\n    // 而且白日十二道光芒的外圍圓形其半徑也是國旗寬度的1/8\n    int sun_radius = (int)(width / 8);\n    // 中央白日圓形的直徑等於十二道光芒外圍圓形的半徑\n    int white_circle_dia = sun_radius;\n    // 中央藍色圓形半徑為中央白日的 1又 2/15\n    int blue_circle_dia = white_circle_dia + white_circle_dia * 2 / 15;\n \n    // 根據 https://www.moi.gov.tw/cp.aspx?n=10621 訂定國旗三種顏色值\n    red = gdImageColorAllocate(img, 255, 0, 0);      // 紅色\n    white = gdImageColorAllocate(img, 255, 255, 255); // 白色\n    blue = gdImageColorAllocate(img, 0, 0, 149);      // 藍色\n \n    // 根據畫布大小塗上紅色長方形區域\n    gdImageFilledRectangle(img, 0, 0, width, height, red);\n    // 青天面積為整面國旗的 1/4, 也是採用長方形塗色\n    gdImageFilledRectangle(img, 0, 0, (int)(width / 2.0), (int)(height / 2.0), blue);\n \n    // 先設法以填色畫出六個白色堆疊菱形\n    connectPoints(img, 429, 125, 279, 165, white);\n    connectPoints(img, 170, 274, 279, 165, white);\n    connectPoints(img, 170, 274, 319, 234, white);\n    connectPoints(img, 319, 234, 429, 125, white);\n \n    // 利用一個藍色大圓與白色小圓畫出藍色環狀\n    gdImageFilledEllipse(img, center_x, center_y, blue_circle_dia, blue_circle_dia, blue);\n    gdImageFilledEllipse(img, center_x, center_y, white_circle_dia, white_circle_dia, white);\n \n    // 計算圓與線的交點\n    double circle_x = (int)(width / 4);  // 圓心 x 座標\n    double circle_y = (int)(height / 4); // 圓心 y 座標\n    double radius = white_circle_dia + white_circle_dia * 2 / 15; // 圓半徑\n \n    // 兩點座標\n    double x3 = 170;\n    double y3 = 274;\n    double x4 = 279;\n    double y4 = 165;\n \n    Point intersection1 = circleLineIntersection(circle_x, circle_y, radius, x4, y4, x3, y3);\n \n    double x5 = 279;\n    double y5 = 165;\n    double x6 = 429;\n    double y6 = 125;\n \n \n    Point intersection2 = circleLineIntersection(circle_x, circle_y, radius, x6, y6, x5, y5);\n    // 使用交點座標，例如印出或繪製到圖片中\n    //printf("Intersection 1: (%.2f, %.2f)\\n", intersection1.x, intersection1.y);\n    //printf("Intersection 2: (%.2f, %.2f)\\n", intersection2.x, intersection2.y);\n    // ... 計算其他兩條直線的座標 ...\n} \n 在原程式上加入新的定義，以便能將程式交縣回饋回傳，在寫第二樣作業時，也反覆詢問chatGTB，慢慢解決定義問題，併新增了線條與圓交界時的反饋。 \n', 'tags': '', 'url': 'ANS 2.html'}, {'title': 'w13', 'text': '如何使用近端編輯網站 \n 在近端建立  OpenSSH  格式的  public key ,  putty  格式的  private  並且配合  putty session  讓使用者可以將倉儲  git clone  到近端維護。 \n 所會用到的 命令字元指令 (如果操作過程無任何錯誤) \n reedit  (開啟登陸編輯程式) \n cd  (進入資料夾位置) \n git clone --recurse-submodules  (克隆複製倉儲資料) \n cms  (啟動近端) \n 近端啟動後網站預設密碼為 admin ， 只有自己需要使用的話，無須更改密碼，因為近端網站只要自己不啟動它，別人也進不來，更不用說還不知道密碼的情況下。 (註:如要以指令停止近端 ctrl+c ) \n 檔案位置: tinyc裡的data ，需有 portablegit\xa0PuTTY\xa0Python311 三個檔案 ( python3114_git_putty.7z ) \n \n 注意 : 需在符合上圖條件下開啟 start_ipv6.bat ，因為在虛擬主機(Y)所做的檔案更改不會影響自己本身的USB磁碟機，如果三個檔案在開啟命令字元時不在data裡，而是在開啟後才放入或放在開啟後產生的Y槽裡的話，會在後續在檔案傳輸和指示字元讀取倉儲檔案上出現問題 \n', 'tags': '', 'url': 'w13.html'}, {'title': 'step 1', 'text': '使用 puttygen.exe 定位主機位置並獲得key(點擊Generate開始定位) \n 如圖:(鼠標需在其檔案頁面範圍內不斷移動直到 綠條 跑完) \n \n 將key(圖上藍色框選的亂碼)複製新增到自己倉儲帳號( 設定-SSH keys) ，同時也要點圖上的 Save private key \n 儲存到 tinyc-data-home (名稱學號) \n 貼至倉儲綁定的亂碼就是自己設的鎖，而鑰匙就是儲存至自己的USB中的 .ppk 檔 \n', 'tags': '', 'url': 'step 1.html'}, {'title': 'step 2', 'text': '使用 putty.exe 把要鑰匙與倉儲座連接 \n \n 至 SSH 裡的 Auth 裡的 Credentials， 將 .ppk 檔數入', 'tags': '', 'url': 'step 2.html'}, {'title': 'step 3', 'text': '在命令字元打上 reedit ，尋找到剛剛處存的key 整個目錄檔 後右鍵匯出至USB中 \n \n 字元指令至( cd )自己要克隆抓取後放置的位置 \n 輸入git clone --recurse-submodules\xa0 git@41223118:zhe41223118 /cp2023.git \n (上述粗體字前者為.ppk檔案名:後者為倉儲帳號) \n 將倉儲資料複製到USB，之後cd進cp2023(克隆下的資料檔名) \n 輸入 cms \xa0 就可開啟近端網站進行維護了 \n', 'tags': '', 'url': 'step 3.html'}, {'title': 'bad', 'text': '近端雖然在操作上會很輕鬆，但是建立在能解決並理解，建立近端時和在使用上的煩瑣問題。 \n 最容易出錯的有: \n 在設定倉儲要使上， 倉儲確實有綁定好鎖頭 ，但 鑰匙卻昧由留在身上(.ppk沒存)', 'tags': '', 'url': 'bad.html'}, {'title': 'w12', 'text': '倉儲有限制檔案的上傳大小(上限為100MB) \n 但推送大檔案，會使之後的推送都需重複推送大檔 \n 進而使傳輸一直有負擔，或因檔案過大使之後的acp都受阻 \n 而延伸出的需刪除上傳或壓縮檔案的問題 \n 在資料合併上也會因上傳受阻時的錯誤操作而造成問題複雜化 \n \n 要解決檔案太大上傳問題，使用 onedrive (上限5TB) \n 將檔案透過連結下載的方式繞過倉儲的上傳限制 \n 例子: rrr', 'tags': '', 'url': 'w12.html'}, {'title': 'w11', 'text': 'w11_1a.7z (個人網路設定檔) \n 更改內容IPv6，將其更改為個人IP序號 \n 目的是能夠用可攜式檔，只要有網路都可以用管理者執行該檔直截獲取IPv6 \n \n 在登錄網站後，選擇 \xa0 IUpload \xa0 (建議是新增一個頁面打開) \n 就算檔案能上傳成功，也不建議一次上傳超過25MB檔案，原因和解決方式請到 w12 \n', 'tags': '', 'url': 'w11.html'}, {'title': 'w8', 'text': '遠端與倉儲帳號連接 \n \n chmod u+x acp \n mkdir public_html \n cd public_html \n git clone --recurse-submodules  https://github.com/zhe41223118/cp2023.git \n vi acp \n #! /bin/bash\ngit add .\ngit commit -m "$1"\ngit push\ncd ./../public_html/cp2023\ngit pull\n \n 必須根據 這裡 的說明設定目錄權限. \n ubuntu@www:~$ chmod 711 /home/ubuntu\nubuntu@www:~$ mkdir ~/public_html\nubuntu@www:~$ chmod 755 ~/public_html\nubuntu@www:~$ vi ~/public_html/index.html \n 帳號根目錄 (user directory) 必須設定 .gitconfig \n https://s1511.cycu.org:8022 \xa0 \n https://s1511.cycu.org/~cp41223118/cp2023 \xa0 \n \n 之後只需用 putty.exe 檔案連接到 s.cycu.org 進入到自己的遠端帳號，輸入 python3 server.py& ， \n 這樣遠端就會一直啟動，要檢查有沒有啟動 as -azo pid,comm,uname |grep "python3" 。 \n \xa0', 'tags': '', 'url': 'w8.html'}, {'title': 'w7', 'text': 'gd線條繪製 \n \n #include <stdio.h>\n#include <gd.h>\n#include <math.h>\n \nint main() {\n    int width = 800;\n    int height = 600;\n \n    gdImagePtr img = gdImageCreateTrueColor(width, height);\n    gdImageAlphaBlending(img, 0);\n \n    FILE *outputFile = fopen("hellogd.png", "wb");\n    if (outputFile == NULL) {\n \nfprintf(stderr, "Error opening the output file.\\n");\n \nreturn 1;\n    }\n    \n    int red = gdImageColorAllocate(img, 255, 0, 0);\n    int blue = gdImageColorAllocate(img, 0, 0, 255);\n    int black = gdImageColorAllocate(img, 0, 0, 0);\n    int white = gdImageColorAllocate(img, 255, 255, 255);\n    // 長方形塗色\n    gdImageFilledRectangle(img, 0, 0, width, height, white);\n    gdImageFilledRectangle(img, 0, 0, (int)width/4, (int)height/4, blue);\n    // 橢圓形塗色\n    gdImageFilledEllipse(img, (int)width*3/4, (int)height/4, (int)width/4, (int)width/4, red);\n    // 橢圓形畫線\n    gdImageEllipse(img, (int)width*3/4, (int)height*3/4, (int)width/4, (int)width/4, red);\n    // 畫直線\n    gdImageLine(img, (int)width/2, (int)height/2, (int)width/2, (int)height/2 + 100, blue);\n    \n    // 多邊形畫線\n    gdPoint points[4];\n    points[0].x = (int)width/4;\n    points[0].y = (int)height*3/4;\n    points[1].x = points[0].x + 100;\n    points[1].y = points[0].y;\n    points[2].x = points[1].x;\n    points[2].y = points[1].y + 100;\n    points[3].x = points[2].x - 100;\n    points[3].y = points[2].y;\n    gdImagePolygon(img, points, 4, black);\n    \n    // 多邊形塗色\n    gdPoint points2[4];\n    points2[0].x = (int)width/3;\n    points2[0].y = (int)height/2;\n    points2[1].x = points2[0].x + 100;\n    points2[1].y = points2[0].y;\n    points2[2].x = points2[1].x;\n    points2[2].y = points2[1].y + 100;\n    points2[3].x = points2[2].x - 150;\n    points2[3].y = points2[2].y;\n    gdImageFilledPolygon(img, points2, 4, red);\n \n    gdImagePngEx(img, outputFile, 9);\n    fclose(outputFile);\n    gdImageDestroy(img);\n    return 0;\n}\n \n 如果要在匯出時直接出現在指定位置，加上這串: \n int main() {\n    // width 3: height 2\n    int width = 1200;\n    // 國旗長寬比為 3:2\n    int height = (int)(width*2.0 / 3.0);\n \n    gdImagePtr img = gdImageCreateTrueColor(width, height);\n    gdImageAlphaBlending(img, 0);\n \n    draw_roc_flag(img);\n \n    FILE *outputFile = fopen("指定位置/roc_flag_07_gd_2.png", "wb");\n    if (outputFile == NULL) {\n        fprintf(stderr, "Error opening the output file.\\n");\n        return 1;\n    } \n 如果發現無法 Tools-Go 輸出圖檔，就是要開啟圖下:( Options-cpp.properties ) \n \n cter+F ，尋找 run ，圖下:(在兩段後面加上 -lgd ) \n \n 之後 save ，應該就能解決沒有輸出成功的問題了。 \n', 'tags': '', 'url': 'w7.html'}, {'title': 'Hello', 'text': '#include <stdio.h>\n \nint main()\n{\n \nprintf("hello world\\n");\n}\n \n \n', 'tags': '', 'url': 'Hello.html'}, {'title': 'Hello 迴圈與重複', 'text': '\n \t#include <stdio.h>\n \nint main()\n{\n    for(int i=0; i<10; i++){\n \nprintf("hello world\\n");\n    }\n}\n \n int main()\n{\n    for(int i=0; i<10; i++){\n \nprintf("第%d次印出 hello world\\n", i );\n    }\n} \n \n', 'tags': '', 'url': 'Hello 迴圈與重複.html'}, {'title': 'Hellogd2', 'text': '\n #include <stdio.h>\n#include <gd.h>\n#include <math.h>\n\n// Declare the rotation function\nvoid rotateFilledPolygon(int x_orig, int y_orig, double rotation_ang, gdPoint *points, int num_points) {\n    int i;\n    double angle_rad = rotation_ang * M_PI / 180.0;\n\n    for (i = 0; i < num_points; i++) {\n        int x = points[i].x - x_orig;\n        int y = points[i].y - y_orig;\n\n        points[i].x = x_orig + (int)(x * cos(angle_rad) - y * sin(angle_rad));\n        points[i].y = y_orig + (int)(x * sin(angle_rad) + y * cos(angle_rad));\n    }\n}\n\nint main() {\n    int width = 800;\n    int height = 600;\n\n    gdImagePtr img = gdImageCreateTrueColor(width, height);\n    gdImageAlphaBlending(img, 0);\n\n    FILE *outputFile = fopen("Y:/tmp/c_ex/hellogd2.png", "wb");\n    if (outputFile == NULL) {\n        fprintf(stderr, "Error opening the output file.\\n");\n        return 1;\n    }\n\n    int red = gdImageColorAllocate(img, 255, 0, 0);\n    int blue = gdImageColorAllocate(img, 0, 0, 255);\n    int black = gdImageColorAllocate(img, 0, 0, 0);\n    int white = gdImageColorAllocate(img, 255, 255, 255);\n\n    gdImageFilledRectangle(img, 0, 0, width, height, white);\n    gdImageFilledRectangle(img, 0, 0, (int)width / 4, (int)height / 4, blue);\n\n    gdImageFilledEllipse(img, (int)width * 3 / 4, (int)height / 4, (int)width / 4, (int)width / 4, red);\n    gdImageEllipse(img, (int)width * 3 / 4, (int)height * 3 / 4, (int)width / 4, (int)width / 4, red);\n    gdImageLine(img, (int)width / 2, (int)height / 2, (int)width / 2, (int)height / 2 + 100, blue);\n\n    gdPoint points[4];\n    points[0].x = (int)width / 4;\n    points[0].y = (int)height * 3 / 4;\n    points[1].x = points[0].x + 100;\n    points[1].y = points[0].y;\n    points[2].x = points[1].x;\n    points[2].y = points[1].y + 100;\n    points[3].x = points[2].x - 100;\n    points[3].y = points[2].y;\n\n    // Call the rotation function multiple times\n    for (int i = 0; i < 4; i++) {\n        rotateFilledPolygon((int)width / 4 + 50, (int)height * 3 / 4 + 50, 30.0, points, 4);\n        gdImagePolygon(img, points, 4, black);\n    }\n\n    gdPoint points2[4];\n    points2[0].x = (int)width / 3;\n    points2[0].y = (int)height / 2;\n    points2[1].x = points2[0].x + 100;\n    points2[1].y = points2[0].y;\n    points2[2].x = points2[1].x;\n    points2[2].y = points2[1].y + 100;\n    points2[3].x = points2[2].x - 150;\n    points2[3].y = points2[2].y;\n\n    // Call the rotation function multiple times\n    for (int i = 0; i < 12; i++) {\n        //rotateFilledPolygon((int)width / 3 + 50, (int)height / 2 + 50, 30.0, points2, 4);\n        rotateFilledPolygon(500, 200, 30.0, points2, 4);\n        gdImageFilledPolygon(img, points2, 4, red);\n    }\n\n    gdImagePngEx(img, outputFile, 9);\n    fclose(outputFile);\n    gdImageDestroy(img);\n\n    return 0;\n} \n', 'tags': '', 'url': 'Hellogd2.html'}, {'title': 'korea', 'text': '\n #include <stdio.h>\n#include <gd.h>\n#include <math.h>\n\n// Function prototype\nvoid draw_korean_flag(gdImagePtr img);\n\nint main() {\n    // width 3: height 2\n    int width = 1200;\n    int height = (int)(width * 2.0 / 3.0);\n\n    gdImagePtr img = gdImageCreateTrueColor(width, height);\n    gdImageAlphaBlending(img, 0);\n\n    draw_korean_flag(img);\n\n    FILE *outputFile = fopen("Y:/tmp/c_ex/korea1.png", "wb");\n    if (outputFile == NULL) {\n        fprintf(stderr, "Error opening the output file.\\n");\n        return 1;\n    }\n    gdImagePngEx(img, outputFile, 9);\n    fclose(outputFile);\n    gdImageDestroy(img);\n    return 0;\n}\n\nvoid draw_korean_flag(gdImagePtr img) {\n    int width = gdImageSX(img);\n    int height = gdImageSY(img);\n    int red, blue, black, grey, white;\n    // according to https://en.wikipedia.org/wiki/Flag_of_South_Korea#/media/File:Flag_of_South_Korea_(construction_sheet).svg\n    double scale = width/72;\n    int big_circle_dia = (int)24*scale;\n    int small_circle_dia = (int) big_circle_dia/2;\n    double rot_ang = atan2(48.0, 72.0);\n    int center_x = (int)(width / 2);\n    int center_y = (int)(height / 2);\n    printf("small_circle_dia is %d\\n", small_circle_dia);\n    int left_center_x = center_x - (small_circle_dia/2)*cos(rot_ang);\n    printf("center_x is %d\\n", center_x);\n    printf("atan2(48.0, 72.0) is %f\\n", atan2(48.0, 72.0));\n    printf("left_center_x is %d\\n", left_center_x);\n    int left_center_y = center_y - (small_circle_dia/2)*sin(rot_ang);\n    int right_center_x = center_x + (small_circle_dia/2)*cos(rot_ang);\n    int right_center_y = center_y + (small_circle_dia/2)*sin(rot_ang);\n\n    red = gdImageColorAllocate(img, 255, 0, 0);      // Red\n    blue = gdImageColorAllocate(img, 0, 0, 255);     // Blue\n    black = gdImageColorAllocate(img, 0, 0, 0);      // Black\n    grey = gdImageColorAllocate(img, 125, 125, 125); // grey\n    white = gdImageColorAllocate(img, 255, 255, 255); // white\n\n    gdImageFilledRectangle(img, 0, 0, width, height, white);\n    gdImageRectangle(img, 0, 0, width, height, black);\n\n    // Draw the big circle outline\n    int circle_radius = (int)(height * 2.0 / 5.0);\n    gdImageEllipse(img, center_x, center_y, big_circle_dia, big_circle_dia, black);\n    // left small circle\n    gdImageEllipse(img, left_center_x, left_center_y, small_circle_dia, small_circle_dia, red);\n    // right small circle\n    gdImageEllipse(img, right_center_x, right_center_y, small_circle_dia, small_circle_dia, blue);\n} \n \n \n #include <stdio.h>\n#include <gd.h>\n#include <math.h>\n\n// Function prototype\nvoid draw_korean_flag(gdImagePtr img);\n\nint main() {\n    // width 3: height 2\n    int width = 1200;\n    int height = (int)(width * 2.0 / 3.0);\n\n    gdImagePtr img = gdImageCreateTrueColor(width, height);\n    gdImageAlphaBlending(img, 0);\n\n    draw_korean_flag(img);\n\n    FILE *outputFile = fopen("Y:/tmp/c_ex/korea2.png", "wb");\n    if (outputFile == NULL) {\n        fprintf(stderr, "Error opening the output file.\\n");\n        return 1;\n    }\n    gdImagePngEx(img, outputFile, 9);\n    fclose(outputFile);\n    gdImageDestroy(img);\n    return 0;\n}\n\nvoid draw_korean_flag(gdImagePtr img) {\n    int width = gdImageSX(img);\n    int height = gdImageSY(img);\n    int red, blue, black, grey, white;\n    // according to https://en.wikipedia.org/wiki/Flag_of_South_Korea#/media/File:Flag_of_South_Korea_(construction_sheet).svg\n    double scale = width/72;\n    int big_circle_dia = (int)24*scale;\n    int small_circle_dia = (int) big_circle_dia/2;\n    double rot_ang = atan2(48.0, 72.0);\n    int center_x = (int)(width / 2);\n    int center_y = (int)(height / 2);\n    printf("small_circle_dia is %d\\n", small_circle_dia);\n    int left_center_x = center_x - (small_circle_dia/2)*cos(rot_ang);\n    printf("center_x is %d\\n", center_x);\n    printf("atan2(48.0, 72.0) is %f\\n", atan2(48.0, 72.0));\n    printf("left_center_x is %d\\n", left_center_x);\n    int left_center_y = center_y - (small_circle_dia/2)*sin(rot_ang);\n    int right_center_x = center_x + (small_circle_dia/2)*cos(rot_ang);\n    int right_center_y = center_y + (small_circle_dia/2)*sin(rot_ang);\n\n    red = gdImageColorAllocate(img, 255, 0, 0);      // Red\n    blue = gdImageColorAllocate(img, 0, 0, 255);     // Blue\n    black = gdImageColorAllocate(img, 0, 0, 0);      // Black\n    grey = gdImageColorAllocate(img, 125, 125, 125); // grey\n    white = gdImageColorAllocate(img, 255, 255, 255); // white\n\n    gdImageFilledRectangle(img, 0, 0, width, height, white);\n    gdImageRectangle(img, 0, 0, width, height, black);\n\n    // Draw the big circle outline\n    int circle_radius = (int)(height * 2.0 / 5.0);\n    gdImageEllipse(img, center_x, center_y, big_circle_dia, big_circle_dia, black);\n    // left small circle\n    gdImageEllipse(img, left_center_x, left_center_y, small_circle_dia, small_circle_dia, red);\n    // right small circle\n    gdImageEllipse(img, right_center_x, right_center_y, small_circle_dia, small_circle_dia, blue);\n    gdImageFill(img, left_center_x, left_center_y, red); // Fill left small circle with red\n    gdImageFill(img, right_center_x, right_center_y - small_circle_dia/2-10, red);\n    gdImageFill(img, right_center_x, right_center_y, blue); // Fill right small circle with blue\n    gdImageFill(img, left_center_x, left_center_y + small_circle_dia/2+10, blue);\n    gdImageEllipse(img, center_x, center_y, big_circle_dia, big_circle_dia, white);\n    // Draw the second circle outline\n    gdImageEllipse(img, center_x + circle_radius / 2, center_y, circle_radius * 2, circle_radius * 2, black);\n\n    // Flood fill the left area with red\n    gdImageFill(img, center_x - circle_radius + 1, center_y, red);\n\n    // Flood fill the right area with blue\n    gdImageFill(img, center_x + circle_radius + 1, center_y, blue);\n\n    // Flood fill the intersection area with yellow\n    gdImageFill(img, center_x, center_y, yellow);\n    */\n} \n \n', 'tags': '', 'url': 'korea.html'}, {'title': 'w4-w5', 'text': "各學員自行建立線上考試帳號 \n 網址輸入： exam.cycu.org \xa0(注意: 需要 IPV6 才能進入 ) \n \n 蒐集 牛頓第二運動定律 、 mass-spring-damper  系統、 Euler's Method  數值分析相關資料 \n 資料來源為： 小組網站 上傳內容 \n", 'tags': '', 'url': 'w4-w5.html'}, {'title': 'INFO', 'text': '參考來源: 牛頓第二運動定律百科 \n 牛頓的第二運動定律 描述了物體的運動與受到的力的關係。 \n 這個定律可以用以下數學公式表示： F = ma \n 這個公式表明，一個物體的質量乘以其加速度等於作用在該物體上的合力。換句話說，一個物體的加速度與作用在它上面的總合力成正比，質量越大，所需的力越大。 \n 此外，牛頓的第二運動定律還可以被重新排列成 \xa0 a=F除以m \xa0的形式，表示加速度等於力對質量的比值。 \n 其中： \n \n F \xa0 代表物體所受的合力（單位：牛頓，N）。 \n m \xa0 代表物體的質量（單位：千克，kg）。 \n a \xa0 代表物體的加速度（單位：米每平方秒， m / s(平方 ）。 \n \n 牛頓第二定律是一個涉及到物體運動的理論，根據這定律，任意物體的運動所出現的改變，都是源自於外力的施加於這物體。這理論導致了 古典力學 的誕生，是科學史的一個里程碑，先前只是描述自然現象的理論不再被採納，取而代之的是這個創立了一種理性的 因果關係 架構的新理論。實際而言，古典力學的嚴格的因果屬性，對於西方思想與文明的發展，產生了很大的影響。 \n', 'tags': '', 'url': 'INFO.html'}, {'title': 'mass-spring-damper', 'text': '參考來源： Mass-spring-damper model \n 質點-彈簧-阻尼器 \xa0 ， 是一種簡單但重要的動力學系統，用於描述物體在外力作用下的振動行為。這種系統常常被用來分析機械振動、結構動力學等領域。 \n \n 質點（Mass）： \xa0 代表系統中的質量，通常用 \xa0 m \xa0 表示。 \n 彈簧（Spring）： \xa0 代表系統中的彈性元件，用於恢復質點的位移，通常用 \xa0 k \xa0 表示。 \n 阻尼器（Damper）： \xa0 代表系統中的阻尼元件，用於減緩質點的運動速度，通常用 \xa0 c \xa0 表示。 \n \n 系統的運動方程可以通過牛頓的第二運動定律來推導。假設 \xa0 x ( t ) \xa0 表示質點的位移，則質點的運動方程可以表示為： \n \n \xa0 \n 其中： \n \n m \xa0 是質點的質量， \n c \xa0 是阻尼器的阻尼系數， \n k \xa0 是彈簧的彈性系數， \n F ( t ) \xa0 是外部力。 \n \n 這是一個二階線性常微分方程，描述了質點在外部力作用下的運動。解這個方程可以得到系統的位移 \xa0 x ( t ) \xa0 隨時間的變化。 \n 系統的行為取決於質點的質量、彈簧的彈性和阻尼器的阻尼程度。可能的系統行為包括自由振動、過阻尼、臨界阻尼和欠阻尼等。 \n 這種系統在工程學、物理學和控制理論等領域中有廣泛的應用，並且是學習動態系統和控制理論的基礎之一。 \n \n', 'tags': '', 'url': 'mass-spring-damper.html'}, {'title': 'Euler Method', 'text': '參考來源： 歐拉方法 \n 數值分析相關資料： \n 歐拉法（Euler\'s Method） 是一種用於數值解常微分方程（ODEs）的基本數值分析方法。該方法由Leonhard Euler提出，被廣泛應用於解析度較差的情況下的ODEs，尤其是當找不到解析解時。 \n 歐拉法的 基本 思想： \n \n 離散化： \xa0 將自變量（通常是時間）劃分成小的步長。 \n 近似： \xa0 使用當前的微分值（斜率）來估計下一個時間步長的函數值。 \n \n \n \n \n \n \n \n \n 1 \n 2 \n 3 \n 4 \n 5 \n 6 \n 7 \n 8 \n 9 \n 10 \n 11 \n 12 \n 13 \n 14 \n 15 \n 16 \n 17 \n 18 \n 19 \n 20 \n 21 \n 22 \n 23 \n 24 \n 25 \n 26 \n 27 \n \n \n \n def euler_method(f, y0, t0, tn, h): \n \xa0\xa0\xa0\xa0 "" " \n \xa0\xa0\xa0\xa0 使用歐拉法進行數值積分 \n \xa0 \n \xa0\xa0\xa0\xa0 Parameters: \n \xa0\xa0\xa0\xa0 - f: 函數 f(t, y) 表示 ODE 的右側 \n \xa0\xa0\xa0\xa0 - y0: 初值 \n \xa0\xa0\xa0\xa0 - t0: 初始時間 \n \xa0\xa0\xa0\xa0 - tn: 終止時間 \n \xa0\xa0\xa0\xa0 - h: 步長 \n \xa0 \n \xa0\xa0\xa0\xa0 Returns: \n \xa0\xa0\xa0\xa0 - t_values: 時間值的列表 \n \xa0\xa0\xa0\xa0 - y_values: 對應的函數值列表 \n \xa0\xa0\xa0\xa0 " "" \n \xa0\xa0\xa0\xa0 t_values = [t0] \n \xa0\xa0\xa0\xa0 y_values = [y0] \n \xa0\xa0\xa0\xa0 t = t0 \n \xa0\xa0\xa0\xa0 y = y0 \n \xa0 \n \xa0\xa0\xa0\xa0 while   t < tn: \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 y = y + h * f(t, y) \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 t = t + h \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 t_values.append(t) \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 y_values.append(y) \n \xa0 \n \xa0\xa0\xa0\xa0 return   t_values, y_values \n \n \n \n \n \n \n', 'tags': '', 'url': 'Euler Method.html'}, {'title': 'replit', 'text': '有關使用replit，創建和維護網站的內容， \n 請到 https://fgh41223111.github.io/cp2023_ag6/content/index.html \xa0小組網站內的replit頁面。 \n 這裡會放使用replit製作的程式和結果圖', 'tags': '', 'url': 'replit.html'}, {'title': 'part 1', 'text': '顛倒數字 \n #include <stdio.h>\n\n// 定義反轉數字的函式\nint reverse(int n) {\n    int d, y = 0;\n    while (n) {\n        d = n % 10;\n        // 檢查溢位情況，以確保反轉後的數字仍在 int 範圍內\n        if ((n > 0 && y > (0x7fffffff - d) / 10) ||\n            (n < 0 && y < ((signed)0x80000000 - d) / 10)) {\n            return 0;  // 如果溢位，則返回 0\n        }\n        y = y * 10 + d;\n        n = n / 10;\n    }\n    return y;  // 返回反轉後的數字\n}\n\nint main(void)\n{\n    int i = 678;\n    printf("原式: %d  ", i);\n    printf("\\n顛倒: %d  ", reverse(i));\n\n    return 0;\n} \n \n', 'tags': '', 'url': 'part 1.html'}, {'title': 'part 2', 'text': 'X次方數值計算 \n #include <stdio.h>\n#include <limits.h>\n\n// 定義計算 x 的 n 次方的函式\ndouble powxn(double x, int n) {\n    double k;\n    if (n == 0) return 1;  // 若 n 為 0，則 x 的 0 次方為 1。\n    k = powxn(x * x, n / 2);  // 傳回計算 x^2 的 (n/2) 次方。\n    if (n % 2) k = k * x;  // 若 n 為奇數，則乘上額外的 x。\n    return k;\n}\n\nint main(void)\n{\n    double x = 2;\n    int n = 10;\n    printf("\\nx = %f, y = %d  ", x, n);\n    printf("\\nResult:(x^n) : %f ", powxn(x, n));\n\n    x = 3;\n    n = 20;\n    printf("\\n\\nx = %f, y = %d  ", x, n);\n    printf("\\nResult:(x^n) : %f ", powxn(x, n));\n\n    return 0;\n} \n \n', 'tags': '', 'url': 'part 2.html'}, {'title': 'part 3', 'text': '問候語 \n #include <stdio.h>\nvoid main()\n{\n // 印出 問候\nprintf("Hello user! ");\n  printf("goodbye ");\n  printf("bye bye");\n} \n \n \n', 'tags': '', 'url': 'part 3.html'}, {'title': 'set wifi', 'text': '有關網路設定相關內容 \n 2001:288:6004:17::3  為本系 ipv6DNS 位址 \n 在本課程教室電腦，原本就設有ipv4和ipv6，在一般使用狀態下是沒有問題的。 \n 但當過多人使用時，懂得如何 變通 換條路來走 很重要。 \n 電腦教室過多人在上網時，許多人都怪網路太慢，其實有很多的方法可以解決往路的通順問題。 \n 第一句提到的就是方法之一， 其外還可以到設定的 Proxy 設定代理主機 來解決網卡問題， \n 也可以利用 這個 檔案裡的 putty.exe 來設定網路，連接 導師在校外用的ip網段 也是一個方法。 \n 如何讓網路通順的 方法有很多 ，這個不行就換另一個，總會有一個會是通的。 \n 如果都不通，也可以用 學校提供ipv6 ，在不行 網路自己架 也行。 \n cadlab_network_setting.7z 下載這個檔案，只要更改裡面的 .ps1 檔案， \n \n 圖上灰色字框數字更改成，學校給予 每個人自己的ipj網段編號 ，查詢到 這個網頁 來看。 \n 之後只要用另一個 .bat 檔案以 管理者身分啟動 ，就會幫你 關掉ipv4只啟動ipv6 並獲得自己的網段ip。 \n \n ipv4與ipv6，兩者在差別上除了連接的ip網段不同，ipv4可以說是讓多個設備集中到一個終端上，一般情況網速是跟ipv6差距不大，但ipv6是個別獨自連外的，當在人一多起來時，ipv6的網速差距就出來了，雖然ipv4與ipv6兩者的差別還不只這個，提供地址空間大小 地址手動自動配置 網段劃分ip地址空間 支援設備需求等，都是ipv6所優化的內容。 \n \n', 'tags': '', 'url': 'set wifi.html'}, {'title': 'work', 'text': 'cd-檔案 \n cc 檔案名+ -lgd -lm \n ./a.out \n \n 需在replit.nix進行\xa0  備註:Files最底下 藍色雪花圖形\xa0 \n \n { pkgs }: {\n\xa0\xa0\xa0\xa0deps = [\n\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0pkgs.sudo\n\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0pkgs.clang_12\n\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0pkgs.ccls\n\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0pkgs.gdb\n\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0pkgs.gnumake\n\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0pkgs.gnuplot\n\xa0\xa0\xa0\xa0];\n} \n \n \n 需在replit.nix進行 \n { pkgs }: {\ndeps = [\npkgs.vimHugeX\npkgs.gd\npkgs.gnuplot\n];\n} \n \n 其中 pkgs.gd 是必要 \n \n \n \n \n', 'tags': '', 'url': 'work.html'}, {'title': 'program', 'text': '曲線圖 \n #include <stdio.h>\n\nint main() {\n// Open a file to write displacement and velocity data\nFILE *outputFile = fopen("motion_data.txt", "w");\nif (!outputFile) {\nfprintf(stderr, "Failed to create data file.\\n");\nreturn 1;\n}\n\n// Simulate motion for 10 seconds and calculate displacement and velocity, while writing data to the file\ndouble x = 0.2; // Initial displacement\ndouble v = 0.0; // Initial velocity\ndouble dt = 0.01; // Time step\ndouble t = 0.0; // Time\n\nwhile (t <= 10.0) {\ndouble acceleration = (-10.0 * x - 0.5 * v) / 1.0; // Modified system parameters here\nv += acceleration * dt;\nx += v * dt;\n\nfprintf(outputFile, "%lf %lf %lf\\n", t, x, v);\n\nt += dt;\n}\n\n// Close the data file\nfclose(outputFile);\n\n// Start a Gnuplot process using popen\nFILE *gnuplotPipe = popen("gnuplot -persistent", "w");\nif (!gnuplotPipe) {\nfprintf(stderr, "Failed to start Gnuplot.\\n");\nreturn 1;\n}\n\n// Use Gnuplot plotting commands, specify font and output as PNG\nfprintf(gnuplotPipe, "set terminal pngcairo enhanced font \'default,10\' size 800,400\\n");\nfprintf(gnuplotPipe, "set output \'motion_plot.png\'\\n");\nfprintf(gnuplotPipe, "set title \'Displacement and Velocity vs. Time\'\\n");\nfprintf(gnuplotPipe, "set xlabel \'Time (s)\'\\n");\nfprintf(gnuplotPipe, "set ylabel \'Displacement (m)\'\\n");\nfprintf(gnuplotPipe, "plot \'motion_data.txt\' using 1:2 with lines lw 2 title \'Displacement\', \\\n\'motion_data.txt\' using 1:3 with lines lw 2 title \'Velocity\'\\n");\n\n// Close the Gnuplot process\nfprintf(gnuplotPipe, "exit\\n");\npclose(gnuplotPipe);\n\nreturn 0;\n} \n \n 台灣國旗 \n // 內政部國旗參考資料: https://www.moi.gov.tw/cp.aspx?n=10621\n// 幾何形狀著色與繪圖練習\n#include <stdio.h>\n#include <gd.h>\n#include <math.h>\n\nvoid draw_roc_flag(gdImagePtr img);\nvoid draw_white_sun(gdImagePtr img, int x, int y, int size, int color);\n\nint main() {\n// width 3: height 2\nint width = 1200;\n// 國旗長寬比為 3:2\nint height = (int)(width*2.0 / 3.0);\n\ngdImagePtr img = gdImageCreateTrueColor(width, height);\ngdImageAlphaBlending(img, 0);\n\ndraw_roc_flag(img);\n\nFILE *outputFile = fopen("./../images/roc_flag_in_gd.png", "wb");\nif (outputFile == NULL) {\nfprintf(stderr, "Error opening the output file.\\n");\nreturn 1;\n}\ngdImagePngEx(img, outputFile, 9);\nfclose(outputFile);\ngdImageDestroy(img);\nreturn 0;\n}\n\nvoid draw_roc_flag(gdImagePtr img) {\nint width = gdImageSX(img);\nint height = gdImageSY(img);\nint red, white, blue;\n// 白日位於青天面積正中央, 因此中心點座標為長寬各 1/4 處\nint center_x = (int)(width/4);\nint center_y = (int)(height/4);\n// gdImageFilledEllipse 需以長寬方向的 diameter 作圖\n// 由於中央白日圓形的半徑為青天寬度的 1/8\n// 因此中央白日圓形的直徑為青天寬度的 1/4, 也就是國旗寬度的 1/8\n// 而且白日十二道光芒的外圍圓形其半徑也是國旗寬度的1/8\nint sun_radius = (int)(width/8);\n// 中央白日圓形的直徑等於十二道光芒外圍圓形的半徑\nint white_circle_dia = sun_radius;\n// 中央藍色圓形半徑為中央白日的 1又 2/15\nint blue_circle_dia = white_circle_dia + white_circle_dia*2/15;\n// 根據 https://www.moi.gov.tw/cp.aspx?n=10621 訂定國旗三種顏色值\nred = gdImageColorAllocate(img, 255, 0, 0); // 紅色\nwhite = gdImageColorAllocate(img, 255, 255, 255); // 白色\nblue = gdImageColorAllocate(img, 0, 0, 149); // 藍色\n// 根據畫布大小塗上紅色長方形區域\ngdImageFilledRectangle(img, 0, 0, width, height, red);\n// 青天面積為整面國旗的 1/4, 也是採用長方形塗色\ngdImageFilledRectangle(img, 0, 0, (int)(width/2.0), (int)(height/2.0), blue);\n// 先設法以填色畫出六個白色堆疊菱形\ndraw_white_sun(img, center_x, center_y, sun_radius, white);\n// 利用一個藍色大圓與白色小圓畫出藍色環狀\ngdImageFilledEllipse(img, center_x, center_y, blue_circle_dia, blue_circle_dia, blue);\ngdImageFilledEllipse(img, center_x, center_y, white_circle_dia, white_circle_dia, white);\n\n}\n\nvoid draw_white_sun(gdImagePtr img, int center_x, int center_y, int sun_radius, int color) {\n// M_PI 大小定義於 math.h 標頭檔中, 因為三角函數中採用徑度為角度單位\n// 因此定義將角度轉為徑度的轉換變數為 deg, 角度值乘上 deg 就可轉為徑度\nfloat deg = M_PI/180;\n// 根據十二道光芒的每一尖角的角度為 15 度, 求出其對應直角三角形的另一角度為 75 度\n// 求出十二道光芒中任一菱形的 small radius, 也就是菱形的另一個對應小圓的半徑大小\nfloat sr = sun_radius/tan(75*deg);\nint ax, ay, bx, by, dx, dy, ex, ey;\ngdPoint points[4];\n/* 在塗上十二道光芒中的單一菱形區域之前, 先以座標點畫線測試是否正確\nax = center_x;\nay = center_y - sun_radius;\nbx = center_x - sun_radius*tan(15*deg);\nby = center_y;\nex = center_x;\ney = center_y + sun_radius;\ndx = center_x + sun_radius*tan(15*deg);\ndy = center_y;\n// AB\ngdImageLine(img, ax, ay, bx, by, color);\n// BE\ngdImageLine(img, bx, by, ex, ey, color);\n// ED\ngdImageLine(img, ex, ey, dx, dy, color);\n// DA\ngdImageLine(img, dx, dy, ax, ay, color);\n*/\nax = center_x;\nay = center_y - sun_radius;\nbx = center_x - sun_radius*tan(15*deg);\nby = center_y;\nex = center_x;\ney = center_y + sun_radius;\ndx = center_x + sun_radius*tan(15*deg);\ndy = center_y;\n// 確定單一菱形區域的塗色正確後, 利用迴圈每次轉動 30 度, 總共轉六次即可塗上十二道光芒區域\nfor (int i=1;i<=6;i++){\n// A\npoints[0].x = ax+sun_radius*sin(30*deg*i);\npoints[0].y = ay+sun_radius-sun_radius*cos(30*deg*i);\n// B\npoints[1].x = bx+sr-sr*cos(30*deg*i);\npoints[1].y = by-sr*sin(30*deg*i);\n// E\npoints[2].x = ex-sun_radius*sin(30*deg*i);\npoints[2].y = ey-(sun_radius-sun_radius*cos(30*deg*i));\n// D\npoints[3].x = dx-(sr-sr*cos(30*deg*i));\npoints[3].y = dy+sr*sin(30*deg*i);\n// 對菱形區域範圍塗色\ngdImageFilledPolygon(img, points, 4, color);\n// 在菱形區域外圍畫線, 明確界定菱形範圍\ngdImagePolygon(img, points, 4, color);\n}\n} \n \n 美國國旗 \n #include <stdio.h>\n#include <gd.h>\n#include <math.h>\n\nvoid draw_usa_flag(gdImagePtr img);\nvoid draw_star(gdImagePtr img, int x, int y, int size, int color);\n\nint main() {\nint width = 800;\nint height = (int)(width / 1.9);\n\ngdImagePtr img = gdImageCreateTrueColor(width, height);\ngdImageAlphaBlending(img, 0);\n\ndraw_usa_flag(img);\n\nFILE *outputFile = fopen("./../images/usa_flag.png", "wb");\nif (outputFile == NULL) {\nfprintf(stderr, "Error opening the output file.\\n");\nreturn 1;\n}\n\ngdImagePngEx(img, outputFile, 9);\nfclose(outputFile);\ngdImageDestroy(img);\n\nreturn 0;\n}\n\nvoid draw_usa_flag(gdImagePtr img) {\nint width = gdImageSX(img);\nint height = gdImageSY(img);\nint red, white, blue;\n// Colors for the flag\nred = gdImageColorAllocate(img, 178, 34, 52); // Red stripes\nwhite = gdImageColorAllocate(img, 255, 255, 255); // White stripes\nblue = gdImageColorAllocate(img, 60, 59, 110); // Blue field\n\nint stripe_height = height / 13;\nint stripe_width = width;\nint star_size = (int)(0.0308 * height); // Corrected star size (half the original size)\n\nfor (int y = 0; y < height; y += stripe_height) {\nif (y / stripe_height % 2 == 0) {\ngdImageFilledRectangle(img, 0, y, stripe_width, y + stripe_height, red);\n} else {\ngdImageFilledRectangle(img, 0, y, stripe_width, y + stripe_height, white);\n}\n}\n\ngdImageFilledRectangle(img, 0, 0, width * 2 / 5, stripe_height * 7, blue);\n\nint star_spacing_x = (int)(0.126 * height); // Horizontal spacing between stars\nint star_spacing_y = (int)(0.054 * height); // Vertical spacing between stars\nint star_start_x = (int)(0.122 * height); // Starting X position for stars\nint star_start_y = (int)(0.0485 * height); // Starting Y position for stars\n\nfor (int row = 0; row < 9; row++) {\nint starsPerRow = (row % 2 == 0) ? 6 : 5;\nint space_x = (row % 2 == 0) ? star_spacing_x / -2 : 0;\nfor (int star = 0; star < starsPerRow; star++) {\nint x = star_start_x + star * star_spacing_x+space_x;\nint y = star_start_y + row * star_spacing_y;\ndraw_star(img, x, y, star_size, white);\n}\n}\n}\n\nvoid draw_star(gdImagePtr img, int x, int y, int size, int color) {\ngdPoint points[10];\n\nfor (int i = 0; i < 10; i++) {\ndouble angle = M_PI / 2 + i * 2 * M_PI / 10+M_PI;\nint radius = (i % 2 == 0) ? size : size / 2;\npoints[i].x = x + radius * cos(angle);\npoints[i].y = y + radius * sin(angle);\n}\n\n// Fill the star with white color\ngdImageFilledPolygon(img, points, 10, color);\n} \n 日本國旗 \n #include <stdio.h>\n#include <gd.h>\n#include <math.h>\n\nvoid draw_japan_flag(gdImagePtr img);\nvoid draw_white_sun(gdImagePtr img, int center_x, int center_y, int sun_radius, int white, int red );\n\nint main() {\n    // width 3: height 2\n    int width = 1200;\n    int height = 2 * width / 3;\n\n    gdImagePtr img = gdImageCreateTrueColor(width, height);\n    gdImageAlphaBlending(img, 0);\n\n    draw_japan_flag(img);\n\n    FILE *outputFile = fopen("./../images/japan_flag.png", "wb");\n    if (outputFile == NULL) {\n        fprintf(stderr, "Error opening the output file.\\n");\n        return 1;\n    }\n    gdImagePngEx(img, outputFile, 9);\n    fclose(outputFile);\n    gdImageDestroy(img);\n    return 0;\n}\n\nvoid draw_japan_flag(gdImagePtr img) {\n    int width = gdImageSX(img);\n    int height = gdImageSY(img);\n    int red, white ;\n    int center_x =  0.5 * width;\n    int center_y =  0.5 * height;\n    int sun_radius = 145 ;\n\n    // Colors for the flag\n    red = gdImageColorAllocate(img, 242, 0, 0); // Red color\n    white = gdImageColorAllocate(img, 255, 255, 255); // White stripes\n\n\n    // 繪製白色矩形區域\n    gdImageFilledRectangle(img, 0, 0, width, height, white);\n\n\n    // 繪製太陽內部\n    gdImageFilledEllipse(img, center_x, center_y, sun_radius * 3, sun_radius * 3, red);\n} \n 中國國旗 \n #include <stdio.h>\n#include <gd.h>\n#include <math.h>\n\nvoid draw_chinese_flag(gdImagePtr img);\n\nint main() {\n    int width = 300; // 國旗寬度\n    int height = 200; // 國旗高度\n\n    gdImagePtr im = gdImageCreateTrueColor(width, height);\n    gdImageAlphaBlending(im, 0);\n\n    draw_chinese_flag(im);\n\n    FILE *outputFile = fopen("./../images/proc_flag.png", "wb");\n    if (outputFile == NULL) {\n        fprintf(stderr, "打開输出文件時出錯。\\n");\n        return 1;\n    }\n\n    gdImagePngEx(im, outputFile, 9);\n    fclose(outputFile);\n    gdImageDestroy(im);\n\n    return 0;\n}\n\n// 聲明 draw_star 函數\nvoid draw_star(gdImagePtr img, int x, int y, int size, int color, double rotation_angle);\n\nvoid draw_chinese_flag(gdImagePtr img) {\n    int width = gdImageSX(img);\n    int height = gdImageSY(img);\n    int red, yellow;\n\n    // 國旗顏色\n    red = gdImageColorAllocate(img, 255, 0, 0); // 紅色背景\n    yellow = gdImageColorAllocate(img, 255, 255, 0); // 黃色星星\n\n    // 畫紅色背景\n    gdImageFilledRectangle(img, 0, 0, width, height, red);\n\n    // 設置星星的大小和位置\n    int star_size = (int)(0.28 * height);\n    int star_x = (int)(0.165 * width);\n    int star_y = (int)(0.265 * height);\n\n    // 畫大星星\n    draw_star(img, star_x, star_y, star_size, yellow, 11.0);\n\n    // 繪製小星星，位置根據實際國旗比例計算\n    double radius = 0.15 * height;\n    double angle = 360 / 7 * M_PI / 179.0;\n    double rotation = -M_PI / 7.5;\n    int cx = (int)(0.32 * width);\n    int cy = (int)(0.27 * height);\n\n    for (int i = -1; i < 3; i++) {\n        int x = (int)(cx + radius * cos(i * angle + rotation));\n        int y = (int)(cy + radius * sin(i * angle + rotation));\n        draw_star(img, x, y, 19, yellow, M_PI / 5.0);\n    }\n}\n\nvoid draw_star(gdImagePtr img, int x, int y, int size, int color, double rotation_angle) {\n    gdPoint points[10];\n\n    // 計算星形的五個外點和五個内點\n    double outer_radius = size / 2;\n    double inner_radius = size / 6;\n    double angle = M_PI / 5.0;\n\n    for (int i = 0; i < 10; i++) {\n        double radius = (i % 2 == 0) ? outer_radius : inner_radius;\n        double theta = rotation_angle + i * angle;\n        points[i].x = x + radius * cos(theta);\n        points[i].y = y + radius * sin(theta);\n    }\n\n    // 使用 gdImageFilledPolygon 繪製星形\n    gdImageFilledPolygon(img, points, 10, color);\n} \n 英國國旗 \n #include <stdio.h>\n#include <gd.h>\n#include <math.h>\n\nvoid draw_uk_flag(gdImagePtr img);\nvoid fillTriangle(gdImagePtr img, int x1, int y1, int x2, int y2, int x3, int y3, int color);\n\nint main() {\n    // 設置國旗的寬和高\n    int width = 1200;\n    int height = width / 2;\n\n    // 創建圖像\n    gdImagePtr img = gdImageCreateTrueColor(width, height);\n    gdImageAlphaBlending(img, 0);\n\n    // 繪製英國國旗\n    draw_uk_flag(img);\n\n    // 將圖像保存到文件\n    FILE *outputFile = fopen("./../images/uk_flag.png", "wb");\n    if (outputFile == NULL) {\n        fprintf(stderr, "打開输出文件時發生錯誤。\\n");\n        return 1;\n    }\n    gdImagePngEx(img, outputFile, 9);\n    fclose(outputFile);\n    gdImageDestroy(img);\n    return 0;\n}\n\n\n\nvoid draw_uk_flag(gdImagePtr img) {\n    int width = gdImageSX(img);\n    int height = gdImageSY(img);\n\n    int red, white, blue;\n    red = gdImageColorAllocate(img, 204, 0, 0);       // 红色\n    white = gdImageColorAllocate(img, 255, 255, 255); // 白色\n    blue = gdImageColorAllocate(img, 0, 0, 153);      // 藍色\n\n    gdImageFilledRectangle(img, 0, 0, width, height, blue);\n\n\n  int x1, y1, x2, y2, x3, y3;\n  {\n    int line_thickness = 100;\n    gdImageSetThickness(img, line_thickness);\n\n    int x1, y1, x2, y2, x3, y3;\n\n    // 繪製白色斜線\n    x1 = 0;\n    y1 = 600;\n    x2 = 1200;\n    y2 = 0;\n    gdImageLine(img, x1, y1, x2, y2, white);\n\n    x1 = 0;\n    y1 = 0;\n    x2 = 1200;\n    y2 = 600;\n    gdImageLine(img, x1, y1, x2, y2, white);\n}\n  {\n    int line_thickness = 33;\n    gdImageSetThickness(img, line_thickness);\n\n\n    // 繪製红色斜線\n    x1 = 566;\n    y1 = 300;\n    x2 = 1166;\n    y2 = 0;\n    gdImageLine(img, x1, y1, x2, y2, red);\n\n    x1 = 1233;\n    y1 = 600;\n    x2 = 633;\n    y2 = 300;\n    gdImageLine(img, x1, y1, x2, y2, red);\n\n    x1 = 566;\n    y1 = 300;\n    x2 = -33;\n    y2 = 0;\n    gdImageLine(img, x1, y1, x2, y2, red);\n\n    x1 = 600;\n    y1 = 316.5;\n    x2 = 0;\n    y2 = 616.5;\n    gdImageLine(img, x1, y1, x2, y2, red);\n  }\n  {\n  int line_thickness = 33;\n  gdImageSetThickness(img, line_thickness);\n\n  int x1, y1, x2, y2, x3, y3;\n\n  // 繪製  斜線\n  x1 = 0;\n  y1 = 600;\n  x2 = 1200;\n  y2 = 0;\n  gdImageLine(img, x1, y1, x2, y2, red );\n\n\n  x1 = 1200;\n    y1 = 16.5;\n    x2 = 600;\n    y2 = 316.5;\n    gdImageLine(img, x1, y1, x2, y2, white);\n\n\n  x1 = 0;\n    y1 = 583.5;\n    x2 = 600;\n    y2 = 283.5;\n    gdImageLine(img, x1, y1, x2, y2, white);\n\n\n  }\n\n    // 繪製白色十字\n    int cross_width = width / 32;\n    int cross_arm_width = width / 32;\n    int center_x = width / 2;\n    int center_y = height / 2;\n\n    gdImageFilledRectangle(img, center_x + 2.7 * cross_width, 0, center_x - 2.7 * cross_width, height, white);\n    gdImageFilledRectangle(img, 0, center_y + 2.7 * cross_arm_width, width, center_y - 2.7 * cross_arm_width, white);\n\n    // 繪製红色十字\n    gdImageFilledRectangle(img, center_x + 1.5 * cross_width, 0, center_x - 1.5 * cross_width, height, red);\n    gdImageFilledRectangle(img, 0, center_y + 1.5 * cross_arm_width, width, center_y - 1.5 * cross_arm_width, red);\n} \n 韓 國國旗 \n #include <stdio.h>\n#include <gd.h>\n#include <math.h>\n\n#define WIDTH 900\n#define HEIGHT 600\n#define FILENAME "south_korea_flag.png"\n\nint main() {\n    gdImagePtr im;\n    FILE *pngout;\n    int white, black, red, blue;\n\n    im = gdImageCreate(WIDTH, HEIGHT);\n\n    white = gdImageColorAllocate(im, 255, 255, 255);\n    black = gdImageColorAllocate(im, 0, 0, 0);\n    red = gdImageColorAllocate(im, 205, 0, 0);\n    blue = gdImageColorAllocate(im, 0, 56, 168);\n\n    // Background (white)\n    gdImageFilledRectangle(im, 0, 0, WIDTH, HEIGHT , white);\n\n    // Blue Circle (Yin-Yang Symbol)\n    gdImageFilledArc(im, WIDTH / 2, HEIGHT / 2, WIDTH / 3, HEIGHT / 2, 210, 30, red, gdArc);\n\n    // Red Circle (Yin-Yang Symbol)\n    gdImageFilledArc(im, WIDTH / 2, HEIGHT / 2, WIDTH / 3, HEIGHT / 2, 30, 210, blue, gdArc);\n\n  int circleX = 385;    // 圓心的 X 座標\n  int circleY = 262.5;   // 圓心的 Y 座標\n  int circleRadius = 75;     \n\n  // 繪製圓形\n  gdImageFilledEllipse(im, circleX, circleY, circleRadius * 2, circleRadius * 2, red);\n\n  int circleX2 = 515;    // 圓心的 X 座標\n\n int circleY2 = 337.5;\n\n  // 繪製圓形\n  gdImageFilledEllipse(im, circleX2, circleY2, circleRadius * 2, circleRadius * 2, blue);\n\n  {\n\n\n  // 起點和終點位置\n\n  int startX = 340;    \n  // 線的起點 X 座標\n\n  int startY = 90;   \n  // 線的起點 Y 座標\n\n  int endX = 200;     \n  // 線的終點 X 座標\n\n  int endY = 260;     \n  // 線的終點 Y 座標\n\n  int lineWidth = 23;  // 線的寬度\n\n  // 繪製線段\n  gdImageSetThickness(im, lineWidth);\n  gdImageLine(im, startX, startY, endX, endY, black);\n  // 繪製線段\n  gdImageSetThickness(im, lineWidth);\n  gdImageLine(im, startX -35, startY -10, endX -35, endY -10, black);\n\n  // 繪製線段\n  gdImageSetThickness(im, lineWidth);\n  gdImageLine(im, startX -70, startY -20, endX -70, endY -20, black);\n\n  int startX2 = 213;    \n  // 線的起點 X 座標\n\n  int startY2 = 270;   \n  // 線的起點 Y 座標\n\n  int endX2 = 133;     \n  // 線的終點 X 座標\n\n  int endY2 = 210;     \n  // 線的終點 Y 座標\n\n  int lineWidth2 = 25;  // 線的寬度\n\n  // 繪製線段\n  gdImageSetThickness(im, lineWidth);\n  gdImageLine(im, startX2 +3, startY2, endX2 +3, endY2, white);\n\n  gdImageSetThickness(im, lineWidth +10);\ngdImageLine(im, startX2 -17, startY2 +9 , endX2 -17, endY2 +9 , white);\n\n  gdImageSetThickness(im, lineWidth );\ngdImageLine(im, startX2 +115, startY2 -145, endX2 +115, endY2 -145, white);\n\n  gdImageSetThickness(im, lineWidth);\ngdImageLine(im, startX2 +120, startY2 -155, endX2 +120, endY2 -155, white);\n\n  gdImageSetThickness(im, lineWidth +12);\ngdImageLine(im, startX2 +145, startY2 -155, endX2 +145, endY2 -155, white);\n}\n  {\n    // 起點和終點位置\n\n  int startX = 330;    \n  // 線的起點 X 座標\n\n  int startY = 520;   \n  // 線的起點 Y 座標\n\n  int endX = 190;     \n  // 線的終點 X 座標\n\n  int endY = 350;     \n  // 線的終點 Y 座標\n\n  int lineWidth = 23;  // 線的寬度\n\n  // 繪製線段\n  gdImageSetThickness(im, lineWidth);\n  gdImageLine(im, startX, startY, endX, endY, black);\n  // 繪製線段\n  gdImageSetThickness(im, lineWidth);\n  gdImageLine(im, startX -35, startY +10, endX -35, endY +10, black);\n\n  // 繪製線段\n  gdImageSetThickness(im, lineWidth);\n  gdImageLine(im, startX -70, startY +20, endX -70, endY +20, black);\n\n  int startX2 = 213;    \n  // 線的起點 X 座標\n\n  int startY2 = 330;   \n  // 線的起點 Y 座標\n\n  int endX2 = 133;     \n  // 線的終點 X 座標\n\n  int endY2 = 390;     \n  // 線的終點 Y 座標\n\n  int lineWidth2 = 25;  // 線的寬度\n\n  // 繪製線段\n  gdImageSetThickness(im, lineWidth +8);\n  gdImageLine(im, startX2 -11, startY2, endX2 -11, endY2, white);\n\n  gdImageSetThickness(im, lineWidth +10);\ngdImageLine(im, startX2 -30, startY2 -9 , endX2 -30, endY2 -9 , white);\n\n  gdImageSetThickness(im, lineWidth );\ngdImageLine(im, startX2 +100, startY2 +150, endX2 +100, endY2 +150, white);\n\n  gdImageSetThickness(im, lineWidth);\ngdImageLine(im, startX2 +120, startY2 +155, endX2 +120, endY2 +155, white);\n\n  gdImageSetThickness(im, lineWidth +14);\ngdImageLine(im, startX2 +145, startY2 +157, endX2 +145, endY2 +157, white);\n\n    gdImageSetThickness(im, lineWidth -10);\ngdImageLine(im, 232, 426, 206, 448, white);\n\n  }\n\n  {\n    // 起點和終點位置\n\n  int startX = 564;    \n  // 線的起點 X 座標\n\n  int startY = 520;   \n  // 線的起點 Y 座標\n\n  int endX = 704;     \n  // 線的終點 X 座標\n\n  int endY = 350;     \n  // 線的終點 Y 座標\n\n  int lineWidth = 23;  // 線的寬度\n\n  // 繪製線段\n  gdImageSetThickness(im, lineWidth);\n  gdImageLine(im, startX +70, startY +20, endX +70, endY +20, black);\n\n    // 繪製線段\n  gdImageSetThickness(im, lineWidth);\n  gdImageLine(im, startX, startY, endX, endY, black);\n\n    // 繪製線段\n  gdImageSetThickness(im, lineWidth);\n  gdImageLine(im, startX +35, startY +10, endX +35, endY +10, black);\n\ngdImageSetThickness(im, lineWidth -10);\ngdImageLine(im, 624, 400, 734, 490, white);\n\n  int startX2 = 553;    \n  // 線的起點 X 座標\n\n  int startY2 = 330;   \n  // 線的起點 Y 座標\n\n  int endX2 = 633;     \n  // 線的終點 X 座標\n\n  int endY2 = 390;     \n  // 線的終點 Y 座標\n\n  int lineWidth2 = 25;  // 線的寬度\n\n  // 繪製線段\n  gdImageSetThickness(im, lineWidth +8);\n  gdImageLine(im, startX2 +139, startY2, endX2 +139, endY2, white);\n\n  gdImageSetThickness(im, lineWidth +10);\ngdImageLine(im, startX2 +157, startY2 -9 , endX2 +157, endY2 -9 , white);\n\n  gdImageSetThickness(im, lineWidth);\ngdImageLine(im, startX2 +25, startY2 +155, endX2 +25, endY2 +155, white);\n\n  gdImageSetThickness(im, lineWidth +30);\ngdImageLine(im, startX2 -3, startY2 +170, endX2 , endY2 +170, white);\n  }\n  {\n    // 起點和終點位置\n\n  int startX = 330;    \n  // 線的起點 X 座標\n\n  int startY = 520;   \n  // 線的起點 Y 座標\n\n  int endX = 190;     \n  // 線的終點 X 座標\n\n  int endY = 350;     \n  // 線的終點 Y 座標\n\n  int lineWidth = 23;  // 線的寬度\n\n  // 繪製線段\n  gdImageSetThickness(im, lineWidth);\n  gdImageLine(im, startX, startY, endX, endY, black);\n  // 繪製線段\n  gdImageSetThickness(im, lineWidth);\n  gdImageLine(im, startX -35, startY +10, endX -35, endY +10, black);\n\n  // 繪製線段\n  gdImageSetThickness(im, lineWidth);\n  gdImageLine(im, startX -70, startY +20, endX -70, endY +20, black);\n\n  int startX2 = 213;    \n  // 線的起點 X 座標\n\n  int startY2 = 330;   \n  // 線的起點 Y 座標\n\n  int endX2 = 133;     \n  // 線的終點 X 座標\n\n  int endY2 = 390;     \n  // 線的終點 Y 座標\n\n  int lineWidth2 = 25;  // 線的寬度\n\n  // 繪製線段\n  gdImageSetThickness(im, lineWidth +8);\n  gdImageLine(im, startX2 -11, startY2, endX2 -11, endY2, white);\n\n  gdImageSetThickness(im, lineWidth +10);\ngdImageLine(im, startX2 -30, startY2 -9 , endX2 -30, endY2 -9 , white);\n\n  gdImageSetThickness(im, lineWidth );\ngdImageLine(im, startX2 +100, startY2 +150, endX2 +100, endY2 +150, white);\n\n  gdImageSetThickness(im, lineWidth);\ngdImageLine(im, startX2 +120, startY2 +155, endX2 +120, endY2 +155, white);\n\n  gdImageSetThickness(im, lineWidth +14);\ngdImageLine(im, startX2 +145, startY2 +157, endX2 +145, endY2 +157, white);\n\n    gdImageSetThickness(im, lineWidth -10);\ngdImageLine(im, 232, 426, 206, 448, white);\n\n  }\n  {\n    // 起點和終點位置\n\n  int startX = 564;    \n  // 線的起點 X 座標\n\n  int startY = 97;   \n  // 線的起點 Y 座標\n\n  int endX = 704;     \n  // 線的終點 X 座標\n\n  int endY = 267;     \n  // 線的終點 Y 座標\n\n  int lineWidth = 23;  // 線的寬度\n\n  // 繪製線段\n  gdImageSetThickness(im, lineWidth);\n  gdImageLine(im, startX +70, startY -20, endX +70, endY -20, black);\n\n    // 繪製線段\n  gdImageSetThickness(im, lineWidth);\n  gdImageLine(im, startX, startY, endX, endY, black);\n\n    gdImageSetThickness(im, lineWidth -10);\ngdImageLine(im, 624, 212, 734, 118, white);\n\n    // 繪製線段\n  gdImageSetThickness(im, lineWidth);\n  gdImageLine(im, startX +35, startY -10, endX +35, endY -10, black);\n\n  int startX2 = 553;    \n  // 線的起點 X 座標\n\n  int startY2 = 277;   \n  // 線的起點 Y 座標\n\n  int endX2 = 633;     \n  // 線的終點 X 座標\n\n  int endY2 = 217;     \n  // 線的終點 Y 座標\n\n  int lineWidth2 = 25;  // 線的寬度\n\n  // 繪製線段\n  gdImageSetThickness(im, lineWidth +8);\n  gdImageLine(im, startX2 +134, startY2, endX2 +134, endY2, white);\n\n  gdImageSetThickness(im, lineWidth +10);\ngdImageLine(im, startX2 +157, startY2 +9 , endX2 +157, endY2 +9 , white);\n\n  gdImageSetThickness(im, lineWidth);\ngdImageLine(im, startX2 +25, startY2 -155, endX2 +25, endY2 -155, white);\n\n    gdImageSetThickness(im, lineWidth +30);\ngdImageLine(im, startX2 -5, startY2 -155, endX2 -5, endY2 -155, white);\n\n  }\n\n    // Save image\nFILE *outputFile = fopen("./../images/korea_flag.png", "wb");\nif (outputFile == NULL) {\n    fprintf(stderr, "Error opening the output file.\\n");\n    return 1;\n}\n  gdImagePngEx(im, outputFile, 9);\n      fclose(outputFile);\n      gdImageDestroy(im);\n      return 0;\n  } \n', 'tags': '', 'url': 'program.html'}, {'title': 'file', 'text': '檔案總攬 \n \n tinyc.7z \xa0( Tiny C Compiler 編譯 C 程式, 包含 gd 與 gnuplot) \n \n w11_1a.7z \xa0( 網路設定檔案) \n \n python3114_git_putty.7z \xa0(將近端 cmsimde 啟動並改版後推向 Github 所需的檔案) \n \n tcc_w_gd_raylib_SDL2.7z \xa0(新版tcc) \n \n Run-Away_C_SDL2_game \xa0(GAME) \n \n roc_list_coord_flag.7z \xa0(w15測驗題目) \n \n \n', 'tags': '', 'url': 'file.html'}, {'title': 'w17', 'text': '', 'tags': '', 'url': 'w17.html'}, {'title': 'Brython', 'text': '\n https://en.wikipedia.org/wiki/Python_(programming_language) \n Examples: \n https://gist.github.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d \n https://www.geeksforgeeks.org/python-programming-examples/ \n https://www.programiz.com/python-programming/examples \n https://www.freecodecamp.org/news/python-code-examples-sample-script-coding-tutorial-for-beginners/ \n Python Tutorial: \n https://docs.python.org/3/tutorial/ \n An informal introduction to Python \n Indentation (Python 採 4 個 Spaces 縮排, 以界定執行範圍) \n Variables ( Python Keywords ) \n Comments (# 單行註解, 三個單引號或三個雙引號標註多行註解) \n Numbers  (整數 int(), 浮點數 float()) \n Strings  (字串) \n print (Python 內建函式,  print()  函式) \n Python control flow tools \n for \n if \n range \n open \n read \n lists \n tuples \n dictionaries \n functions \n try ... except \n break \n pass \n classes \n 這個頁面 demo 如何在同一頁面下納入多個線上 Ace 編輯器與執行按鈕 ( practice_html.txt  動態頁面超文件). \n practice_html.txt  動態頁面超文件應該可以在啟動 Brython 時, 設定將 .py 檔案放入 downloads/py 目錄中引用. \n 亦即將所有對應的 html 也使用 Brython 產生, 然後寫為  class  後, 在範例導入時透過  instance  引用. \n <!-- 啟動 Brython -->\n<script>\nwindow.onload=function(){\nbrython({debug:1, pythonpath:[\'./../cmsimde/static/\',\'./../downloads/py/\']});\n}\n</script> \n 從 1 累加到 100: \n 1 add to 100 \n 將 iterable 與 iterator  相關說明 , 利用 Brython 與 Ace Editor 整理在這個頁面. \n  導入 brython 程式庫  \n \n \n \n \n  啟動 Brython  \n \n \n \n  導入 FileSaver 與 filereader  \n \n \n \n \n  導入 ace  \n \n \n \n \n \n \n  導入 gearUtils-0.9.js Cango 齒輪繪圖程式庫  \n \n \n \n \n \n \n  請注意, 這裡使用 Javascript 將 localStorage["kw_py_src1"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱 \n \n \n \n \n \n \n  add 1 to 100 開始  \n \n \n  add 1 to 100 結束 \n  editor1 開始  \n  用來顯示程式碼的 editor 區域  \n \n  以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合  \n  存擋表單開始  \n Filename:  .py   \n  存擋表單結束  \n \n  執行與清除按鈕開始  \n Run   Output   清除輸出區 清除繪圖區 Reload \n  執行與清除按鈕結束  \n \n  程式執行 ouput 區  \n \n  Brython 程式執行的結果, 都以 brython_div1 作為切入位置  \n \n  editor1 結束   ##########################################  \n 從 1 累加到 100 part2: \n 1 add to 100 cango_three_gears BSnake AI Tetris Rotating Block \n  請注意, 這裡使用 Javascript 將 localStorage["kw_py_src2"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱 \n \n \n \n  add 1 to 100 part2 開始  \n \n \n  add 1 to 100 part2 結束 \n  editor2 開始  \n  用來顯示程式碼的 editor 區域  \n \n  以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合  \n  存擋表單開始  \n Filename:  .py   \n  存擋表單結束  \n \n  執行與清除按鈕開始  \n Run   Output   清除輸出區 清除繪圖區 Reload \n  執行與清除按鈕結束  \n \n  程式執行 ouput 區  \n \n  Brython 程式執行的結果, 都以 brython_div1 作為切入位置  \n \n  editor2 結束  \n \n \n', 'tags': '', 'url': 'Brython.html'}]};