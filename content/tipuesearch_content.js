var tipuesearch = {"pages": [{'title': 'About', 'text': ' https://github.com/zhe41223118/cp2023 \xa0(個人倉儲連結)\xa0 \n https://github.com/FGH41223111/cp2023_ag6 \xa0(小組倉儲連結) \n', 'tags': '', 'url': 'About.html'}, {'title': 'w15', 'text': '題目: \n 1. 在 這個 gd檔中加入, 利用白色作為畫線顏色,  將第二組的 ABED 等四個點的座標, 以直線相連 \n \n 2. 列出第二組 ABED 的四條直線與白日中的大圓所相交 (intersect) 的四個點座標 \n A coord: (429,125) B coord: (279,165) E coord: (170,274) D coord: (170,274)', 'tags': '', 'url': 'w15.html'}, {'title': 'try Do', 'text': '第一次嘗試(錯誤答案) \n \n // https://en.wikipedia.org/wiki/Flag_of_the_Republic_of_China\n// 內政部國旗參考資料: https://www.moi.gov.tw/cp.aspx?n=10621\n// cc roc_flag_in_gd.c -lgd -lm to link with gd and math library\n// https://www.rapidtables.com/web/color/RGB_Color.html\n// 幾何形狀著色與繪圖練習\n// 以下 gd 繪圖程式嘗試畫出 ROC 國旗, 請根據下列程式內容完成後續的國旗繪圖\n#include <stdio.h>\n#include <gd.h>\n#include <math.h>\n \nvoid draw_roc_flag(gdImagePtr img);\nvoid draw_white_sun(gdImagePtr img, int x, int y, int size, int color);\n \nint main() {\n    // width 3: height 2\n    int width = 1200;\n    // 國旗長寬比為 3:2\n    int height = (int)(width*2.0 / 3.0);\n \n    gdImagePtr img = gdImageCreateTrueColor(width, height);\n    gdImageAlphaBlending(img, 0);\n \n    draw_roc_flag(img);\n \n    FILE *outputFile = fopen("roc_flag_in_gd.png", "wb");\n    if (outputFile == NULL) {\n        fprintf(stderr, "Error opening the output file.\\n");\n        return 1;\n    }\n    gdImagePngEx(img, outputFile, 9);\n    fclose(outputFile);\n    gdImageDestroy(img);\n    return 0;\n}\n \nvoid draw_roc_flag(gdImagePtr img) {\n    int width = gdImageSX(img);\n    int height = gdImageSY(img);\n    int red, white, blue;\n    // 白日位於青天面積正中央, 因此中心點座標為長寬各 1/4 處\n    int center_x = (int)(width/4);\n    int center_y = (int)(height/4);\n    // gdImageFilledEllipse 需以長寬方向的 diameter 作圖\n    // 由於中央白日圓形的半徑為青天寬度的 1/8\n    // 因此中央白日圓形的直徑為青天寬度的 1/4, 也就是國旗寬度的 1/8\n    // 而且白日十二道光芒的外圍圓形其半徑也是國旗寬度的1/8\n    int sun_radius = (int)(width/8);\n    // 中央白日圓形的直徑等於十二道光芒外圍圓形的半徑\n    int white_circle_dia = sun_radius;\n    // 中央藍色圓形半徑為中央白日的 1又 2/15\n    int blue_circle_dia = white_circle_dia +  white_circle_dia*2/15;\n    // 根據 https://www.moi.gov.tw/cp.aspx?n=10621 訂定國旗三種顏色值\n    red = gdImageColorAllocate(img, 255, 0, 0); // 紅色\n    white = gdImageColorAllocate(img, 255, 255, 255); // 白色\n    blue = gdImageColorAllocate(img, 0, 0, 149); // 藍色\n    // 根據畫布大小塗上紅色長方形區域\n    gdImageFilledRectangle(img, 0, 0, width, height, red);\n    // 青天面積為整面國旗的 1/4, 也是採用長方形塗色\n    gdImageFilledRectangle(img, 0, 0, (int)(width/2.0), (int)(height/2.0), blue);\n    // 先設法以填色畫出六個白色堆疊菱形\n    draw_white_sun(img, center_x, center_y, sun_radius, white);\n    // 利用一個藍色大圓與白色小圓畫出藍色環狀\n    gdImageFilledEllipse(img, center_x, center_y, blue_circle_dia, blue_circle_dia, blue);\n    gdImageFilledEllipse(img, center_x, center_y, white_circle_dia, white_circle_dia, white);\n   \n}\n \nvoid draw_white_sun(gdImagePtr img, int center_x, int center_y, int sun_radius, int color) {\n    // M_PI 大小定義於 math.h 標頭檔中, 因為三角函數中採用徑度為角度單位\n    // 因此定義將角度轉為徑度的轉換變數為 deg, 角度值乘上 deg 就可轉為徑度\n    float deg = M_PI/180;\n    // 根據十二道光芒的每一尖角的角度為 15 度, 求出其對應直角三角形的另一角度為 75 度\n    // 求出十二道光芒中任一菱形的 small radius, 也就是菱形的另一個對應小圓的半徑大小\n    float sr = sun_radius/tan(75*deg);\n    int ax, ay, bx, by, dx, dy, ex, ey;\n    gdPoint points[4];\n    /* 在塗上十二道光芒中的單一菱形區域之前, 先以座標點畫線測試是否正確\n    ax = center_x;\n    ay = center_y - sun_radius;\n    bx = center_x - sun_radius*tan(15*deg);\n    by = center_y;\n    ex = center_x;\n    ey = center_y + sun_radius;\n    dx = center_x + sun_radius*tan(15*deg);\n    dy = center_y;\n    // AB\n    gdImageLine(img, ax, ay, bx, by, color);\n    // BE\n    gdImageLine(img, bx, by, ex, ey, color);\n    // ED\n    gdImageLine(img, ex, ey, dx, dy, color);\n    // DA\n    gdImageLine(img, dx, dy, ax, ay, color);\n    */\n    ax = center_x;\n    ay = center_y - sun_radius;\n    printf("%d,%d\\n",ax, ay);\n    bx = center_x - sun_radius*tan(15*deg);\n    by = center_y;\n    ex = center_x;\n    ey = center_y + sun_radius;\n    dx = center_x + sun_radius*tan(15*deg);\n    dy = center_y;\n    // 確定單一菱形區域的塗色正確後, 利用迴圈每次轉動 30 度, 總共轉六次即可塗上十二道光芒區域\n    for (int i=1;i<=6;i++){\n    // A\n    points[0].x = ax+sun_radius*sin(30*deg*i);\n    points[0].y = ay+sun_radius-sun_radius*cos(30*deg*i);\n    printf("A coord: (%d,%d)\\n", points[0].x, points[0].y);\n    // B\n    points[1].x = bx+sr-sr*cos(30*deg*i);\n    points[1].y = by-sr*sin(30*deg*i);\n    printf("B coord: (%d,%d)\\n", points[1].x, points[1].y);\n    // E\n    points[2].x = ex-sun_radius*sin(30*deg*i);\n    points[2].y = ey-(sun_radius-sun_radius*cos(30*deg*i));\n    printf("E coord: (%d,%d)\\n", points[2].x, points[2].y);\n    // D\n    points[3].x = dx-(sr-sr*cos(30*deg*i));\n    points[3].y = dy+sr*sin(30*deg*i);\n    printf("D coord: (%d,%d)\\n\\n", points[2].x, points[2].y);\n    // 對菱形區域範圍塗色\n    gdImageFilledPolygon(img, points, 4, color);\n    // 在菱形區域外圍畫線, 明確界定菱形範圍\n    gdImagePolygon(img, points, 4, color);\n    }\n} \n 第二次製作(有點是答案) \n \n \n #include <stdio.h>\n#include <gd.h>\n#include <math.h>\n \nvoid draw_roc_flag(gdImagePtr img);\nvoid draw_white_sun(gdImagePtr img, int x, int y, int size, int color);\n \nvoid connectPoints(gdImagePtr img, int x1, int y1, int x2, int y2, int color);\n \nint main() {\n// width 3: height 2\nint width = 1200;\n// 國旗長寬比為 3:2\nint height = (int)(width * 2.0 / 3.0);\n \ngdImagePtr img = gdImageCreateTrueColor(width, height);\ngdImageAlphaBlending(img, 0);\n \ndraw_roc_flag(img);\n \nFILE *outputFile = fopen("Y:/tmp/c_ex/roc_flag_in_gd.png", "wb");\nif (outputFile == NULL) {\nfprintf(stderr, "Error opening the output file.\\n");\nreturn 1;\n}\ngdImagePngEx(img, outputFile, 9);\nfclose(outputFile);\ngdImageDestroy(img);\nreturn 0;\n}\n \nvoid draw_roc_flag(gdImagePtr img) {\nint width = gdImageSX(img);\nint height = gdImageSY(img);\nint red, white, blue;\n// 白日位於青天面積正中央, 因此中心點座標為長寬各 1/4 處\nint center_x = (int)(width / 4);\nint center_y = (int)(height / 4);\n// gdImageFilledEllipse 需以長寬方向的 diameter 作圖\n// 由於中央白日圓形的半徑為青天寬度的 1/8\n// 因此中央白日圓形的直徑為青天寬度的 1/4, 也就是國旗寬度的 1/8\n// 而且白日十二道光芒的外圍圓形其半徑也是國旗寬度的1/8\nint sun_radius = (int)(width / 8);\n// 中央白日圓形的直徑等於十二道光芒外圍圓形的半徑\nint white_circle_dia = sun_radius;\n// 中央藍色圓形半徑為中央白日的 1又 2/15\nint blue_circle_dia = white_circle_dia + white_circle_dia * 2 / 15;\n// 根據 https://www.moi.gov.tw/cp.aspx?n=10621 訂定國旗三種顏色值\nred = gdImageColorAllocate(img, 255, 0, 0); // 紅色\nwhite = gdImageColorAllocate(img, 255, 255, 255); // 白色\nblue = gdImageColorAllocate(img, 0, 0, 149); // 藍色\n// 根據畫布大小塗上紅色長方形區域\ngdImageFilledRectangle(img, 0, 0, width, height, red);\n// 青天面積為整面國旗的 1/4, 也是採用長方形塗色\ngdImageFilledRectangle(img, 0, 0, (int)(width / 2.0), (int)(height / 2.0), blue);\n// 先設法以填色畫出六個白色堆疊菱形\ndraw_white_sun(img, center_x, center_y, sun_radius, white);\n// 利用一個藍色大圓與白色小圓畫出藍色環狀\ngdImageFilledEllipse(img, center_x, center_y, blue_circle_dia, blue_circle_dia, blue);\ngdImageFilledEllipse(img, center_x, center_y, white_circle_dia, white_circle_dia, white);\n \n// 連接四個座標點\nconnectPoints(img, 429, 125, 279, 165, white);\nconnectPoints(img, 279, 165, 170, 274, white);\nconnectPoints(img, 170, 274, 319, 234, white);\nconnectPoints(img, 319, 234, 429, 125, white);\n}\n \nvoid draw_white_sun(gdImagePtr img, int center_x, int center_y, int sun_radius, int color) {\nfloat deg = M_PI / 180;\nfloat sr = sun_radius / tan(75 * deg);\nint ax, ay, bx, by, dx, dy, ex, ey;\n \nax = center_x;\nay = center_y - sun_radius;\n \nbx = center_x - sun_radius * tan(15 * deg);\nby = center_y;\n \nex = center_x;\ney = center_y + sun_radius;\n \ndx = center_x + sun_radius * tan(15 * deg);\ndy = center_y;\n \nfor (int i = 1; i <= 6; i++) {\nint ax1 = ax + sun_radius * sin(30 * deg * i);\nint ay1 = ay + sun_radius - sun_radius * cos(30 * deg * i);\n \nint bx1 = bx + sr - sr * cos(30 * deg * i);\nint by1 = by - sr * sin(30 * deg * i);\n \nint ex1 = ex - sun_radius * sin(30 * deg * i);\nint ey1 = ey - (sun_radius - sun_radius * cos(30 * deg * i));\n \nint dx1 = dx - (sr - sr * cos(30 * deg * i));\nint dy1 = dy + sr * sin(30 * deg * i);\n \n// 對菱形區域範圍塗色\ngdImageFilledPolygon(img, (gdPoint[4]){{ax1, ay1}, {bx1, by1}, {ex1, ey1}, {dx1, dy1}}, 4, color);\n \n// 在菱形區域外圍畫線，明確界定菱形範圍\ngdImageLine(img, ax1, ay1, bx1, by1, color);\ngdImageLine(img, bx1, by1, ex1, ey1, color);\ngdImageLine(img, ex1, ey1, dx1, dy1, color);\ngdImageLine(img, dx1, dy1, ax1, ay1, color);\n}\n}\n \nvoid connectPoints(gdImagePtr img, int x1, int y1, int x2, int y2, int color) {\ngdImageLine(img, x1, y1, x2, y2, color); \n \n 配合ChatGTP，在原式上新增 \n gdImageLine(img, ax1, ay1, bx1, by1, color);\ngdImageLine(img, bx1, by1, ex1, ey1, color);\ngdImageLine(img, ex1, ey1, dx1, dy1, color);\ngdImageLine(img, dx1, dy1, ax1, ay1, color);\n}\n} \n 這個還不是正確答案還需將 白色太陽塗色部分 跟 非第二組座標連成的線條 移除', 'tags': '', 'url': 'try Do.html'}, {'title': 'ANS 1', 'text': '\n 在 try Do 裡嘗試修改與詢問 chatGTB 後將程式太陽的部分根線條一併移除後，將第二組點位一一輸入後，得到此結果，下面是程式碼的部分。 \n #include <stdio.h>\n#include <gd.h>\n#include <math.h>\n  \nvoid draw_roc_flag(gdImagePtr img);\nvoid draw_white_sun(gdImagePtr img, int x, int y, int size, int color);\n  \n//void connectPoints(gdImagePtr img, int x1, int y1, int x2, int y2, int color);\n  \nint main() {\n// width 3: height 2\nint width = 1200;\n// 國旗長寬比為 3:2\nint height = (int)(width * 2.0 / 3.0);\n  \ngdImagePtr img = gdImageCreateTrueColor(width, height);\ngdImageAlphaBlending(img, 0);\n  \ndraw_roc_flag(img);\n  \nFILE *outputFile = fopen("Y:/tmp/c_ex/roc_flag_04_gd.png", "wb");\nif (outputFile == NULL) {\nfprintf(stderr, "Error opening the output file.\\n");\nreturn 1;\n}\ngdImagePngEx(img, outputFile, 9);\nfclose(outputFile);\ngdImageDestroy(img);\nreturn 0;\n}\n  \nvoid draw_roc_flag(gdImagePtr img) {\nint width = gdImageSX(img);\nint height = gdImageSY(img);\nint red, white, blue;\n// 白日位於青天面積正中央, 因此中心點座標為長寬各 1/4 處\nint center_x = (int)(width / 4);\nint center_y = (int)(height / 4);\n// gdImageFilledEllipse 需以長寬方向的 diameter 作圖\n// 由於中央白日圓形的半徑為青天寬度的 1/8\n// 因此中央白日圓形的直徑為青天寬度的 1/4, 也就是國旗寬度的 1/8\n// 而且白日十二道光芒的外圍圓形其半徑也是國旗寬度的1/8\nint sun_radius = (int)(width / 8);\n// 中央白日圓形的直徑等於十二道光芒外圍圓形的半徑\nint white_circle_dia = sun_radius;\n// 中央藍色圓形半徑為中央白日的 1又 2/15\nint blue_circle_dia = white_circle_dia + white_circle_dia * 2 / 15;\n// 根據 https://www.moi.gov.tw/cp.aspx?n=10621 訂定國旗三種顏色值\nred = gdImageColorAllocate(img, 255, 0, 0); // 紅色\nwhite = gdImageColorAllocate(img, 255, 255, 255); // 白色\nblue = gdImageColorAllocate(img, 0, 0, 149); // 藍色\n// 根據畫布大小塗上紅色長方形區域\ngdImageFilledRectangle(img, 0, 0, width, height, red);\n// 青天面積為整面國旗的 1/4, 也是採用長方形塗色\ngdImageFilledRectangle(img, 0, 0, (int)(width / 2.0), (int)(height / 2.0), blue);\n// 先設法以填色畫出六個白色堆疊菱形\n//draw_white_sun(img, center_x, center_y, sun_radius, white);\n// 利用一個藍色大圓與白色小圓畫出藍色環狀\n//gdImageFilledEllipse(img, center_x, center_y, blue_circle_dia, blue_circle_dia, blue);\n//gdImageFilledEllipse(img, center_x, center_y, white_circle_dia, white_circle_dia, white);\n\n  {int x1 = 429;\n   int y1 = 125;\n   int x2 = 279;\n   int y2 = 165;\n \n   // 畫一條線連接兩個點\n   gdImageLine(img, x1, y1, x2, y2, white);\n  }\n  {int x1 = 170;\n     int y1 = 274;\n     int x2 = 279;\n     int y2 = 165;\n \n     // 畫一條線連接兩個點\n     gdImageLine(img, x1, y1, x2, y2, white);\n  }\n  {\n    int x1 = 170;\n     int y1 = 274;\n     int x2 = 429;\n     int y2 = 125;\n \n     // 畫一條線連接兩個點\n     gdImageLine(img, x1, y1, x2, y2, white);\n  }\n}\n//void connectPoints(gdImagePtr img, int x1, int y1, int x2, int y2, int color) {\n//gdImageLine(img, x1, y1, x2, y2, color); \n (註:使用繪圖方法為在自己USB存的 tinyc 檔裡的 gd 線條畫圖畫的) \n', 'tags': '', 'url': 'ANS 1.html'}, {'title': 'ANS 2', 'text': '操作影片結果，請點 這裡 (沒聲音)，在原是基礎不動上新增定義和交線反饋。 \n \n #include <stdio.h>\n#include <gd.h>\n#include <math.h>\n\n// 定義座標結構\ntypedef struct {\n    double x;\n    double y;\n} Point;\n\n// Function prototypes\nvoid draw_roc_flag(gdImagePtr img);\nvoid draw_white_sun(gdImagePtr img, int x, int y, int size, int color);\nvoid connectPoints(gdImagePtr img, int x1, int y1, int x2, int y2, int color);\nPoint circleLineIntersection(double h, double k, double r, double x1, double y1, double x2, double y2);\n\n\nint main() {\n    // width 3: height 2\n    int width = 1200;\n    // 國旗長寬比為 3:2\n    int height = (int)(width*2.0 / 3.0);\n \n    gdImagePtr img = gdImageCreateTrueColor(width, height);\n    gdImageAlphaBlending(img, 0);\n \n    draw_roc_flag(img);\n \n    FILE *outputFile = fopen("Y:/tmp/c_ex/roc_flag_07_gd_2.png", "wb");\n    if (outputFile == NULL) {\n        fprintf(stderr, "Error opening the output file.\\n");\n        return 1;\n    }\n    gdImagePngEx(img, outputFile, 9);\n    fclose(outputFile);\n    gdImageDestroy(img);\n    return 0;\n}\nvoid connectPoints(gdImagePtr img, int x1, int y1, int x2, int y2, int color) {\n    gdImageLine(img, x1, y1, x2, y2, color);\n}\n\n// ... connectPoints 函式的實作 ...\n\n// 實作 draw_white_sun 函式\n\n// 修改 circleLineIntersection 函式\nPoint circleLineIntersection(double h, double k, double r, double x1, double y1, double x2, double y2) {\n    Point intersection;\n\n    // 直線斜率\n    double m = (y2 - y1) / (x2 - x1);\n\n    // 直線方程式中的常數項\n    double b = y1 - m * x1;\n\n    // 圓與直線交點的計算\n    double A = 1 + pow(m, 2);\n    double B = 2 * (m * b - m * k - h);\n    double C = pow(k, 2) - pow(r, 2) + pow(h, 2) - 2 * b * k + pow(b, 2);\n\n    // 判斷交點個數\n    double discriminant = pow(B, 2) - 4 * A * C;\n    if (discriminant > 0) {\n        intersection.x = (-B + sqrt(discriminant)) / (2 * A);\n        intersection.y = m * intersection.x + b;\n        printf("交點: (%.2f, %.2f)\\n", intersection.x, intersection.y);\n\n        intersection.x = (-B - sqrt(discriminant)) / (2 * A);\n        intersection.y = m * intersection.x + b;\n        printf("交點: (%.2f, %.2f)\\n", intersection.x, intersection.y);\n    } else if (discriminant == 0) {\n        intersection.x = -B / (2 * A);\n        intersection.y = m * intersection.x + b;\n        printf("交點: (%.2f, %.2f)\\n", intersection.x, intersection.y);\n    } else {\n        printf("No points.\\n");\n    }\n\n    return intersection;\n}\n\n// 完成 draw_roc_flag 函式\nvoid draw_roc_flag(gdImagePtr img) {\n    int width = gdImageSX(img);\n    int height = gdImageSY(img);\n    int red, white, blue;\n\n    // 白日位於青天面積正中央, 因此中心點座標為長寬各 1/4 處\n    int center_x = (int)(width / 4);\n    int center_y = (int)(height / 4);\n\n    // gdImageFilledEllipse 需以長寬方向的 diameter 作圖\n    // 由於中央白日圓形的半徑為青天寬度的 1/8\n    // 因此中央白日圓形的直徑為青天寬度的 1/4, 也就是國旗寬度的 1/8\n    // 而且白日十二道光芒的外圍圓形其半徑也是國旗寬度的1/8\n    int sun_radius = (int)(width / 8);\n    // 中央白日圓形的直徑等於十二道光芒外圍圓形的半徑\n    int white_circle_dia = sun_radius;\n    // 中央藍色圓形半徑為中央白日的 1又 2/15\n    int blue_circle_dia = white_circle_dia + white_circle_dia * 2 / 15;\n\n    // 根據 https://www.moi.gov.tw/cp.aspx?n=10621 訂定國旗三種顏色值\n    red = gdImageColorAllocate(img, 255, 0, 0);      // 紅色\n    white = gdImageColorAllocate(img, 255, 255, 255); // 白色\n    blue = gdImageColorAllocate(img, 0, 0, 149);      // 藍色\n\n    // 根據畫布大小塗上紅色長方形區域\n    gdImageFilledRectangle(img, 0, 0, width, height, red);\n    // 青天面積為整面國旗的 1/4, 也是採用長方形塗色\n    gdImageFilledRectangle(img, 0, 0, (int)(width / 2.0), (int)(height / 2.0), blue);\n\n    // 先設法以填色畫出六個白色堆疊菱形\n    connectPoints(img, 429, 125, 279, 165, white);\n    connectPoints(img, 170, 274, 279, 165, white);\n    connectPoints(img, 170, 274, 429, 125, white);\n\n    // 利用一個藍色大圓與白色小圓畫出藍色環狀\n    gdImageFilledEllipse(img, center_x, center_y, blue_circle_dia, blue_circle_dia, blue);\n    gdImageFilledEllipse(img, center_x, center_y, white_circle_dia, white_circle_dia, white);\n\n    // 計算圓與線的交點\n    double circle_x = (int)(width / 4);  // 圓心 x 座標\n    double circle_y = (int)(height / 4); // 圓心 y 座標\n    double radius = white_circle_dia + white_circle_dia * 2 / 15; // 圓半徑\n\n    // 兩點座標\n    double x3 = 170;\n    double y3 = 274;\n    double x4 = 279;\n    double y4 = 165;\n\n    Point intersection1 = circleLineIntersection(circle_x, circle_y, radius, x4, y4, x3, y3);\n\n    double x5 = 279;\n    double y5 = 165;\n    double x6 = 429;\n    double y6 = 125;\n\n    Point intersection2 = circleLineIntersection(circle_x, circle_y, radius, x6, y6, x5, y5);\n\n    // 使用交點座標，例如印出或繪製到圖片中\n    //printf("Intersection 1: (%.2f, %.2f)\\n", intersection1.x, intersection1.y);\n    //printf("Intersection 2: (%.2f, %.2f)\\n", intersection2.x, intersection2.y);\n    // ... 計算其他兩條直線的座標 ...\n} \n 在原程式上加入新的定義，以便能將程式交縣回饋回傳，在寫第二樣作業時，也反覆詢問chatGTB，慢慢解決定義問題，併新增了線條與圓交界時的反饋。 \n', 'tags': '', 'url': 'ANS 2.html'}, {'title': 'w13', 'text': '如何使用近端編輯網站 \n 在近端建立  OpenSSH  格式的  public key ,  putty  格式的  private  並且配合  putty session  讓使用者可以將倉儲  git clone  到近端維護。 \n 所會用到的 命令字元指令 (如果操作過程無任何錯誤) \n reedit  (開啟登陸編輯程式) \n cd  (進入資料夾位置) \n git clone --recurse-submodules  (克隆複製倉儲資料) \n cms  (啟動近端) \n 近端啟動後網站預設密碼為 admin ， 只有自己需要使用的話，無須更改密碼，因為近端網站只要自己不啟動它，別人也進不來，更不用說還不知道密碼的情況下。 (註:如要以指令停止近端 ctrl+c ) \n 檔案位置: tinyc裡的data ，需有 portablegit\xa0PuTTY\xa0Python311 三個檔案 ( python3114_git_putty.7z ) \n \n 注意 : 需在符合上圖條件下開啟 start_ipv6.bat ，因為在虛擬主機(Y)所做的檔案更改不會影響自己本身的USB磁碟機，如果三個檔案在開啟命令字元時不在data裡，而是在開啟後才放入或放在開啟後產生的Y槽裡的話，會在後續在檔案傳輸和指示字元讀取倉儲檔案上出現問題 \n', 'tags': '', 'url': 'w13.html'}, {'title': 'step 1', 'text': '使用 puttygen.exe 定位主機位置並獲得key(點擊Generate開始定位) \n 如圖:(鼠標需在其檔案頁面範圍內不斷移動直到 綠條 跑完) \n \n 將key(圖上藍色框選的亂碼)複製新增到自己倉儲帳號( 設定-SSH keys) ，同時也要點圖上的 Save private key \n 儲存到 tinyc-data-home (名稱學號) \n 貼至倉儲綁定的亂碼就是自己設的鎖，而鑰匙就是儲存至自己的USB中的 .ppk 檔 \n', 'tags': '', 'url': 'step 1.html'}, {'title': 'step 2', 'text': '使用 putty.exe 把要鑰匙與倉儲座連接 \n \n 至 SSH 裡的 Auth 裡的 Credentials， 將 .ppk 檔數入', 'tags': '', 'url': 'step 2.html'}, {'title': 'step 3', 'text': '在命令字元打上 reedit ，尋找到剛剛處存的key 整個目錄檔 後右鍵匯出至USB中 \n \n 字元指令至( cd )自己要克隆抓取後放置的位置 \n 輸入git clone --recurse-submodules\xa0 git@41223118:zhe41223118 /cp2023.git \n (上述粗體字前者為.ppk檔案名:後者為倉儲帳號) \n 將倉儲資料複製到USB，之後cd進cp2023(克隆下的資料檔名) \n 輸入 cms \xa0 就可開啟近端網站進行維護了 \n', 'tags': '', 'url': 'step 3.html'}, {'title': 'w12', 'text': '倉儲有限制檔案的上傳大小(上限為100MB) \n 但推送大檔案，會使之後的推送都需重複推送大檔 \n 進而使傳輸一直有負擔，或因檔案過大使之後的acp都受阻 \n 而延伸出的需刪除上傳或壓縮檔案的問題 \n 在資料合併上也會因上傳受阻時的錯誤操作而造成問題複雜化 \n \n 要解決檔案太大上傳問題，使用 onedrive (上限5TB) \n 將檔案透過連結下載的方式繞過倉儲的上傳限制 \n 例子: rrr \n \n', 'tags': '', 'url': 'w12.html'}, {'title': 'w11', 'text': 'w11_1a.7z (個人網路設定檔) \n 更改內容IPv6，將其更改為個人IP序號 \n 目的是能夠用可攜式檔，只要有網路都可以用管理者執行該檔直截獲取IPv6 \n \n 在登錄網站後，選擇 \xa0 IUpload \xa0 (建議是新增一個頁面打開) \n \n', 'tags': '', 'url': 'w11.html'}, {'title': 'w8', 'text': '遠端與倉儲帳號連接 \n \n chmod u+x acp \n mkdir public_html \n cd public_html \n git clone --recurse-submodules  https://github.com/zhe41223118/cp2023.git \n vi acp \n #! /bin/bash\ngit add .\ngit commit -m "$1"\ngit push\ncd ./../public_html/cp2023\ngit pull\n \n 必須根據 這裡 的說明設定目錄權限. \n ubuntu@www:~$ chmod 711 /home/ubuntu\nubuntu@www:~$ mkdir ~/public_html\nubuntu@www:~$ chmod 755 ~/public_html\nubuntu@www:~$ vi ~/public_html/index.html \n 帳號根目錄 (user directory) 必須設定 .gitconfig \n https://s1511.cycu.org:8022 \xa0 \n https://s1511.cycu.org/~cp41223118/cp2023 \xa0 \n \xa0 \n', 'tags': '', 'url': 'w8.html'}, {'title': 'w7', 'text': '', 'tags': '', 'url': 'w7.html'}, {'title': 'work', 'text': 'cd-檔案 \n cc 檔案名+ -lgd -lm \n ./a.out \n \n 需在replit.nix進行\xa0  備註:Files最底下 藍色雪花圖形\xa0 \n \n { pkgs }: {\n\xa0\xa0\xa0\xa0deps = [\n\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0pkgs.sudo\n\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0pkgs.clang_12\n\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0pkgs.ccls\n\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0pkgs.gdb\n\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0pkgs.gnumake\n\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0pkgs.gnuplot\n\xa0\xa0\xa0\xa0];\n} \n \n \n 需在replit.nix進行 \n { pkgs }: {\ndeps = [\npkgs.vimHugeX\npkgs.gd\npkgs.gnuplot\n];\n} \n \n 其中 pkgs.gd 是必要 \n \n \n \n', 'tags': '', 'url': 'work.html'}, {'title': 'program', 'text': '曲線圖 \n #include <stdio.h>\n\nint main() {\n// Open a file to write displacement and velocity data\nFILE *outputFile = fopen("motion_data.txt", "w");\nif (!outputFile) {\nfprintf(stderr, "Failed to create data file.\\n");\nreturn 1;\n}\n\n// Simulate motion for 10 seconds and calculate displacement and velocity, while writing data to the file\ndouble x = 0.2; // Initial displacement\ndouble v = 0.0; // Initial velocity\ndouble dt = 0.01; // Time step\ndouble t = 0.0; // Time\n\nwhile (t <= 10.0) {\ndouble acceleration = (-10.0 * x - 0.5 * v) / 1.0; // Modified system parameters here\nv += acceleration * dt;\nx += v * dt;\n\nfprintf(outputFile, "%lf %lf %lf\\n", t, x, v);\n\nt += dt;\n}\n\n// Close the data file\nfclose(outputFile);\n\n// Start a Gnuplot process using popen\nFILE *gnuplotPipe = popen("gnuplot -persistent", "w");\nif (!gnuplotPipe) {\nfprintf(stderr, "Failed to start Gnuplot.\\n");\nreturn 1;\n}\n\n// Use Gnuplot plotting commands, specify font and output as PNG\nfprintf(gnuplotPipe, "set terminal pngcairo enhanced font \'default,10\' size 800,400\\n");\nfprintf(gnuplotPipe, "set output \'motion_plot.png\'\\n");\nfprintf(gnuplotPipe, "set title \'Displacement and Velocity vs. Time\'\\n");\nfprintf(gnuplotPipe, "set xlabel \'Time (s)\'\\n");\nfprintf(gnuplotPipe, "set ylabel \'Displacement (m)\'\\n");\nfprintf(gnuplotPipe, "plot \'motion_data.txt\' using 1:2 with lines lw 2 title \'Displacement\', \\\n\'motion_data.txt\' using 1:3 with lines lw 2 title \'Velocity\'\\n");\n\n// Close the Gnuplot process\nfprintf(gnuplotPipe, "exit\\n");\npclose(gnuplotPipe);\n\nreturn 0;\n} \n \n 台灣國旗 \n // 內政部國旗參考資料: https://www.moi.gov.tw/cp.aspx?n=10621\n// 幾何形狀著色與繪圖練習\n#include <stdio.h>\n#include <gd.h>\n#include <math.h>\n\nvoid draw_roc_flag(gdImagePtr img);\nvoid draw_white_sun(gdImagePtr img, int x, int y, int size, int color);\n\nint main() {\n// width 3: height 2\nint width = 1200;\n// 國旗長寬比為 3:2\nint height = (int)(width*2.0 / 3.0);\n\ngdImagePtr img = gdImageCreateTrueColor(width, height);\ngdImageAlphaBlending(img, 0);\n\ndraw_roc_flag(img);\n\nFILE *outputFile = fopen("./../images/roc_flag_in_gd.png", "wb");\nif (outputFile == NULL) {\nfprintf(stderr, "Error opening the output file.\\n");\nreturn 1;\n}\ngdImagePngEx(img, outputFile, 9);\nfclose(outputFile);\ngdImageDestroy(img);\nreturn 0;\n}\n\nvoid draw_roc_flag(gdImagePtr img) {\nint width = gdImageSX(img);\nint height = gdImageSY(img);\nint red, white, blue;\n// 白日位於青天面積正中央, 因此中心點座標為長寬各 1/4 處\nint center_x = (int)(width/4);\nint center_y = (int)(height/4);\n// gdImageFilledEllipse 需以長寬方向的 diameter 作圖\n// 由於中央白日圓形的半徑為青天寬度的 1/8\n// 因此中央白日圓形的直徑為青天寬度的 1/4, 也就是國旗寬度的 1/8\n// 而且白日十二道光芒的外圍圓形其半徑也是國旗寬度的1/8\nint sun_radius = (int)(width/8);\n// 中央白日圓形的直徑等於十二道光芒外圍圓形的半徑\nint white_circle_dia = sun_radius;\n// 中央藍色圓形半徑為中央白日的 1又 2/15\nint blue_circle_dia = white_circle_dia + white_circle_dia*2/15;\n// 根據 https://www.moi.gov.tw/cp.aspx?n=10621 訂定國旗三種顏色值\nred = gdImageColorAllocate(img, 255, 0, 0); // 紅色\nwhite = gdImageColorAllocate(img, 255, 255, 255); // 白色\nblue = gdImageColorAllocate(img, 0, 0, 149); // 藍色\n// 根據畫布大小塗上紅色長方形區域\ngdImageFilledRectangle(img, 0, 0, width, height, red);\n// 青天面積為整面國旗的 1/4, 也是採用長方形塗色\ngdImageFilledRectangle(img, 0, 0, (int)(width/2.0), (int)(height/2.0), blue);\n// 先設法以填色畫出六個白色堆疊菱形\ndraw_white_sun(img, center_x, center_y, sun_radius, white);\n// 利用一個藍色大圓與白色小圓畫出藍色環狀\ngdImageFilledEllipse(img, center_x, center_y, blue_circle_dia, blue_circle_dia, blue);\ngdImageFilledEllipse(img, center_x, center_y, white_circle_dia, white_circle_dia, white);\n\n}\n\nvoid draw_white_sun(gdImagePtr img, int center_x, int center_y, int sun_radius, int color) {\n// M_PI 大小定義於 math.h 標頭檔中, 因為三角函數中採用徑度為角度單位\n// 因此定義將角度轉為徑度的轉換變數為 deg, 角度值乘上 deg 就可轉為徑度\nfloat deg = M_PI/180;\n// 根據十二道光芒的每一尖角的角度為 15 度, 求出其對應直角三角形的另一角度為 75 度\n// 求出十二道光芒中任一菱形的 small radius, 也就是菱形的另一個對應小圓的半徑大小\nfloat sr = sun_radius/tan(75*deg);\nint ax, ay, bx, by, dx, dy, ex, ey;\ngdPoint points[4];\n/* 在塗上十二道光芒中的單一菱形區域之前, 先以座標點畫線測試是否正確\nax = center_x;\nay = center_y - sun_radius;\nbx = center_x - sun_radius*tan(15*deg);\nby = center_y;\nex = center_x;\ney = center_y + sun_radius;\ndx = center_x + sun_radius*tan(15*deg);\ndy = center_y;\n// AB\ngdImageLine(img, ax, ay, bx, by, color);\n// BE\ngdImageLine(img, bx, by, ex, ey, color);\n// ED\ngdImageLine(img, ex, ey, dx, dy, color);\n// DA\ngdImageLine(img, dx, dy, ax, ay, color);\n*/\nax = center_x;\nay = center_y - sun_radius;\nbx = center_x - sun_radius*tan(15*deg);\nby = center_y;\nex = center_x;\ney = center_y + sun_radius;\ndx = center_x + sun_radius*tan(15*deg);\ndy = center_y;\n// 確定單一菱形區域的塗色正確後, 利用迴圈每次轉動 30 度, 總共轉六次即可塗上十二道光芒區域\nfor (int i=1;i<=6;i++){\n// A\npoints[0].x = ax+sun_radius*sin(30*deg*i);\npoints[0].y = ay+sun_radius-sun_radius*cos(30*deg*i);\n// B\npoints[1].x = bx+sr-sr*cos(30*deg*i);\npoints[1].y = by-sr*sin(30*deg*i);\n// E\npoints[2].x = ex-sun_radius*sin(30*deg*i);\npoints[2].y = ey-(sun_radius-sun_radius*cos(30*deg*i));\n// D\npoints[3].x = dx-(sr-sr*cos(30*deg*i));\npoints[3].y = dy+sr*sin(30*deg*i);\n// 對菱形區域範圍塗色\ngdImageFilledPolygon(img, points, 4, color);\n// 在菱形區域外圍畫線, 明確界定菱形範圍\ngdImagePolygon(img, points, 4, color);\n}\n} \n \n 美國國旗 \n #include <stdio.h>\n#include <gd.h>\n#include <math.h>\n\nvoid draw_usa_flag(gdImagePtr img);\nvoid draw_star(gdImagePtr img, int x, int y, int size, int color);\n\nint main() {\nint width = 800;\nint height = (int)(width / 1.9);\n\ngdImagePtr img = gdImageCreateTrueColor(width, height);\ngdImageAlphaBlending(img, 0);\n\ndraw_usa_flag(img);\n\nFILE *outputFile = fopen("./../images/usa_flag.png", "wb");\nif (outputFile == NULL) {\nfprintf(stderr, "Error opening the output file.\\n");\nreturn 1;\n}\n\ngdImagePngEx(img, outputFile, 9);\nfclose(outputFile);\ngdImageDestroy(img);\n\nreturn 0;\n}\n\nvoid draw_usa_flag(gdImagePtr img) {\nint width = gdImageSX(img);\nint height = gdImageSY(img);\nint red, white, blue;\n// Colors for the flag\nred = gdImageColorAllocate(img, 178, 34, 52); // Red stripes\nwhite = gdImageColorAllocate(img, 255, 255, 255); // White stripes\nblue = gdImageColorAllocate(img, 60, 59, 110); // Blue field\n\nint stripe_height = height / 13;\nint stripe_width = width;\nint star_size = (int)(0.0308 * height); // Corrected star size (half the original size)\n\nfor (int y = 0; y < height; y += stripe_height) {\nif (y / stripe_height % 2 == 0) {\ngdImageFilledRectangle(img, 0, y, stripe_width, y + stripe_height, red);\n} else {\ngdImageFilledRectangle(img, 0, y, stripe_width, y + stripe_height, white);\n}\n}\n\ngdImageFilledRectangle(img, 0, 0, width * 2 / 5, stripe_height * 7, blue);\n\nint star_spacing_x = (int)(0.126 * height); // Horizontal spacing between stars\nint star_spacing_y = (int)(0.054 * height); // Vertical spacing between stars\nint star_start_x = (int)(0.122 * height); // Starting X position for stars\nint star_start_y = (int)(0.0485 * height); // Starting Y position for stars\n\nfor (int row = 0; row < 9; row++) {\nint starsPerRow = (row % 2 == 0) ? 6 : 5;\nint space_x = (row % 2 == 0) ? star_spacing_x / -2 : 0;\nfor (int star = 0; star < starsPerRow; star++) {\nint x = star_start_x + star * star_spacing_x+space_x;\nint y = star_start_y + row * star_spacing_y;\ndraw_star(img, x, y, star_size, white);\n}\n}\n}\n\nvoid draw_star(gdImagePtr img, int x, int y, int size, int color) {\ngdPoint points[10];\n\nfor (int i = 0; i < 10; i++) {\ndouble angle = M_PI / 2 + i * 2 * M_PI / 10+M_PI;\nint radius = (i % 2 == 0) ? size : size / 2;\npoints[i].x = x + radius * cos(angle);\npoints[i].y = y + radius * sin(angle);\n}\n\n// Fill the star with white color\ngdImageFilledPolygon(img, points, 10, color);\n} \n 日本國旗 \n #include <stdio.h>\n#include <gd.h>\n#include <math.h>\n\nvoid draw_japan_flag(gdImagePtr img);\nvoid draw_white_sun(gdImagePtr img, int center_x, int center_y, int sun_radius, int white, int red );\n\nint main() {\n    // width 3: height 2\n    int width = 1200;\n    int height = 2 * width / 3;\n\n    gdImagePtr img = gdImageCreateTrueColor(width, height);\n    gdImageAlphaBlending(img, 0);\n\n    draw_japan_flag(img);\n\n    FILE *outputFile = fopen("./../images/japan_flag.png", "wb");\n    if (outputFile == NULL) {\n        fprintf(stderr, "Error opening the output file.\\n");\n        return 1;\n    }\n    gdImagePngEx(img, outputFile, 9);\n    fclose(outputFile);\n    gdImageDestroy(img);\n    return 0;\n}\n\nvoid draw_japan_flag(gdImagePtr img) {\n    int width = gdImageSX(img);\n    int height = gdImageSY(img);\n    int red, white ;\n    int center_x =  0.5 * width;\n    int center_y =  0.5 * height;\n    int sun_radius = 145 ;\n\n    // Colors for the flag\n    red = gdImageColorAllocate(img, 242, 0, 0); // Red color\n    white = gdImageColorAllocate(img, 255, 255, 255); // White stripes\n\n\n    // 繪製白色矩形區域\n    gdImageFilledRectangle(img, 0, 0, width, height, white);\n\n\n    // 繪製太陽內部\n    gdImageFilledEllipse(img, center_x, center_y, sun_radius * 3, sun_radius * 3, red);\n} \n 中國國旗 \n #include <stdio.h>\n#include <gd.h>\n#include <math.h>\n\nvoid draw_chinese_flag(gdImagePtr img);\n\nint main() {\n    int width = 300; // 國旗寬度\n    int height = 200; // 國旗高度\n\n    gdImagePtr im = gdImageCreateTrueColor(width, height);\n    gdImageAlphaBlending(im, 0);\n\n    draw_chinese_flag(im);\n\n    FILE *outputFile = fopen("./../images/proc_flag.png", "wb");\n    if (outputFile == NULL) {\n        fprintf(stderr, "打開输出文件時出錯。\\n");\n        return 1;\n    }\n\n    gdImagePngEx(im, outputFile, 9);\n    fclose(outputFile);\n    gdImageDestroy(im);\n\n    return 0;\n}\n\n// 聲明 draw_star 函數\nvoid draw_star(gdImagePtr img, int x, int y, int size, int color, double rotation_angle);\n\nvoid draw_chinese_flag(gdImagePtr img) {\n    int width = gdImageSX(img);\n    int height = gdImageSY(img);\n    int red, yellow;\n\n    // 國旗顏色\n    red = gdImageColorAllocate(img, 255, 0, 0); // 紅色背景\n    yellow = gdImageColorAllocate(img, 255, 255, 0); // 黃色星星\n\n    // 畫紅色背景\n    gdImageFilledRectangle(img, 0, 0, width, height, red);\n\n    // 設置星星的大小和位置\n    int star_size = (int)(0.28 * height);\n    int star_x = (int)(0.165 * width);\n    int star_y = (int)(0.265 * height);\n\n    // 畫大星星\n    draw_star(img, star_x, star_y, star_size, yellow, 11.0);\n\n    // 繪製小星星，位置根據實際國旗比例計算\n    double radius = 0.15 * height;\n    double angle = 360 / 7 * M_PI / 179.0;\n    double rotation = -M_PI / 7.5;\n    int cx = (int)(0.32 * width);\n    int cy = (int)(0.27 * height);\n\n    for (int i = -1; i < 3; i++) {\n        int x = (int)(cx + radius * cos(i * angle + rotation));\n        int y = (int)(cy + radius * sin(i * angle + rotation));\n        draw_star(img, x, y, 19, yellow, M_PI / 5.0);\n    }\n}\n\nvoid draw_star(gdImagePtr img, int x, int y, int size, int color, double rotation_angle) {\n    gdPoint points[10];\n\n    // 計算星形的五個外點和五個内點\n    double outer_radius = size / 2;\n    double inner_radius = size / 6;\n    double angle = M_PI / 5.0;\n\n    for (int i = 0; i < 10; i++) {\n        double radius = (i % 2 == 0) ? outer_radius : inner_radius;\n        double theta = rotation_angle + i * angle;\n        points[i].x = x + radius * cos(theta);\n        points[i].y = y + radius * sin(theta);\n    }\n\n    // 使用 gdImageFilledPolygon 繪製星形\n    gdImageFilledPolygon(img, points, 10, color);\n} \n 英國國旗 \n #include <stdio.h>\n#include <gd.h>\n#include <math.h>\n\nvoid draw_uk_flag(gdImagePtr img);\nvoid fillTriangle(gdImagePtr img, int x1, int y1, int x2, int y2, int x3, int y3, int color);\n\nint main() {\n    // 設置國旗的寬和高\n    int width = 1200;\n    int height = width / 2;\n\n    // 創建圖像\n    gdImagePtr img = gdImageCreateTrueColor(width, height);\n    gdImageAlphaBlending(img, 0);\n\n    // 繪製英國國旗\n    draw_uk_flag(img);\n\n    // 將圖像保存到文件\n    FILE *outputFile = fopen("./../images/uk_flag.png", "wb");\n    if (outputFile == NULL) {\n        fprintf(stderr, "打開输出文件時發生錯誤。\\n");\n        return 1;\n    }\n    gdImagePngEx(img, outputFile, 9);\n    fclose(outputFile);\n    gdImageDestroy(img);\n    return 0;\n}\n\n\n\nvoid draw_uk_flag(gdImagePtr img) {\n    int width = gdImageSX(img);\n    int height = gdImageSY(img);\n\n    int red, white, blue;\n    red = gdImageColorAllocate(img, 204, 0, 0);       // 红色\n    white = gdImageColorAllocate(img, 255, 255, 255); // 白色\n    blue = gdImageColorAllocate(img, 0, 0, 153);      // 藍色\n\n    gdImageFilledRectangle(img, 0, 0, width, height, blue);\n\n\n  int x1, y1, x2, y2, x3, y3;\n  {\n    int line_thickness = 100;\n    gdImageSetThickness(img, line_thickness);\n\n    int x1, y1, x2, y2, x3, y3;\n\n    // 繪製白色斜線\n    x1 = 0;\n    y1 = 600;\n    x2 = 1200;\n    y2 = 0;\n    gdImageLine(img, x1, y1, x2, y2, white);\n\n    x1 = 0;\n    y1 = 0;\n    x2 = 1200;\n    y2 = 600;\n    gdImageLine(img, x1, y1, x2, y2, white);\n}\n  {\n    int line_thickness = 33;\n    gdImageSetThickness(img, line_thickness);\n\n\n    // 繪製红色斜線\n    x1 = 566;\n    y1 = 300;\n    x2 = 1166;\n    y2 = 0;\n    gdImageLine(img, x1, y1, x2, y2, red);\n\n    x1 = 1233;\n    y1 = 600;\n    x2 = 633;\n    y2 = 300;\n    gdImageLine(img, x1, y1, x2, y2, red);\n\n    x1 = 566;\n    y1 = 300;\n    x2 = -33;\n    y2 = 0;\n    gdImageLine(img, x1, y1, x2, y2, red);\n\n    x1 = 600;\n    y1 = 316.5;\n    x2 = 0;\n    y2 = 616.5;\n    gdImageLine(img, x1, y1, x2, y2, red);\n  }\n  {\n  int line_thickness = 33;\n  gdImageSetThickness(img, line_thickness);\n\n  int x1, y1, x2, y2, x3, y3;\n\n  // 繪製  斜線\n  x1 = 0;\n  y1 = 600;\n  x2 = 1200;\n  y2 = 0;\n  gdImageLine(img, x1, y1, x2, y2, red );\n\n\n  x1 = 1200;\n    y1 = 16.5;\n    x2 = 600;\n    y2 = 316.5;\n    gdImageLine(img, x1, y1, x2, y2, white);\n\n\n  x1 = 0;\n    y1 = 583.5;\n    x2 = 600;\n    y2 = 283.5;\n    gdImageLine(img, x1, y1, x2, y2, white);\n\n\n  }\n\n    // 繪製白色十字\n    int cross_width = width / 32;\n    int cross_arm_width = width / 32;\n    int center_x = width / 2;\n    int center_y = height / 2;\n\n    gdImageFilledRectangle(img, center_x + 2.7 * cross_width, 0, center_x - 2.7 * cross_width, height, white);\n    gdImageFilledRectangle(img, 0, center_y + 2.7 * cross_arm_width, width, center_y - 2.7 * cross_arm_width, white);\n\n    // 繪製红色十字\n    gdImageFilledRectangle(img, center_x + 1.5 * cross_width, 0, center_x - 1.5 * cross_width, height, red);\n    gdImageFilledRectangle(img, 0, center_y + 1.5 * cross_arm_width, width, center_y - 1.5 * cross_arm_width, red);\n} \n', 'tags': '', 'url': 'program.html'}, {'title': 'file', 'text': '檔案總攬 \n \n tinyc.7z \xa0( Tiny C Compiler 編譯 C 程式, 包含 gd 與 gnuplot) \n \n w11_1a.7z \xa0( 網路設定檔案) \n \n python3114_git_putty.7z \xa0(將近端 cmsimde 啟動並改版後推向 Github 所需的檔案) \n \n \n \n', 'tags': '', 'url': 'file.html'}, {'title': 'Brython', 'text': '\n https://en.wikipedia.org/wiki/Python_(programming_language) \n Examples: \n https://gist.github.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d \n https://www.geeksforgeeks.org/python-programming-examples/ \n https://www.programiz.com/python-programming/examples \n https://www.freecodecamp.org/news/python-code-examples-sample-script-coding-tutorial-for-beginners/ \n Python Tutorial: \n https://docs.python.org/3/tutorial/ \n An informal introduction to Python \n Indentation (Python 採 4 個 Spaces 縮排, 以界定執行範圍) \n Variables ( Python Keywords ) \n Comments (# 單行註解, 三個單引號或三個雙引號標註多行註解) \n Numbers  (整數 int(), 浮點數 float()) \n Strings  (字串) \n print (Python 內建函式,  print()  函式) \n Python control flow tools \n for \n if \n range \n open \n read \n lists \n tuples \n dictionaries \n functions \n try ... except \n break \n pass \n classes \n 這個頁面 demo 如何在同一頁面下納入多個線上 Ace 編輯器與執行按鈕 ( practice_html.txt  動態頁面超文件). \n practice_html.txt  動態頁面超文件應該可以在啟動 Brython 時, 設定將 .py 檔案放入 downloads/py 目錄中引用. \n 亦即將所有對應的 html 也使用 Brython 產生, 然後寫為  class  後, 在範例導入時透過  instance  引用. \n <!-- 啟動 Brython -->\n<script>\nwindow.onload=function(){\nbrython({debug:1, pythonpath:[\'./../cmsimde/static/\',\'./../downloads/py/\']});\n}\n</script> \n 從 1 累加到 100: \n 1 add to 100 \n 將 iterable 與 iterator  相關說明 , 利用 Brython 與 Ace Editor 整理在這個頁面. \n  導入 brython 程式庫  \n \n \n \n \n  啟動 Brython  \n \n \n \n  導入 FileSaver 與 filereader  \n \n \n \n \n  導入 ace  \n \n \n \n \n \n \n  導入 gearUtils-0.9.js Cango 齒輪繪圖程式庫  \n \n \n \n \n \n \n  請注意, 這裡使用 Javascript 將 localStorage["kw_py_src1"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱 \n \n \n \n \n \n \n  add 1 to 100 開始  \n \n \n  add 1 to 100 結束 \n  editor1 開始  \n  用來顯示程式碼的 editor 區域  \n \n  以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合  \n  存擋表單開始  \n Filename:  .py   \n  存擋表單結束  \n \n  執行與清除按鈕開始  \n Run   Output   清除輸出區 清除繪圖區 Reload \n  執行與清除按鈕結束  \n \n  程式執行 ouput 區  \n \n  Brython 程式執行的結果, 都以 brython_div1 作為切入位置  \n \n  editor1 結束   ##########################################  \n 從 1 累加到 100 part2: \n 1 add to 100 cango_three_gears BSnake AI Tetris Rotating Block \n  請注意, 這裡使用 Javascript 將 localStorage["kw_py_src2"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱 \n \n \n \n  add 1 to 100 part2 開始  \n \n \n  add 1 to 100 part2 結束 \n  editor2 開始  \n  用來顯示程式碼的 editor 區域  \n \n  以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合  \n  存擋表單開始  \n Filename:  .py   \n  存擋表單結束  \n \n  執行與清除按鈕開始  \n Run   Output   清除輸出區 清除繪圖區 Reload \n  執行與清除按鈕結束  \n \n  程式執行 ouput 區  \n \n  Brython 程式執行的結果, 都以 brython_div1 作為切入位置  \n \n  editor2 結束  \n \n \n', 'tags': '', 'url': 'Brython.html'}]};