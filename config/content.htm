<h1>About</h1>
<p><a href="https://github.com/mdecycu/cmsite"> https://github.com/mdecycu/cmsite</a></p>
<p></p><h1>w8</h1>
<p>chmod u+x acp</p>
<p>mkdir public_html</p>
<p>cd public_html</p>
<p>git clone --recurse-submodules <a href="https://github.com/zhe41223118/cp2023.git">https://github.com/zhe41223118/cp2023.git</a></p>
<p>vi acp</p>
<pre class="brush:js;auto-links:false;toolbar:false" contenteditable="false">#! /bin/bash
git add .
git commit -m "$1"
git push
cd ./../public_html/cp2023
git pull
</pre>
<p>必須根據<a href="https://www.server-world.info/en/note?os=Ubuntu_20.04&amp;p=nginx&amp;f=4">這裡</a>的說明設定目錄權限.</p>
<pre class="brush:js;auto-links:false;toolbar:false" contenteditable="false">ubuntu@www:~$ chmod 711 /home/ubuntu
ubuntu@www:~$ mkdir ~/public_html
ubuntu@www:~$ chmod 755 ~/public_html
ubuntu@www:~$ vi ~/public_html/index.html</pre>
<p>帳號根目錄 (user directory) 必須設定 .gitconfig</p>
<p><a>https://s1511.cycu.org:8022</a> </p>
<p><a href="https://s1511.cycu.org/~cp41223118/cp2023">https://s1511.cycu.org/~cp41223118/cp2023</a> </p>
<p> </p><h1>work</h1>
<p><span>需在replit.nix進行  <span style="color: #ff0000;">備註:Files最底下 藍色雪花圖形 </span></span></p>
<div class="line number1 index0 alt2"><code class="js plain">{ pkgs }: {</code></div>
<div class="line number2 index1 alt1"><code class="js spaces">    </code><code class="js plain">deps = [</code></div>
<div class="line number3 index2 alt2"><code class="js spaces">        </code><code class="js plain">pkgs.sudo</code></div>
<div class="line number4 index3 alt1"><code class="js spaces">        </code><code class="js plain">pkgs.clang_12</code></div>
<div class="line number5 index4 alt2"><code class="js spaces">        </code><code class="js plain">pkgs.ccls</code></div>
<div class="line number6 index5 alt1"><code class="js spaces">        </code><code class="js plain">pkgs.gdb</code></div>
<div class="line number7 index6 alt2"><code class="js spaces">        </code><code class="js plain">pkgs.gnumake</code></div>
<div class="line number8 index7 alt1"><code class="js spaces">        </code><span style="color: #ff0000;"><code class="js plain">pkgs.gnuplot</code></span></div>
<div class="line number9 index8 alt2"><code class="js spaces">    </code><code class="js plain">];</code></div>
<div class="line number10 index9 alt1"><code class="js plain">}</code></div>
<p><img alt="" height="400" src="/images/gnuplot_ex1.png" width="800"/></p>
<p>需在replit.nix進行</p>
<p>{ pkgs }: {<br/> deps = [<br/> pkgs.vimHugeX<br/> <span style="color: #ff0000;">pkgs.gd</span><br/> pkgs.gnuplot<br/> ];<br/>}</p>
<p>其中<span style="color: #ff0000;">pkgs.gd<span style="color: #000000;">是必要</span></span></p>
<p><img alt="" height="800" src="/images/roc_flag_in_gd.png" width="1200"/></p>
<p><img alt="" height="421" src="/images/usa_flag.png" width="800"/></p><h1>program</h1>
<p><em><strong><span style="color: #ff0000;">曲線圖</span></strong></em></p>
<p><span style="color: #000000;"><strong>#include &lt;stdio.h&gt;<br/> <br/>int main() {<br/> // Open a file to write displacement and velocity data<br/> FILE *outputFile = fopen("motion_data.txt", "w");<br/> if (!outputFile) {<br/> fprintf(stderr, "Failed to create data file.\n");<br/> return 1;<br/> }<br/> <br/> // Simulate motion for 10 seconds and calculate displacement and velocity, while writing data to the file<br/> double x = 0.2; // Initial displacement<br/> double v = 0.0; // Initial velocity<br/> double dt = 0.01; // Time step<br/> double t = 0.0; // Time<br/> <br/> while (t &lt;= 10.0) {<br/> double acceleration = (-10.0 * x - 0.5 * v) / 1.0; // Modified system parameters here<br/> v += acceleration * dt;<br/> x += v * dt;<br/> <br/> fprintf(outputFile, "%lf %lf %lf\n", t, x, v);<br/> <br/> t += dt;<br/> }<br/> <br/> // Close the data file<br/> fclose(outputFile);<br/> <br/> // Start a Gnuplot process using popen<br/> FILE *gnuplotPipe = popen("gnuplot -persistent", "w");<br/> if (!gnuplotPipe) {<br/> fprintf(stderr, "Failed to start Gnuplot.\n");<br/> return 1;<br/> }<br/> <br/> // Use Gnuplot plotting commands, specify font and output as PNG<br/> fprintf(gnuplotPipe, "set terminal pngcairo enhanced font 'default,10' size 800,400\n");<br/> fprintf(gnuplotPipe, "set output 'motion_plot.png'\n");<br/> fprintf(gnuplotPipe, "set title 'Displacement and Velocity vs. Time'\n");<br/> fprintf(gnuplotPipe, "set xlabel 'Time (s)'\n");<br/> fprintf(gnuplotPipe, "set ylabel 'Displacement (m)'\n");<br/> fprintf(gnuplotPipe, "plot 'motion_data.txt' using 1:2 with lines lw 2 title 'Displacement', \<br/> 'motion_data.txt' using 1:3 with lines lw 2 title 'Velocity'\n");<br/> <br/> // Close the Gnuplot process<br/> fprintf(gnuplotPipe, "exit\n");<br/> pclose(gnuplotPipe);<br/> <br/> return 0;<br/>}</strong></span></p>
<p><span style="color: #ff0000;"><strong><em>台灣國旗</em></strong></span></p>
<p><br/><strong>// 內政部國旗參考資料: https://www.moi.gov.tw/cp.aspx?n=10621</strong><br/><strong>// 幾何形狀著色與繪圖練習</strong><br/><strong>#include &lt;stdio.h&gt;</strong><br/><strong>#include &lt;gd.h&gt;</strong><br/><strong>#include &lt;math.h&gt;</strong></p>
<p><strong>void draw_roc_flag(gdImagePtr img);</strong><br/><strong>void draw_white_sun(gdImagePtr img, int x, int y, int size, int color);</strong></p>
<p><strong>int main() {</strong><br/><strong> // width 3: height 2</strong><br/><strong> int width = 1200;</strong><br/><strong> // 國旗長寬比為 3:2</strong><br/><strong> int height = (int)(width*2.0 / 3.0);</strong></p>
<p><strong>gdImagePtr img = gdImageCreateTrueColor(width, height);</strong><br/><strong> gdImageAlphaBlending(img, 0);</strong></p>
<p><strong>draw_roc_flag(img);</strong></p>
<p><strong>FILE *outputFile = fopen("./../images/roc_flag_in_gd.png", "wb");</strong><br/><strong> if (outputFile == NULL) {</strong><br/><strong> fprintf(stderr, "Error opening the output file.\n");</strong><br/><strong> return 1;</strong><br/><strong> }</strong><br/><strong> gdImagePngEx(img, outputFile, 9);</strong><br/><strong> fclose(outputFile);</strong><br/><strong> gdImageDestroy(img);</strong><br/><strong> return 0;</strong><br/><strong>}</strong></p>
<p><strong>void draw_roc_flag(gdImagePtr img) {</strong><br/><strong> int width = gdImageSX(img);</strong><br/><strong> int height = gdImageSY(img);</strong><br/><strong> int red, white, blue;</strong><br/><strong> // 白日位於青天面積正中央, 因此中心點座標為長寬各 1/4 處</strong><br/><strong> int center_x = (int)(width/4);</strong><br/><strong> int center_y = (int)(height/4);</strong><br/><strong> // gdImageFilledEllipse 需以長寬方向的 diameter 作圖</strong><br/><strong> // 由於中央白日圓形的半徑為青天寬度的 1/8</strong><br/><strong> // 因此中央白日圓形的直徑為青天寬度的 1/4, 也就是國旗寬度的 1/8</strong><br/><strong> // 而且白日十二道光芒的外圍圓形其半徑也是國旗寬度的1/8</strong><br/><strong> int sun_radius = (int)(width/8);</strong><br/><strong> // 中央白日圓形的直徑等於十二道光芒外圍圓形的半徑</strong><br/><strong> int white_circle_dia = sun_radius;</strong><br/><strong> // 中央藍色圓形半徑為中央白日的 1又 2/15</strong><br/><strong> int blue_circle_dia = white_circle_dia + white_circle_dia*2/15;</strong><br/><strong> // 根據 https://www.moi.gov.tw/cp.aspx?n=10621 訂定國旗三種顏色值</strong><br/><strong> red = gdImageColorAllocate(img, 255, 0, 0); // 紅色</strong><br/><strong> white = gdImageColorAllocate(img, 255, 255, 255); // 白色</strong><br/><strong> blue = gdImageColorAllocate(img, 0, 0, 149); // 藍色</strong><br/><strong> // 根據畫布大小塗上紅色長方形區域</strong><br/><strong> gdImageFilledRectangle(img, 0, 0, width, height, red);</strong><br/><strong> // 青天面積為整面國旗的 1/4, 也是採用長方形塗色</strong><br/><strong> gdImageFilledRectangle(img, 0, 0, (int)(width/2.0), (int)(height/2.0), blue);</strong><br/><strong> // 先設法以填色畫出六個白色堆疊菱形</strong><br/><strong> draw_white_sun(img, center_x, center_y, sun_radius, white);</strong><br/><strong> // 利用一個藍色大圓與白色小圓畫出藍色環狀</strong><br/><strong> gdImageFilledEllipse(img, center_x, center_y, blue_circle_dia, blue_circle_dia, blue);</strong><br/><strong> gdImageFilledEllipse(img, center_x, center_y, white_circle_dia, white_circle_dia, white);</strong></p>
<p><strong>}</strong></p>
<p><strong>void draw_white_sun(gdImagePtr img, int center_x, int center_y, int sun_radius, int color) {</strong><br/><strong> // M_PI 大小定義於 math.h 標頭檔中, 因為三角函數中採用徑度為角度單位</strong><br/><strong> // 因此定義將角度轉為徑度的轉換變數為 deg, 角度值乘上 deg 就可轉為徑度</strong><br/><strong> float deg = M_PI/180;</strong><br/><strong> // 根據十二道光芒的每一尖角的角度為 15 度, 求出其對應直角三角形的另一角度為 75 度</strong><br/><strong> // 求出十二道光芒中任一菱形的 small radius, 也就是菱形的另一個對應小圓的半徑大小</strong><br/><strong> float sr = sun_radius/tan(75*deg);</strong><br/><strong> int ax, ay, bx, by, dx, dy, ex, ey;</strong><br/><strong> gdPoint points[4];</strong><br/><strong> /* 在塗上十二道光芒中的單一菱形區域之前, 先以座標點畫線測試是否正確</strong><br/><strong> ax = center_x;</strong><br/><strong> ay = center_y - sun_radius;</strong><br/><strong> bx = center_x - sun_radius*tan(15*deg);</strong><br/><strong> by = center_y;</strong><br/><strong> ex = center_x;</strong><br/><strong> ey = center_y + sun_radius;</strong><br/><strong> dx = center_x + sun_radius*tan(15*deg);</strong><br/><strong> dy = center_y;</strong><br/><strong> // AB</strong><br/><strong> gdImageLine(img, ax, ay, bx, by, color);</strong><br/><strong> // BE</strong><br/><strong> gdImageLine(img, bx, by, ex, ey, color);</strong><br/><strong> // ED</strong><br/><strong> gdImageLine(img, ex, ey, dx, dy, color);</strong><br/><strong> // DA</strong><br/><strong> gdImageLine(img, dx, dy, ax, ay, color);</strong><br/><strong> */</strong><br/><strong> ax = center_x;</strong><br/><strong> ay = center_y - sun_radius;</strong><br/><strong> bx = center_x - sun_radius*tan(15*deg);</strong><br/><strong> by = center_y;</strong><br/><strong> ex = center_x;</strong><br/><strong> ey = center_y + sun_radius;</strong><br/><strong> dx = center_x + sun_radius*tan(15*deg);</strong><br/><strong> dy = center_y;</strong><br/><strong> // 確定單一菱形區域的塗色正確後, 利用迴圈每次轉動 30 度, 總共轉六次即可塗上十二道光芒區域</strong><br/><strong> for (int i=1;i&lt;=6;i++){</strong><br/><strong> // A</strong><br/><strong> points[0].x = ax+sun_radius*sin(30*deg*i);</strong><br/><strong> points[0].y = ay+sun_radius-sun_radius*cos(30*deg*i);</strong><br/><strong> // B</strong><br/><strong> points[1].x = bx+sr-sr*cos(30*deg*i);</strong><br/><strong> points[1].y = by-sr*sin(30*deg*i);</strong><br/><strong> // E</strong><br/><strong> points[2].x = ex-sun_radius*sin(30*deg*i);</strong><br/><strong> points[2].y = ey-(sun_radius-sun_radius*cos(30*deg*i));</strong><br/><strong> // D</strong><br/><strong> points[3].x = dx-(sr-sr*cos(30*deg*i));</strong><br/><strong> points[3].y = dy+sr*sin(30*deg*i);</strong><br/><strong> // 對菱形區域範圍塗色</strong><br/><strong> gdImageFilledPolygon(img, points, 4, color);</strong><br/><strong> // 在菱形區域外圍畫線, 明確界定菱形範圍</strong><br/><strong> gdImagePolygon(img, points, 4, color);</strong><br/><strong> }</strong><br/><strong>}</strong></p>
<p><strong><em><span style="color: #ff0000;">美國國旗</span></em></strong></p>
<p><br/><strong>#include &lt;stdio.h&gt;</strong><br/><strong>#include &lt;gd.h&gt;</strong><br/><strong>#include &lt;math.h&gt;</strong></p>
<p><strong>void draw_usa_flag(gdImagePtr img);</strong><br/><strong>void draw_star(gdImagePtr img, int x, int y, int size, int color);</strong></p>
<p><strong>int main() {</strong><br/><strong> int width = 800;</strong><br/><strong> int height = (int)(width / 1.9);</strong></p>
<p><strong>gdImagePtr img = gdImageCreateTrueColor(width, height);</strong><br/><strong> gdImageAlphaBlending(img, 0);</strong></p>
<p><strong>draw_usa_flag(img);</strong></p>
<p><strong>FILE *outputFile = fopen("./../images/usa_flag.png", "wb");</strong><br/><strong> if (outputFile == NULL) {</strong><br/><strong> fprintf(stderr, "Error opening the output file.\n");</strong><br/><strong> return 1;</strong><br/><strong> }</strong></p>
<p><strong>gdImagePngEx(img, outputFile, 9);</strong><br/><strong> fclose(outputFile);</strong><br/><strong> gdImageDestroy(img);</strong></p>
<p><strong>return 0;</strong><br/><strong>}</strong></p>
<p><strong>void draw_usa_flag(gdImagePtr img) {</strong><br/><strong> int width = gdImageSX(img);</strong><br/><strong> int height = gdImageSY(img);</strong><br/><strong> int red, white, blue;</strong><br/><strong> // Colors for the flag</strong><br/><strong> red = gdImageColorAllocate(img, 178, 34, 52); // Red stripes</strong><br/><strong> white = gdImageColorAllocate(img, 255, 255, 255); // White stripes</strong><br/><strong> blue = gdImageColorAllocate(img, 60, 59, 110); // Blue field</strong></p>
<p><strong>int stripe_height = height / 13;</strong><br/><strong> int stripe_width = width;</strong><br/><strong> int star_size = (int)(0.0308 * height); // Corrected star size (half the original size)</strong></p>
<p><strong>for (int y = 0; y &lt; height; y += stripe_height) {</strong><br/><strong> if (y / stripe_height % 2 == 0) {</strong><br/><strong> gdImageFilledRectangle(img, 0, y, stripe_width, y + stripe_height, red);</strong><br/><strong> } else {</strong><br/><strong> gdImageFilledRectangle(img, 0, y, stripe_width, y + stripe_height, white);</strong><br/><strong> }</strong><br/><strong> }</strong></p>
<p><strong>gdImageFilledRectangle(img, 0, 0, width * 2 / 5, stripe_height * 7, blue);</strong></p>
<p><strong>int star_spacing_x = (int)(0.126 * height); // Horizontal spacing between stars</strong><br/><strong> int star_spacing_y = (int)(0.054 * height); // Vertical spacing between stars</strong><br/><strong> int star_start_x = (int)(0.122 * height); // Starting X position for stars</strong><br/><strong> int star_start_y = (int)(0.0485 * height); // Starting Y position for stars</strong></p>
<p><strong>for (int row = 0; row &lt; 9; row++) {</strong><br/><strong> int starsPerRow = (row % 2 == 0) ? 6 : 5;</strong><br/><strong> int space_x = (row % 2 == 0) ? star_spacing_x / -2 : 0;</strong><br/><strong> for (int star = 0; star &lt; starsPerRow; star++) {</strong><br/><strong> int x = star_start_x + star * star_spacing_x+space_x;</strong><br/><strong> int y = star_start_y + row * star_spacing_y;</strong><br/><strong> draw_star(img, x, y, star_size, white);</strong><br/><strong> }</strong><br/><strong> }</strong><br/><strong>}</strong></p>
<p><strong>void draw_star(gdImagePtr img, int x, int y, int size, int color) {</strong><br/><strong> gdPoint points[10];</strong></p>
<p><strong>for (int i = 0; i &lt; 10; i++) {</strong><br/><strong> double angle = M_PI / 2 + i * 2 * M_PI / 10+M_PI;</strong><br/><strong> int radius = (i % 2 == 0) ? size : size / 2;</strong><br/><strong> points[i].x = x + radius * cos(angle);</strong><br/><strong> points[i].y = y + radius * sin(angle);</strong><br/><strong> }</strong></p>
<p><strong>// Fill the star with white color</strong><br/><strong> gdImageFilledPolygon(img, points, 10, color);</strong><br/><strong>}</strong></p>
<h1>Brython</h1>
<p></p>
<p><a href="https://en.wikipedia.org/wiki/Python_(programming_language)">https://en.wikipedia.org/wiki/Python_(programming_language)</a></p>
<h4>Examples:</h4>
<p style="padding-left: 30px;"><a href="https://gist.github.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d">https://gist.github.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d</a></p>
<p style="padding-left: 30px;"><a href="https://www.geeksforgeeks.org/python-programming-examples/">https://www.geeksforgeeks.org/python-programming-examples/</a></p>
<p style="padding-left: 30px;"><a href="https://www.programiz.com/python-programming/examples">https://www.programiz.com/python-programming/examples</a></p>
<p style="padding-left: 30px;"><a href="https://www.freecodecamp.org/news/python-code-examples-sample-script-coding-tutorial-for-beginners/">https://www.freecodecamp.org/news/python-code-examples-sample-script-coding-tutorial-for-beginners/</a></p>
<h4>Python Tutorial:</h4>
<p style="padding-left: 30px;"><a href="https://docs.python.org/3/tutorial/">https://docs.python.org/3/tutorial/</a></p>
<p style="padding-left: 30px;"><a href="https://docs.python.org/3/tutorial/introduction.html">An informal introduction to Python</a></p>
<h4>Indentation (Python 採 4 個 Spaces 縮排, 以界定執行範圍)</h4>
<h4>Variables (<a href="https://github.com/python/cpython/blob/3.11/Lib/keyword.py">Python Keywords</a>)</h4>
<h4>Comments (# 單行註解, 三個單引號或三個雙引號標註多行註解)</h4>
<h4><a href="https://docs.python.org/3/tutorial/introduction.html#numbers">Numbers</a> (整數 int(), 浮點數 float())</h4>
<h4><a href="https://docs.python.org/3/tutorial/introduction.html#strings">Strings</a> (字串)</h4>
<h4>print (Python 內建函式, <a href="https://docs.python.org/3/library/functions.html#print">print()</a> 函式)</h4>
<p><a href="https://docs.python.org/3/tutorial/controlflow.html">Python control flow tools</a></p>
<h4 style="padding-left: 30px;"><a href="https://docs.python.org/3/tutorial/controlflow.html#for-statements">for</a></h4>
<h4 style="padding-left: 30px;"><a href="https://docs.python.org/3/tutorial/controlflow.html#if-statements">if</a></h4>
<h4 style="padding-left: 30px;"><a href="https://docs.python.org/3/tutorial/controlflow.html#the-range-function">range</a></h4>
<h4>open</h4>
<h4>read</h4>
<h4><a href="https://docs.python.org/3/tutorial/introduction.html#lists">lists</a></h4>
<h4><a href="https://docs.python.org/3/tutorial/datastructures.html#tuples-and-sequences">tuples</a></h4>
<h4><a href="https://docs.python.org/3/tutorial/datastructures.html#dictionaries">dictionaries</a></h4>
<h4><a href="https://docs.python.org/3/tutorial/controlflow.html#defining-functions">functions</a></h4>
<h4><a href="https://docs.python.org/3/tutorial/errors.html#exceptions">try ... except</a></h4>
<h4><a href="https://docs.python.org/3/tutorial/controlflow.html#break-and-continue-statements-and-else-clauses-on-loops">break</a></h4>
<h4><a href="https://docs.python.org/3/tutorial/controlflow.html#pass-statements">pass</a></h4>
<h4><a href="https://docs.python.org/3/tutorial/classes.html?highlight=classes">classes</a></h4>
<p>這個頁面 demo 如何在同一頁面下納入多個線上 Ace 編輯器與執行按鈕 (<a href="/downloads/practice_html.txt">practice_html.txt</a> 動態頁面超文件).</p>
<p><a href="/downloads/practice_html.txt">practice_html.txt</a> 動態頁面超文件應該可以在啟動 Brython 時, 設定將 .py 檔案放入 downloads/py 目錄中引用.</p>
<p>亦即將所有對應的 html 也使用 Brython 產生, 然後寫為 <a href="https://docs.python.org/3/tutorial/classes.html">class</a> 後, 在範例導入時透過 <a href="https://docs.python.org/3/tutorial/classes.html#instance-objects">instance</a> 引用.</p>
<pre class="brush:html;auto-links:false;toolbar:false" contenteditable="false">&lt;!-- 啟動 Brython --&gt;
&lt;script&gt;
window.onload=function(){
brython({debug:1, pythonpath:['/static/','./../downloads/py/']});
}
&lt;/script&gt;</pre>
<p>從 1 累加到 100:</p>
<p><button id="add1to100">1 add to 100</button></p>
<p>將 iterable 與 iterator <a href="https://home.gamer.com.tw/creationDetail.php?sn=4337438">相關說明</a>, 利用 Brython 與 Ace Editor 整理在這個頁面.</p>
<!-- 導入 brython 程式庫 -->
<p>
<script src="/static/brython.js"></script>
<script src="/static/brython_stdlib.js"></script>
</p>
<!-- 啟動 Brython -->
<p>
<script>
window.onload=function(){
brython({debug:1, pythonpath:['/static/','./../downloads/py/']});
}
</script>
</p>
<p><!-- 導入 FileSaver 與 filereader --></p>
<p>
<script src="/static/ace/FileSaver.min.js" type="text/javascript"></script>
<script src="/static/ace/filereader.js" type="text/javascript"></script>
</p>
<p><!-- 導入 ace --></p>
<p>
<script src="/static/ace/ace.js" type="text/javascript"></script>
<script src="/static/ace/ext-language_tools.js" type="text/javascript"></script>
<script src="/static/ace/mode-python3.js" type="text/javascript"></script>
<script src="/static/ace/snippets/python.js" type="text/javascript"></script>
</p>
<p><!-- 導入 gearUtils-0.9.js Cango 齒輪繪圖程式庫 -->
<script src="/static/Cango-24v03-min.js"></script>
<script src="/static/gearUtils-09.js"></script>
<script src="/static/SVGpathUtils-6v03-min.js"></script>
<script src="/static/sylvester.js"></script>
<script src="/static/PrairieDraw.js"></script>
</p>
<p><!-- 請注意, 這裡使用 Javascript 將 localStorage["kw_py_src1"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱--></p>
<p>
<script type="text/javascript">
function doSave(storage_id, filename){
    var blob = new Blob([localStorage[storage_id]], {type: "text/plain;charset=utf-8"});
    filename = document.getElementById(filename).value
    saveAs(blob, filename+".py");
}
</script>
</p>
<p>
<script type="text/python3">
from browser import document as doc
import ace
# 清除畫布
def clear_bd1(ev):
    bd = doc["brython_div1"]
    bd.clear()
Ace1 = ace.Editor(editor_id="kw_editor1", console_id="kw_console1", container_id="kw__container1", storage_id="kw_py_src1" )
# 從 gist 取出程式碼後, 放入 editor 作為 default 程式
def run1():
    # 利用 get 取下 src 變數值
    try:
        url = doc.query["src"]
    except:
        url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c3a6deaf717f8f2739a4b1392a5ab10936e9693a/from_1_add_to_10_1.py"
    prog = open(url).read()

    # 將程式載入編輯區
    Ace1.editor.setValue(prog)
    Ace1.editor.scrollToRow(0)
    Ace1.editor.gotoLine(0)
    # 直接執行程式
    #ns = {'__name__':'__main__'}
    #exec(prog, ns)
    # 按下 run 按鈕
    Ace1.run()

# 執行程式, 顯示輸出結果與清除輸出結果及對應按鈕綁定
doc['kw_run1'].bind('click', Ace1.run)
doc['kw_show_console1'].bind('click', Ace1.show_console)
doc['kw_clear_console1'].bind('click', Ace1.clear_console)
doc['clear_bd1'].bind('click', clear_bd1)
# 呼叫函式執行
run1()
</script>
</p>
<p><!-- add 1 to 100 開始 -->
<script type="text/python3">
from browser import document as doc
import ace

# 清除畫布
def clear_bd1(ev):
    bd = doc["brython_div1"]
    bd.clear()

# 利用 ace 中的 Editor 建立 Ace2 物件, 其中的輸入變數分別對應到頁面中的編輯區物件
Ace2 = ace.Editor(editor_id="kw_editor1", console_id="kw_console1", container_id="kw__container1", storage_id="kw_py_src1" )

add1to100_url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c48e37714f055c3a0027cbfef59e442a6ef659b9/from_1_add_to_100_1.py"

# 從 gist 取得程式碼
add_src = open(add1to100_url).read()
def add(ev):
    Ace2.editor.setValue(add_src)
    Ace2.editor.scrollToRow(0)
    Ace2.editor.gotoLine(0)
    Ace2.run()

# id 為 "add1to100" 的按鈕點按時, 執行 add 方法
doc["add1to100"].bind('click', add)
</script>
</p>
<p><!-- add 1 to 100 結束--></p>
<!-- editor1 開始 -->
<p><!-- 用來顯示程式碼的 editor 區域 --></p>
<div id="kw_editor1" style="width: 600px; height: 300px;"></div>
<p><!-- 以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合 --></p>
<p><!-- 存擋表單開始 --></p>
<form><label>Filename: <input id="kw_filename" placeholder="input file name" type="text"/>.py</label> <input onclick="doSave('kw_py_src1', 'kw_filename1');" type="submit" value="Save"/></form>
<p><!-- 存擋表單結束 --></p>
<p></p>
<p><!-- 執行與清除按鈕開始 --></p>
<p><button id="kw_run1">Run</button> <button id="kw_show_console1">Output</button> <button id="kw_clear_console1">清除輸出區</button><button id="clear_bd1">清除繪圖區</button><button onclick="window.location.reload()">Reload</button></p>
<p><!-- 執行與清除按鈕結束 --></p>
<p></p>
<p><!-- 程式執行 ouput 區 --></p>
<div style="width: 100%; height: 100%;"><textarea autocomplete="off" id="kw_console1"></textarea></div>
<p><!-- Brython 程式執行的結果, 都以 brython_div1 作為切入位置 --></p>
<div id="brython_div1"></div>
<!-- editor1 結束 --><hr/><!-- ########################################## -->
<p>從 1 累加到 100 part2:</p>
<p><button id="add1to100part2">1 add to 100</button><button id="cango_three_gears">cango_three_gears</button><button id="bsnake">BSnake</button><button id="aitetris">AI Tetris</button><button id="threejsblock">Rotating Block</button></p>
<p><!-- 請注意, 這裡使用 Javascript 將 localStorage["kw_py_src2"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱--></p>
<p>
<script type="text/python3">
from browser import document as doc
import ace
# 清除畫布
def clear_bd2(ev):
    bd = doc["brython_div2"]
    bd.clear()
Ace3 = ace.Editor(editor_id="kw_editor2", console_id="kw_console2", container_id="kw__container2", storage_id="kw_py_src2" )
# 從 gist 取出程式碼後, 放入 editor 作為 default 程式
def run2():
    # 利用 get 取下 src 變數值
    try:
        url = doc.query["src2"]
    except:
        url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c3a6deaf717f8f2739a4b1392a5ab10936e9693a/from_1_add_to_10_1.py"
    prog = open(url).read()

    # 將程式載入編輯區
    Ace3.editor.setValue(prog)
    Ace3.editor.scrollToRow(0)
    Ace3.editor.gotoLine(0)
    # 直接執行程式
    #ns = {'__name__':'__main__'}
    #exec(prog, ns)
    # 按下 run 按鈕
    Ace3.run()

# 執行程式, 顯示輸出結果與清除輸出結果及對應按鈕綁定
doc['kw_run2'].bind('click', Ace3.run)
doc['kw_show_console2'].bind('click', Ace3.show_console)
doc['kw_clear_console2'].bind('click', Ace3.clear_console)
doc['clear_bd2'].bind('click', clear_bd2)
# 呼叫函式執行
run2()
</script>
</p>
<p><!-- add 1 to 100 part2 開始 -->
<script type="text/python3">
from browser import document as doc
import ace

# 清除畫布
def clear_bd2(ev):
    bd = doc["brython_div2"]
    bd.clear()

# 利用 ace 中的 Editor 建立 Ace2 物件, 其中的輸入變數分別對應到頁面中的編輯區物件
Ace4 = ace.Editor(editor_id="kw_editor2", console_id="kw_console2", container_id="kw__container2", storage_id="kw_py_src2" )

# 透過 Ace4 以類別建立一個通用的 button2, 可以在多個案例中將 gist 程導入編輯區

class button2:
    def __init__(self, url):
        self.url = url

    # 記得加入 event 輸入變數
    def do(self,ev):
        Ace4.editor.setValue(open(self.url).read())
        Ace4.editor.scrollToRow(0)
        Ace4.editor.gotoLine(0)
        Ace4.run()

add1to100_url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c48e37714f055c3a0027cbfef59e442a6ef659b9/from_1_add_to_100_1.py"

# 從 gist 取得程式碼
add_src = open(add1to100_url).read()
def add2(ev):
    Ace4.editor.setValue(add_src)
    Ace4.editor.scrollToRow(0)
    Ace4.editor.gotoLine(0)
    Ace4.run()

# id 為 "add1to100part2" 的按鈕點按時, 執行 add 方法
doc["add1to100part2"].bind('click', add2)
# 以下為運用 button2 class 的通用 gist 程式導入區
################################## cango_three_gears start
cango_three_gears_url = "https://gist.githubusercontent.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d/raw/f7a85d737d6723d5e34c526d5daee990ed92c32b/cango_three_gears_brython_div2.py"
cango_three_gears = button2(cango_three_gears_url)
doc["cango_three_gears"].bind("click", cango_three_gears.do)
################################## cango_three_gears end
################################## bsnake start
bsnake_url = "https://gist.githubusercontent.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d/raw/f7a85d737d6723d5e34c526d5daee990ed92c32b/kmol_snakey.py"
bsnake = button2(bsnake_url)
doc["bsnake"].bind("click", bsnake.do)
################################## bsnake end
################################## aitetris start
aitetris_url = "https://gist.githubusercontent.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d/raw/f7a85d737d6723d5e34c526d5daee990ed92c32b/pygame_to_brython_tetris_ai.py"
aitetris = button2(aitetris_url)
doc["aitetris"].bind("click", aitetris.do)
################################## aitetris end
################################## threejsblock start
threejsblock_url = "https://gist.githubusercontent.com/mdecycu/2c6323eff49b496d1bafd210f3ec9707/raw/df37802f9e8a386b6424f7945af622b1cd0a9ca5/threejs_rotating_block.py"
threejsblock = button2(threejsblock_url)
doc["threejsblock"].bind("click", threejsblock.do)
################################## threejsblock end
</script>
</p>
<p><!-- add 1 to 100 part2 結束--></p>
<!-- editor2 開始 -->
<p><!-- 用來顯示程式碼的 editor 區域 --></p>
<div id="kw_editor2" style="width: 600px; height: 300px;"></div>
<p><!-- 以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合 --></p>
<p><!-- 存擋表單開始 --></p>
<form><label>Filename: <input id="kw_filename2" placeholder="input file name" type="text"/>.py</label> <input onclick="doSave('kw_py_src2', 'kw_filename2');" type="submit" value="Save"/></form>
<p><!-- 存擋表單結束 --></p>
<p></p>
<p><!-- 執行與清除按鈕開始 --></p>
<p><button id="kw_run2">Run</button> <button id="kw_show_console2">Output</button> <button id="kw_clear_console2">清除輸出區</button><button id="clear_bd2">清除繪圖區</button><button onclick="window.location.reload()">Reload</button></p>
<p><!-- 執行與清除按鈕結束 --></p>
<p></p>
<p><!-- 程式執行 ouput 區 --></p>
<div style="width: 100%; height: 100%;"><textarea autocomplete="off" id="kw_console2"></textarea></div>
<p><!-- Brython 程式執行的結果, 都以 brython_div1 作為切入位置 --></p>
<div id="brython_div2"></div>
<!-- editor2 結束 --><hr/>
<p>
<script src="https://unpkg.com/three@0.144.0/build/three.js" type="text/javascript"></script>
</p>