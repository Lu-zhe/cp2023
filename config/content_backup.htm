<h1>About</h1>
<p><a href="https://github.com/zhe41223118/cp2023"> https://github.com/zhe41223118/cp2023</a> (個人倉儲連結) </p>
<p><a href="https://github.com/FGH41223111/cp2023_ag6">https://github.com/FGH41223111/cp2023_ag6</a> (小組倉儲連結)</p>
<h1>w15</h1>
<p>題目:</p>
<div>1. 在<a href="https://nfuedu-my.sharepoint.com/:u:/g/personal/41223118_nfu_edu_tw/EZeGqVtdysZFqCH78Zy75TMByis1Yn4IPmOXCcyIUQDHzw?e=d53x3R">這個</a>gd檔中加入, 利用白色作為畫線顏色, <span style="background-color: #ffff00;"><strong>將第二組的 ABED 等四個點的座標, 以直線相連</strong></span></div>
<p><img alt="" height="387" src="/images/6.png" width="432"/></p>
<p>2. 列出第二組 ABED 的四條直線與白日中的大圓所相交 (intersect) 的四個點座標</p>
<h2>ANS 1</h2>
<p><strong>第一次嘗試(錯誤答案)</strong></p>
<p><img alt="" height="494" src="/images/66.png" width="800"/></p>
<pre class="brush:cpp;auto-links:false;toolbar:false" contenteditable="false">// https://en.wikipedia.org/wiki/Flag_of_the_Republic_of_China
// 內政部國旗參考資料: https://www.moi.gov.tw/cp.aspx?n=10621
// cc roc_flag_in_gd.c -lgd -lm to link with gd and math library
// https://www.rapidtables.com/web/color/RGB_Color.html
// 幾何形狀著色與繪圖練習
// 以下 gd 繪圖程式嘗試畫出 ROC 國旗, 請根據下列程式內容完成後續的國旗繪圖
#include &lt;stdio.h&gt;
#include &lt;gd.h&gt;
#include &lt;math.h&gt;
 
void draw_roc_flag(gdImagePtr img);
void draw_white_sun(gdImagePtr img, int x, int y, int size, int color);
 
int main() {
    // width 3: height 2
    int width = 1200;
    // 國旗長寬比為 3:2
    int height = (int)(width*2.0 / 3.0);
 
    gdImagePtr img = gdImageCreateTrueColor(width, height);
    gdImageAlphaBlending(img, 0);
 
    draw_roc_flag(img);
 
    FILE *outputFile = fopen("roc_flag_in_gd.png", "wb");
    if (outputFile == NULL) {
        fprintf(stderr, "Error opening the output file.\n");
        return 1;
    }
    gdImagePngEx(img, outputFile, 9);
    fclose(outputFile);
    gdImageDestroy(img);
    return 0;
}
 
void draw_roc_flag(gdImagePtr img) {
    int width = gdImageSX(img);
    int height = gdImageSY(img);
    int red, white, blue;
    // 白日位於青天面積正中央, 因此中心點座標為長寬各 1/4 處
    int center_x = (int)(width/4);
    int center_y = (int)(height/4);
    // gdImageFilledEllipse 需以長寬方向的 diameter 作圖
    // 由於中央白日圓形的半徑為青天寬度的 1/8
    // 因此中央白日圓形的直徑為青天寬度的 1/4, 也就是國旗寬度的 1/8
    // 而且白日十二道光芒的外圍圓形其半徑也是國旗寬度的1/8
    int sun_radius = (int)(width/8);
    // 中央白日圓形的直徑等於十二道光芒外圍圓形的半徑
    int white_circle_dia = sun_radius;
    // 中央藍色圓形半徑為中央白日的 1又 2/15
    int blue_circle_dia = white_circle_dia +  white_circle_dia*2/15;
    // 根據 https://www.moi.gov.tw/cp.aspx?n=10621 訂定國旗三種顏色值
    red = gdImageColorAllocate(img, 255, 0, 0); // 紅色
    white = gdImageColorAllocate(img, 255, 255, 255); // 白色
    blue = gdImageColorAllocate(img, 0, 0, 149); // 藍色
    // 根據畫布大小塗上紅色長方形區域
    gdImageFilledRectangle(img, 0, 0, width, height, red);
    // 青天面積為整面國旗的 1/4, 也是採用長方形塗色
    gdImageFilledRectangle(img, 0, 0, (int)(width/2.0), (int)(height/2.0), blue);
    // 先設法以填色畫出六個白色堆疊菱形
    draw_white_sun(img, center_x, center_y, sun_radius, white);
    // 利用一個藍色大圓與白色小圓畫出藍色環狀
    gdImageFilledEllipse(img, center_x, center_y, blue_circle_dia, blue_circle_dia, blue);
    gdImageFilledEllipse(img, center_x, center_y, white_circle_dia, white_circle_dia, white);
   
}
 
void draw_white_sun(gdImagePtr img, int center_x, int center_y, int sun_radius, int color) {
    // M_PI 大小定義於 math.h 標頭檔中, 因為三角函數中採用徑度為角度單位
    // 因此定義將角度轉為徑度的轉換變數為 deg, 角度值乘上 deg 就可轉為徑度
    float deg = M_PI/180;
    // 根據十二道光芒的每一尖角的角度為 15 度, 求出其對應直角三角形的另一角度為 75 度
    // 求出十二道光芒中任一菱形的 small radius, 也就是菱形的另一個對應小圓的半徑大小
    float sr = sun_radius/tan(75*deg);
    int ax, ay, bx, by, dx, dy, ex, ey;
    gdPoint points[4];
    /* 在塗上十二道光芒中的單一菱形區域之前, 先以座標點畫線測試是否正確
    ax = center_x;
    ay = center_y - sun_radius;
    bx = center_x - sun_radius*tan(15*deg);
    by = center_y;
    ex = center_x;
    ey = center_y + sun_radius;
    dx = center_x + sun_radius*tan(15*deg);
    dy = center_y;
    // AB
    gdImageLine(img, ax, ay, bx, by, color);
    // BE
    gdImageLine(img, bx, by, ex, ey, color);
    // ED
    gdImageLine(img, ex, ey, dx, dy, color);
    // DA
    gdImageLine(img, dx, dy, ax, ay, color);
    */
    ax = center_x;
    ay = center_y - sun_radius;
    printf("%d,%d\n",ax, ay);
    bx = center_x - sun_radius*tan(15*deg);
    by = center_y;
    ex = center_x;
    ey = center_y + sun_radius;
    dx = center_x + sun_radius*tan(15*deg);
    dy = center_y;
    // 確定單一菱形區域的塗色正確後, 利用迴圈每次轉動 30 度, 總共轉六次即可塗上十二道光芒區域
    for (int i=1;i&lt;=6;i++){
    // A
    points[0].x = ax+sun_radius*sin(30*deg*i);
    points[0].y = ay+sun_radius-sun_radius*cos(30*deg*i);
    printf("A coord: (%d,%d)\n", points[0].x, points[0].y);
    // B
    points[1].x = bx+sr-sr*cos(30*deg*i);
    points[1].y = by-sr*sin(30*deg*i);
    printf("B coord: (%d,%d)\n", points[1].x, points[1].y);
    // E
    points[2].x = ex-sun_radius*sin(30*deg*i);
    points[2].y = ey-(sun_radius-sun_radius*cos(30*deg*i));
    printf("E coord: (%d,%d)\n", points[2].x, points[2].y);
    // D
    points[3].x = dx-(sr-sr*cos(30*deg*i));
    points[3].y = dy+sr*sin(30*deg*i);
    printf("D coord: (%d,%d)\n\n", points[2].x, points[2].y);
    // 對菱形區域範圍塗色
    gdImageFilledPolygon(img, points, 4, color);
    // 在菱形區域外圍畫線, 明確界定菱形範圍
    gdImagePolygon(img, points, 4, color);
    }
}</pre>
<p><strong>第二次製作(有點是答案)</strong></p>
<p><img caption="false" height="533" src="/images/1.png" width="800"/></p>
<p><strong></strong></p>
<pre class="brush:js;auto-links:false;toolbar:false" contenteditable="false">#include &lt;stdio.h&gt;
#include &lt;gd.h&gt;
#include &lt;math.h&gt;
 
void draw_roc_flag(gdImagePtr img);
void draw_white_sun(gdImagePtr img, int x, int y, int size, int color);
 
void connectPoints(gdImagePtr img, int x1, int y1, int x2, int y2, int color);
 
int main() {
// width 3: height 2
int width = 1200;
// 國旗長寬比為 3:2
int height = (int)(width * 2.0 / 3.0);
 
gdImagePtr img = gdImageCreateTrueColor(width, height);
gdImageAlphaBlending(img, 0);
 
draw_roc_flag(img);
 
FILE *outputFile = fopen("Y:/tmp/c_ex/roc_flag_in_gd.png", "wb");
if (outputFile == NULL) {
fprintf(stderr, "Error opening the output file.\n");
return 1;
}
gdImagePngEx(img, outputFile, 9);
fclose(outputFile);
gdImageDestroy(img);
return 0;
}
 
void draw_roc_flag(gdImagePtr img) {
int width = gdImageSX(img);
int height = gdImageSY(img);
int red, white, blue;
// 白日位於青天面積正中央, 因此中心點座標為長寬各 1/4 處
int center_x = (int)(width / 4);
int center_y = (int)(height / 4);
// gdImageFilledEllipse 需以長寬方向的 diameter 作圖
// 由於中央白日圓形的半徑為青天寬度的 1/8
// 因此中央白日圓形的直徑為青天寬度的 1/4, 也就是國旗寬度的 1/8
// 而且白日十二道光芒的外圍圓形其半徑也是國旗寬度的1/8
int sun_radius = (int)(width / 8);
// 中央白日圓形的直徑等於十二道光芒外圍圓形的半徑
int white_circle_dia = sun_radius;
// 中央藍色圓形半徑為中央白日的 1又 2/15
int blue_circle_dia = white_circle_dia + white_circle_dia * 2 / 15;
// 根據 https://www.moi.gov.tw/cp.aspx?n=10621 訂定國旗三種顏色值
red = gdImageColorAllocate(img, 255, 0, 0); // 紅色
white = gdImageColorAllocate(img, 255, 255, 255); // 白色
blue = gdImageColorAllocate(img, 0, 0, 149); // 藍色
// 根據畫布大小塗上紅色長方形區域
gdImageFilledRectangle(img, 0, 0, width, height, red);
// 青天面積為整面國旗的 1/4, 也是採用長方形塗色
gdImageFilledRectangle(img, 0, 0, (int)(width / 2.0), (int)(height / 2.0), blue);
// 先設法以填色畫出六個白色堆疊菱形
draw_white_sun(img, center_x, center_y, sun_radius, white);
// 利用一個藍色大圓與白色小圓畫出藍色環狀
gdImageFilledEllipse(img, center_x, center_y, blue_circle_dia, blue_circle_dia, blue);
gdImageFilledEllipse(img, center_x, center_y, white_circle_dia, white_circle_dia, white);
 
// 連接四個座標點
connectPoints(img, 429, 125, 279, 165, white);
connectPoints(img, 279, 165, 170, 274, white);
connectPoints(img, 170, 274, 319, 234, white);
connectPoints(img, 319, 234, 429, 125, white);
}
 
void draw_white_sun(gdImagePtr img, int center_x, int center_y, int sun_radius, int color) {
float deg = M_PI / 180;
float sr = sun_radius / tan(75 * deg);
int ax, ay, bx, by, dx, dy, ex, ey;
 
ax = center_x;
ay = center_y - sun_radius;
 
bx = center_x - sun_radius * tan(15 * deg);
by = center_y;
 
ex = center_x;
ey = center_y + sun_radius;
 
dx = center_x + sun_radius * tan(15 * deg);
dy = center_y;
 
for (int i = 1; i &lt;= 6; i++) {
int ax1 = ax + sun_radius * sin(30 * deg * i);
int ay1 = ay + sun_radius - sun_radius * cos(30 * deg * i);
 
int bx1 = bx + sr - sr * cos(30 * deg * i);
int by1 = by - sr * sin(30 * deg * i);
 
int ex1 = ex - sun_radius * sin(30 * deg * i);
int ey1 = ey - (sun_radius - sun_radius * cos(30 * deg * i));
 
int dx1 = dx - (sr - sr * cos(30 * deg * i));
int dy1 = dy + sr * sin(30 * deg * i);
 
// 對菱形區域範圍塗色
gdImageFilledPolygon(img, (gdPoint[4]){{ax1, ay1}, {bx1, by1}, {ex1, ey1}, {dx1, dy1}}, 4, color);
 
// 在菱形區域外圍畫線，明確界定菱形範圍
gdImageLine(img, ax1, ay1, bx1, by1, color);
gdImageLine(img, bx1, by1, ex1, ey1, color);
gdImageLine(img, ex1, ey1, dx1, dy1, color);
gdImageLine(img, dx1, dy1, ax1, ay1, color);
}
}
 
void connectPoints(gdImagePtr img, int x1, int y1, int x2, int y2, int color) {
gdImageLine(img, x1, y1, x2, y2, color);</pre>
<p></p>
<p>配合ChatGTP，在原式上新增</p>
<pre class="brush:cpp;auto-links:false;toolbar:false" contenteditable="false">gdImageLine(img, ax1, ay1, bx1, by1, color);
gdImageLine(img, bx1, by1, ex1, ey1, color);
gdImageLine(img, ex1, ey1, dx1, dy1, color);
gdImageLine(img, dx1, dy1, ax1, ay1, color);
}
}</pre>
<p>繪出</p><h2>ANS 2</h2>
<h1>w13</h1>
<p>如何使用近端編輯網站</p>
<p><span style="background-color: #ffff00;">在近端建立 <span style="color: #0000ff;">OpenSSH</span> 格式的<span style="color: #0000ff;"> public key</span>, <span style="color: #0000ff;">putty</span> 格式的 <span style="color: #0000ff;">private</span> 並且配合 <span style="color: #0000ff;">putty session </span>讓使用者可以將倉儲 <span style="color: #0000ff;">git clone</span> 到近端維護。</span></p>
<p>所會用到的<span style="color: #0000ff;">命令字元指令</span>(如果操作過程無任何錯誤)</p>
<p><strong><span style="background-color: #ffff00;">reedit </span></strong><span style="background-color: #ffffff;">(開啟登陸編輯程式)</span></p>
<p><strong><span style="background-color: #ffff00;">cd </span></strong><span style="background-color: #ffffff;">(進入資料夾位置)</span></p>
<p><strong><span style="background-color: #ffff00;">git clone --recurse-submodules </span></strong><span style="background-color: #ffffff;">(克隆複製倉儲資料)</span></p>
<p><strong><span style="background-color: #ffff00;">cms </span></strong><span style="background-color: #ffffff;">(啟動近端)</span></p>
<p>近端啟動後網站預設密碼為<strong><span style="color: #ff0000;">admin<span style="color: #000000;">，</span></span></strong><span style="color: #ff0000;"><span style="color: #000000;">只有自己需要使用的話，無須更改密碼，因為近端網站只要自己不啟動它，別人也進不來，更不用說還不知道密碼的情況下。 (註:如要以指令停止近端<strong><span style="color: #ff0000;">ctrl+c</span></strong>)</span></span></p>
<p><span>檔案位置:<span style="color: #0000ff;">tinyc裡的data</span><span>，需有</span><span style="color: #ff0000;">portablegit PuTTY Python311</span><span>三個檔案 (<a href="https://nfuedu-my.sharepoint.com/:u:/g/personal/41223118_nfu_edu_tw/EQKYzpSpfetGj0iMQnDcdYABjabAA5Fi3cjiyunroXrQgg?e=2UKfPB">python3114_git_putty.7z</a>)</span></span></p>
<p><span><span><img alt="" height="530" src="/images/螢幕擷取畫面 (6).png" width="786"/></span></span></p>
<p><span style="color: #ff0000;"><strong>注意<span style="color: #000000;">:</span></strong></span>需在符合上圖條件下開啟<strong><span style="color: #ff0000;">start_ipv6.bat</span></strong>，因為在虛擬主機(Y)所做的檔案更改不會影響自己本身的USB磁碟機，如果三個檔案在開啟命令字元時不在data裡，而是在開啟後才放入或放在開啟後產生的Y槽裡的話，會在後續在檔案傳輸和指示字元讀取倉儲檔案上出現問題</p>
<h2>step 1</h2>
<p>使用<span><span style="color: #ff0000;">puttygen.exe</span><span>定位主機位置並獲得key(點擊Generate開始定位)</span></span></p>
<p><span><span>如圖:(鼠標需在其檔案頁面範圍內不斷移動直到<span style="color: #0000ff;">綠條</span>跑完)</span></span></p>
<p><span><span><img alt="" height="553" src="/images/螢幕擷取畫面 (4).png" width="790"/></span></span></p>
<p>將key(圖上藍色框選的亂碼)複製新增到自己倉儲帳號(<span>設定-SSH keys)</span>，同時也要點圖上的<span style="color: #0000ff;">Save private key</span></p>
<p>儲存到<strong><span style="color: #ff0000;">tinyc-data-home</span></strong>(名稱學號)</p>
<p><span style="background-color: #ffff00;">貼至倉儲綁定的亂碼就是自己設的鎖，而鑰匙就是儲存至自己的USB中的<span style="color: #ff0000;"><strong>.ppk</strong></span>檔</span></p>
<h2>step 2</h2>
<p>使用<span style="color: #ff0000;">putty.exe<span style="color: #000000;">把要鑰匙與倉儲座連接</span></span></p>
<p><span style="color: #ff0000;"><span style="color: #000000;"><img alt="" height="237" src="/images/0.png" width="290"/><img alt="" height="221" src="/images/2.png" width="267"/></span></span></p>
<p>至<span style="color: #0000ff;">SSH</span>裡的<span style="color: #0000ff;">Auth</span>裡的<span style="color: #0000ff;">Credentials，</span>將<span style="color: #ff0000;"><span style="color: #0000ff;">.ppk</span></span>檔數入</p><h2>step 3</h2>
<p>在命令字元打上<span style="color: #ff0000;">reedit</span>，尋找到剛剛處存的key<span style="color: #ff0000;">整個目錄檔</span>後右鍵匯出至USB中</p>
<p><img alt="" height="295" src="/images/9.png" width="260"/><img alt="" height="201" src="/images/5.png" width="263"/></p>
<p><span>字元指令至(<span style="color: #ff0000;">cd</span>)自己要克隆抓取後放置的位置</span></p>
<p>輸入git clone --recurse-submodules <strong><span style="color: #000000; background-color: #ffff99;">git@41223118:zhe41223118</span></strong>/cp2023.git</p>
<p>(上述粗體字前者為.ppk檔案名:後者為倉儲帳號)</p>
<p>將倉儲資料複製到USB，之後cd進cp2023(克隆下的資料檔名)</p>
<p>輸入<strong><span style="color: #ff0000;">cms</span></strong><span> </span>就可開啟近端網站進行維護了</p>
<h1>w12</h1>
<p>倉儲有限制檔案的上傳大小(上限為100MB)</p>
<p>但推送大檔案，會使之後的推送都需重複推送大檔</p>
<p>進而使傳輸一直有負擔，或因檔案過大使之後的acp都受阻</p>
<p>而延伸出的需刪除上傳或壓縮檔案的問題</p>
<p>在資料合併上也會因上傳受阻時的錯誤操作而造成問題複雜化</p>
<p></p>
<p>要解決檔案太大上傳問題，使用<strong><span style="color: #ff0000;">onedrive</span></strong><span style="color: #ff0000;"><span style="color: #000000;">(上限5TB)</span></span></p>
<p><span style="color: #ff0000;"><span style="color: #000000;">將檔案透過連結下載的方式繞過倉儲的上傳限制</span></span></p>
<p>例子:<a href="https://nfuedu-my.sharepoint.com/:t:/g/personal/41223118_nfu_edu_tw/ER6bBZF0Yi1LpbIuc6x6_QwBNaowTwRlLFY9kKrz2JMxfw?e=7F05Gt">rrr</a></p>
<p></p>
<h1>w11</h1>
<p><a href="/downloads/w11_1a.7z">w11_1a.7z</a>(個人網路設定檔)</p>
<p>更改內容IPv6，將其更改為個人IP序號</p>
<p>目的是能夠用可攜式檔，只要有網路都可以用管理者執行該檔直截獲取IPv6</p>
<p></p>
<p>在登錄網站後，選擇<span style="color: #ff0000;"> <strong>IUpload</strong></span><span> </span>(建議是新增一個頁面打開)</p>
<p></p>
<h1>w8</h1>
<p>遠端與倉儲帳號連接</p>
<p></p>
<p>chmod u+x acp</p>
<p>mkdir public_html</p>
<p>cd public_html</p>
<p>git clone --recurse-submodules <a href="https://github.com/zhe41223118/cp2023.git">https://github.com/zhe41223118/cp2023.git</a></p>
<p>vi acp</p>
<pre class="brush:js;auto-links:false;toolbar:false" contenteditable="false">#! /bin/bash
git add .
git commit -m "$1"
git push
cd ./../public_html/cp2023
git pull
</pre>
<p>必須根據<a href="https://www.server-world.info/en/note?os=Ubuntu_20.04&amp;p=nginx&amp;f=4">這裡</a>的說明設定目錄權限.</p>
<pre class="brush:js;auto-links:false;toolbar:false" contenteditable="false">ubuntu@www:~$ chmod 711 /home/ubuntu
ubuntu@www:~$ mkdir ~/public_html
ubuntu@www:~$ chmod 755 ~/public_html
ubuntu@www:~$ vi ~/public_html/index.html</pre>
<p>帳號根目錄 (user directory) 必須設定 .gitconfig</p>
<p><a>https://s1511.cycu.org:8022</a> </p>
<p><a href="https://s1511.cycu.org/~cp41223118/cp2023">https://s1511.cycu.org/~cp41223118/cp2023</a> </p>
<p> </p>
<h1>work</h1>
<p>cd-檔案</p>
<p>cc 檔案名+ -lgd -lm</p>
<p>./a.out</p>
<p></p>
<p><span>需在replit.nix進行  <span style="color: #ff0000;">備註:Files最底下 藍色雪花圖形 </span></span></p>
<div class="line number1 index0 alt2">
<pre class="brush:js;auto-links:false;toolbar:false" contenteditable="false">{ pkgs }: {
    deps = [
        pkgs.sudo
        pkgs.clang_12
        pkgs.ccls
        pkgs.gdb
        pkgs.gnumake
        pkgs.gnuplot
    ];
}</pre>
</div>
<p><img alt="" height="400" src="/images/gnuplot_ex1.png" width="800"/></p>
<p>需在replit.nix進行</p>
<pre class="brush:js;auto-links:false;toolbar:false" contenteditable="false">{ pkgs }: {
deps = [
pkgs.vimHugeX
pkgs.gd
pkgs.gnuplot
];
}</pre>
<p><br/><br/></p>
<p>其中<span style="color: #ff0000;">pkgs.gd<span style="color: #000000;">是必要</span></span></p>
<p><img alt="" height="590" src="/images/roc_flag_in_gd.png" width="885"/><img alt="" height="421" src="/images/usa_flag.png" width="800"/></p>
<p><img alt="" height="701" src="/images/japan_flag.png" width="1052"/></p>
<p><img alt="" height="442" src="/images/01.png" width="663"/></p>
<p><img alt="" height="400" src="/images/02.png" width="800"/></p><h1>program</h1>
<p><em><strong><span style="color: #ff0000;">曲線圖</span></strong></em></p>
<pre class="brush:js;auto-links:false;toolbar:false" contenteditable="false">#include &lt;stdio.h&gt;

int main() {
// Open a file to write displacement and velocity data
FILE *outputFile = fopen("motion_data.txt", "w");
if (!outputFile) {
fprintf(stderr, "Failed to create data file.\n");
return 1;
}

// Simulate motion for 10 seconds and calculate displacement and velocity, while writing data to the file
double x = 0.2; // Initial displacement
double v = 0.0; // Initial velocity
double dt = 0.01; // Time step
double t = 0.0; // Time

while (t &lt;= 10.0) {
double acceleration = (-10.0 * x - 0.5 * v) / 1.0; // Modified system parameters here
v += acceleration * dt;
x += v * dt;

fprintf(outputFile, "%lf %lf %lf\n", t, x, v);

t += dt;
}

// Close the data file
fclose(outputFile);

// Start a Gnuplot process using popen
FILE *gnuplotPipe = popen("gnuplot -persistent", "w");
if (!gnuplotPipe) {
fprintf(stderr, "Failed to start Gnuplot.\n");
return 1;
}

// Use Gnuplot plotting commands, specify font and output as PNG
fprintf(gnuplotPipe, "set terminal pngcairo enhanced font 'default,10' size 800,400\n");
fprintf(gnuplotPipe, "set output 'motion_plot.png'\n");
fprintf(gnuplotPipe, "set title 'Displacement and Velocity vs. Time'\n");
fprintf(gnuplotPipe, "set xlabel 'Time (s)'\n");
fprintf(gnuplotPipe, "set ylabel 'Displacement (m)'\n");
fprintf(gnuplotPipe, "plot 'motion_data.txt' using 1:2 with lines lw 2 title 'Displacement', \
'motion_data.txt' using 1:3 with lines lw 2 title 'Velocity'\n");

// Close the Gnuplot process
fprintf(gnuplotPipe, "exit\n");
pclose(gnuplotPipe);

return 0;
}</pre>
<p><br/><br/></p>
<p><span style="color: #ff0000;"><strong><em>台灣國旗</em></strong></span></p>
<pre class="brush:js;auto-links:false;toolbar:false" contenteditable="false">// 內政部國旗參考資料: https://www.moi.gov.tw/cp.aspx?n=10621
// 幾何形狀著色與繪圖練習
#include &lt;stdio.h&gt;
#include &lt;gd.h&gt;
#include &lt;math.h&gt;

void draw_roc_flag(gdImagePtr img);
void draw_white_sun(gdImagePtr img, int x, int y, int size, int color);

int main() {
// width 3: height 2
int width = 1200;
// 國旗長寬比為 3:2
int height = (int)(width*2.0 / 3.0);

gdImagePtr img = gdImageCreateTrueColor(width, height);
gdImageAlphaBlending(img, 0);

draw_roc_flag(img);

FILE *outputFile = fopen("./../images/roc_flag_in_gd.png", "wb");
if (outputFile == NULL) {
fprintf(stderr, "Error opening the output file.\n");
return 1;
}
gdImagePngEx(img, outputFile, 9);
fclose(outputFile);
gdImageDestroy(img);
return 0;
}

void draw_roc_flag(gdImagePtr img) {
int width = gdImageSX(img);
int height = gdImageSY(img);
int red, white, blue;
// 白日位於青天面積正中央, 因此中心點座標為長寬各 1/4 處
int center_x = (int)(width/4);
int center_y = (int)(height/4);
// gdImageFilledEllipse 需以長寬方向的 diameter 作圖
// 由於中央白日圓形的半徑為青天寬度的 1/8
// 因此中央白日圓形的直徑為青天寬度的 1/4, 也就是國旗寬度的 1/8
// 而且白日十二道光芒的外圍圓形其半徑也是國旗寬度的1/8
int sun_radius = (int)(width/8);
// 中央白日圓形的直徑等於十二道光芒外圍圓形的半徑
int white_circle_dia = sun_radius;
// 中央藍色圓形半徑為中央白日的 1又 2/15
int blue_circle_dia = white_circle_dia + white_circle_dia*2/15;
// 根據 https://www.moi.gov.tw/cp.aspx?n=10621 訂定國旗三種顏色值
red = gdImageColorAllocate(img, 255, 0, 0); // 紅色
white = gdImageColorAllocate(img, 255, 255, 255); // 白色
blue = gdImageColorAllocate(img, 0, 0, 149); // 藍色
// 根據畫布大小塗上紅色長方形區域
gdImageFilledRectangle(img, 0, 0, width, height, red);
// 青天面積為整面國旗的 1/4, 也是採用長方形塗色
gdImageFilledRectangle(img, 0, 0, (int)(width/2.0), (int)(height/2.0), blue);
// 先設法以填色畫出六個白色堆疊菱形
draw_white_sun(img, center_x, center_y, sun_radius, white);
// 利用一個藍色大圓與白色小圓畫出藍色環狀
gdImageFilledEllipse(img, center_x, center_y, blue_circle_dia, blue_circle_dia, blue);
gdImageFilledEllipse(img, center_x, center_y, white_circle_dia, white_circle_dia, white);

}

void draw_white_sun(gdImagePtr img, int center_x, int center_y, int sun_radius, int color) {
// M_PI 大小定義於 math.h 標頭檔中, 因為三角函數中採用徑度為角度單位
// 因此定義將角度轉為徑度的轉換變數為 deg, 角度值乘上 deg 就可轉為徑度
float deg = M_PI/180;
// 根據十二道光芒的每一尖角的角度為 15 度, 求出其對應直角三角形的另一角度為 75 度
// 求出十二道光芒中任一菱形的 small radius, 也就是菱形的另一個對應小圓的半徑大小
float sr = sun_radius/tan(75*deg);
int ax, ay, bx, by, dx, dy, ex, ey;
gdPoint points[4];
/* 在塗上十二道光芒中的單一菱形區域之前, 先以座標點畫線測試是否正確
ax = center_x;
ay = center_y - sun_radius;
bx = center_x - sun_radius*tan(15*deg);
by = center_y;
ex = center_x;
ey = center_y + sun_radius;
dx = center_x + sun_radius*tan(15*deg);
dy = center_y;
// AB
gdImageLine(img, ax, ay, bx, by, color);
// BE
gdImageLine(img, bx, by, ex, ey, color);
// ED
gdImageLine(img, ex, ey, dx, dy, color);
// DA
gdImageLine(img, dx, dy, ax, ay, color);
*/
ax = center_x;
ay = center_y - sun_radius;
bx = center_x - sun_radius*tan(15*deg);
by = center_y;
ex = center_x;
ey = center_y + sun_radius;
dx = center_x + sun_radius*tan(15*deg);
dy = center_y;
// 確定單一菱形區域的塗色正確後, 利用迴圈每次轉動 30 度, 總共轉六次即可塗上十二道光芒區域
for (int i=1;i&lt;=6;i++){
// A
points[0].x = ax+sun_radius*sin(30*deg*i);
points[0].y = ay+sun_radius-sun_radius*cos(30*deg*i);
// B
points[1].x = bx+sr-sr*cos(30*deg*i);
points[1].y = by-sr*sin(30*deg*i);
// E
points[2].x = ex-sun_radius*sin(30*deg*i);
points[2].y = ey-(sun_radius-sun_radius*cos(30*deg*i));
// D
points[3].x = dx-(sr-sr*cos(30*deg*i));
points[3].y = dy+sr*sin(30*deg*i);
// 對菱形區域範圍塗色
gdImageFilledPolygon(img, points, 4, color);
// 在菱形區域外圍畫線, 明確界定菱形範圍
gdImagePolygon(img, points, 4, color);
}
}</pre>
<p></p>
<p><strong><em><span style="color: #ff0000;">美國國旗</span></em></strong></p>
<pre class="brush:js;auto-links:false;toolbar:false" contenteditable="false">#include &lt;stdio.h&gt;
#include &lt;gd.h&gt;
#include &lt;math.h&gt;

void draw_usa_flag(gdImagePtr img);
void draw_star(gdImagePtr img, int x, int y, int size, int color);

int main() {
int width = 800;
int height = (int)(width / 1.9);

gdImagePtr img = gdImageCreateTrueColor(width, height);
gdImageAlphaBlending(img, 0);

draw_usa_flag(img);

FILE *outputFile = fopen("./../images/usa_flag.png", "wb");
if (outputFile == NULL) {
fprintf(stderr, "Error opening the output file.\n");
return 1;
}

gdImagePngEx(img, outputFile, 9);
fclose(outputFile);
gdImageDestroy(img);

return 0;
}

void draw_usa_flag(gdImagePtr img) {
int width = gdImageSX(img);
int height = gdImageSY(img);
int red, white, blue;
// Colors for the flag
red = gdImageColorAllocate(img, 178, 34, 52); // Red stripes
white = gdImageColorAllocate(img, 255, 255, 255); // White stripes
blue = gdImageColorAllocate(img, 60, 59, 110); // Blue field

int stripe_height = height / 13;
int stripe_width = width;
int star_size = (int)(0.0308 * height); // Corrected star size (half the original size)

for (int y = 0; y &lt; height; y += stripe_height) {
if (y / stripe_height % 2 == 0) {
gdImageFilledRectangle(img, 0, y, stripe_width, y + stripe_height, red);
} else {
gdImageFilledRectangle(img, 0, y, stripe_width, y + stripe_height, white);
}
}

gdImageFilledRectangle(img, 0, 0, width * 2 / 5, stripe_height * 7, blue);

int star_spacing_x = (int)(0.126 * height); // Horizontal spacing between stars
int star_spacing_y = (int)(0.054 * height); // Vertical spacing between stars
int star_start_x = (int)(0.122 * height); // Starting X position for stars
int star_start_y = (int)(0.0485 * height); // Starting Y position for stars

for (int row = 0; row &lt; 9; row++) {
int starsPerRow = (row % 2 == 0) ? 6 : 5;
int space_x = (row % 2 == 0) ? star_spacing_x / -2 : 0;
for (int star = 0; star &lt; starsPerRow; star++) {
int x = star_start_x + star * star_spacing_x+space_x;
int y = star_start_y + row * star_spacing_y;
draw_star(img, x, y, star_size, white);
}
}
}

void draw_star(gdImagePtr img, int x, int y, int size, int color) {
gdPoint points[10];

for (int i = 0; i &lt; 10; i++) {
double angle = M_PI / 2 + i * 2 * M_PI / 10+M_PI;
int radius = (i % 2 == 0) ? size : size / 2;
points[i].x = x + radius * cos(angle);
points[i].y = y + radius * sin(angle);
}

// Fill the star with white color
gdImageFilledPolygon(img, points, 10, color);
}</pre>
<p><strong><em><span style="color: #ff0000;">日本國旗</span></em></strong></p>
<pre class="brush:js;auto-links:false;toolbar:false" contenteditable="false">#include &lt;stdio.h&gt;
#include &lt;gd.h&gt;
#include &lt;math.h&gt;

void draw_japan_flag(gdImagePtr img);
void draw_white_sun(gdImagePtr img, int center_x, int center_y, int sun_radius, int white, int red );

int main() {
    // width 3: height 2
    int width = 1200;
    int height = 2 * width / 3;

    gdImagePtr img = gdImageCreateTrueColor(width, height);
    gdImageAlphaBlending(img, 0);

    draw_japan_flag(img);

    FILE *outputFile = fopen("./../images/japan_flag.png", "wb");
    if (outputFile == NULL) {
        fprintf(stderr, "Error opening the output file.\n");
        return 1;
    }
    gdImagePngEx(img, outputFile, 9);
    fclose(outputFile);
    gdImageDestroy(img);
    return 0;
}

void draw_japan_flag(gdImagePtr img) {
    int width = gdImageSX(img);
    int height = gdImageSY(img);
    int red, white ;
    int center_x =  0.5 * width;
    int center_y =  0.5 * height;
    int sun_radius = 145 ;

    // Colors for the flag
    red = gdImageColorAllocate(img, 242, 0, 0); // Red color
    white = gdImageColorAllocate(img, 255, 255, 255); // White stripes


    // 繪製白色矩形區域
    gdImageFilledRectangle(img, 0, 0, width, height, white);


    // 繪製太陽內部
    gdImageFilledEllipse(img, center_x, center_y, sun_radius * 3, sun_radius * 3, red);
}</pre>
<p><strong><em><span style="color: #ff0000;">中國國旗</span></em></strong></p>
<pre class="brush:js;auto-links:false;toolbar:false" contenteditable="false">#include &lt;stdio.h&gt;
#include &lt;gd.h&gt;
#include &lt;math.h&gt;

void draw_chinese_flag(gdImagePtr img);

int main() {
    int width = 300; // 國旗寬度
    int height = 200; // 國旗高度

    gdImagePtr im = gdImageCreateTrueColor(width, height);
    gdImageAlphaBlending(im, 0);

    draw_chinese_flag(im);

    FILE *outputFile = fopen("./../images/proc_flag.png", "wb");
    if (outputFile == NULL) {
        fprintf(stderr, "打开输出文件时出错。\n");
        return 1;
    }

    gdImagePngEx(im, outputFile, 9);
    fclose(outputFile);
    gdImageDestroy(im);

    return 0;
}

// 声明 draw_star 函数
void draw_star(gdImagePtr img, int x, int y, int size, int color, double rotation_angle);

void draw_chinese_flag(gdImagePtr img) {
    int width = gdImageSX(img);
    int height = gdImageSY(img);
    int red, yellow;

    // 國旗顏色
    red = gdImageColorAllocate(img, 255, 0, 0); // 紅色背景
    yellow = gdImageColorAllocate(img, 255, 255, 0); // 黃色星星

    // 畫紅色背景
    gdImageFilledRectangle(img, 0, 0, width, height, red);

    // 設置星星的大小和位置
    int star_size = (int)(0.28 * height);
    int star_x = (int)(0.165 * width);
    int star_y = (int)(0.265 * height);

    // 畫大星星
    draw_star(img, star_x, star_y, star_size, yellow, 11.0);

    // 繪製小星星，位置根據實際國旗比例計算
    double radius = 0.15 * height;
    double angle = 360 / 7 * M_PI / 179.0;
    double rotation = -M_PI / 7.5;
    int cx = (int)(0.32 * width);
    int cy = (int)(0.27 * height);

    for (int i = -1; i &lt; 3; i++) {
        int x = (int)(cx + radius * cos(i * angle + rotation));
        int y = (int)(cy + radius * sin(i * angle + rotation));
        draw_star(img, x, y, 19, yellow, M_PI / 5.0);
    }
}

void draw_star(gdImagePtr img, int x, int y, int size, int color, double rotation_angle) {
    gdPoint points[10];

    // 计算星形的五个外点和五个内点
    double outer_radius = size / 2;
    double inner_radius = size / 6;
    double angle = M_PI / 5.0;

    for (int i = 0; i &lt; 10; i++) {
        double radius = (i % 2 == 0) ? outer_radius : inner_radius;
        double theta = rotation_angle + i * angle;
        points[i].x = x + radius * cos(theta);
        points[i].y = y + radius * sin(theta);
    }

    // 使用 gdImageFilledPolygon 绘制星形
    gdImageFilledPolygon(img, points, 10, color);
}</pre>
<p><strong><em><span style="color: #ff0000;">英國國旗</span></em></strong></p>
<pre class="brush:js;auto-links:false;toolbar:false" contenteditable="false">#include &lt;stdio.h&gt;
#include &lt;gd.h&gt;
#include &lt;math.h&gt;

void draw_uk_flag(gdImagePtr img);
void fillTriangle(gdImagePtr img, int x1, int y1, int x2, int y2, int x3, int y3, int color);

int main() {
    // 设置国旗的宽和高
    int width = 1200;
    int height = width / 2;

    // 创建图像
    gdImagePtr img = gdImageCreateTrueColor(width, height);
    gdImageAlphaBlending(img, 0);

    // 绘制英国国旗
    draw_uk_flag(img);

    // 将图像保存到文件
    FILE *outputFile = fopen("./../images/uk_flag.png", "wb");
    if (outputFile == NULL) {
        fprintf(stderr, "打开输出文件时发生错误。\n");
        return 1;
    }
    gdImagePngEx(img, outputFile, 9);
    fclose(outputFile);
    gdImageDestroy(img);
    return 0;
}



void draw_uk_flag(gdImagePtr img) {
    int width = gdImageSX(img);
    int height = gdImageSY(img);

    int red, white, blue;
    red = gdImageColorAllocate(img, 204, 0, 0);       // 红色
    white = gdImageColorAllocate(img, 255, 255, 255); // 白色
    blue = gdImageColorAllocate(img, 0, 0, 153);      // 蓝色

    gdImageFilledRectangle(img, 0, 0, width, height, blue);


  int x1, y1, x2, y2, x3, y3;
  {
    int line_thickness = 100;
    gdImageSetThickness(img, line_thickness);

    int x1, y1, x2, y2, x3, y3;

    // 绘制白色斜线
    x1 = 0;
    y1 = 600;
    x2 = 1200;
    y2 = 0;
    gdImageLine(img, x1, y1, x2, y2, white);

    x1 = 0;
    y1 = 0;
    x2 = 1200;
    y2 = 600;
    gdImageLine(img, x1, y1, x2, y2, white);
}
  {
    int line_thickness = 33;
    gdImageSetThickness(img, line_thickness);


    // 绘制红色斜线
    x1 = 566;
    y1 = 300;
    x2 = 1166;
    y2 = 0;
    gdImageLine(img, x1, y1, x2, y2, red);

    x1 = 1233;
    y1 = 600;
    x2 = 633;
    y2 = 300;
    gdImageLine(img, x1, y1, x2, y2, red);

    x1 = 566;
    y1 = 300;
    x2 = -33;
    y2 = 0;
    gdImageLine(img, x1, y1, x2, y2, red);

    x1 = 600;
    y1 = 316.5;
    x2 = 0;
    y2 = 616.5;
    gdImageLine(img, x1, y1, x2, y2, red);
  }
  {
  int line_thickness = 33;
  gdImageSetThickness(img, line_thickness);

  int x1, y1, x2, y2, x3, y3;

  // 绘制  斜线
  x1 = 0;
  y1 = 600;
  x2 = 1200;
  y2 = 0;
  gdImageLine(img, x1, y1, x2, y2, red );


  x1 = 1200;
    y1 = 16.5;
    x2 = 600;
    y2 = 316.5;
    gdImageLine(img, x1, y1, x2, y2, white);


  x1 = 0;
    y1 = 583.5;
    x2 = 600;
    y2 = 283.5;
    gdImageLine(img, x1, y1, x2, y2, white);


  }

    // 绘制白色十字
    int cross_width = width / 32;
    int cross_arm_width = width / 32;
    int center_x = width / 2;
    int center_y = height / 2;

    gdImageFilledRectangle(img, center_x + 2.7 * cross_width, 0, center_x - 2.7 * cross_width, height, white);
    gdImageFilledRectangle(img, 0, center_y + 2.7 * cross_arm_width, width, center_y - 2.7 * cross_arm_width, white);

    // 绘制红色十字
    gdImageFilledRectangle(img, center_x + 1.5 * cross_width, 0, center_x - 1.5 * cross_width, height, red);
    gdImageFilledRectangle(img, 0, center_y + 1.5 * cross_arm_width, width, center_y - 1.5 * cross_arm_width, red);
}</pre>
<p></p><h1>file</h1>
<p><span style="color: #0000ff;"><strong>檔案總攬</strong></span></p>
<p></p>
<p><a href="https://nfuedu-my.sharepoint.com/:u:/g/personal/41223118_nfu_edu_tw/Eec_-ybdlwJNivkSRcOLz4MB8Eh2HFpms2CrgpKLt8hOcw">tinyc.7z</a> (<span>Tiny C Compiler 編譯 C 程式, 包含 gd 與 gnuplot)</span></p>
<p><span></span></p>
<p><a href="https://nfuedu-my.sharepoint.com/:u:/g/personal/41223118_nfu_edu_tw/EZivhkrZZ1VKnNPhGJLt5dIBeQ7uU5AV1EdxH-3xAHUl4w?e=5cJkvx">w11_1a.7z</a> (<span>網路設定檔案)</span></p>
<p><span></span></p>
<p><span><a href="https://nfuedu-my.sharepoint.com/:u:/g/personal/41223118_nfu_edu_tw/EQKYzpSpfetGj0iMQnDcdYABjabAA5Fi3cjiyunroXrQgg?e=yMDip4">python3114_git_putty.7z</a> (將近端 cmsimde 啟動並改版後推向 Github 所需的檔案)</span></p>
<p><span></span></p>
<p><span></span></p>
<p></p>
<h1>Brython</h1>
<p></p>
<p><a href="https://en.wikipedia.org/wiki/Python_(programming_language)">https://en.wikipedia.org/wiki/Python_(programming_language)</a></p>
<h4>Examples:</h4>
<p style="padding-left: 30px;"><a href="https://gist.github.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d">https://gist.github.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d</a></p>
<p style="padding-left: 30px;"><a href="https://www.geeksforgeeks.org/python-programming-examples/">https://www.geeksforgeeks.org/python-programming-examples/</a></p>
<p style="padding-left: 30px;"><a href="https://www.programiz.com/python-programming/examples">https://www.programiz.com/python-programming/examples</a></p>
<p style="padding-left: 30px;"><a href="https://www.freecodecamp.org/news/python-code-examples-sample-script-coding-tutorial-for-beginners/">https://www.freecodecamp.org/news/python-code-examples-sample-script-coding-tutorial-for-beginners/</a></p>
<h4>Python Tutorial:</h4>
<p style="padding-left: 30px;"><a href="https://docs.python.org/3/tutorial/">https://docs.python.org/3/tutorial/</a></p>
<p style="padding-left: 30px;"><a href="https://docs.python.org/3/tutorial/introduction.html">An informal introduction to Python</a></p>
<h4>Indentation (Python 採 4 個 Spaces 縮排, 以界定執行範圍)</h4>
<h4>Variables (<a href="https://github.com/python/cpython/blob/3.11/Lib/keyword.py">Python Keywords</a>)</h4>
<h4>Comments (# 單行註解, 三個單引號或三個雙引號標註多行註解)</h4>
<h4><a href="https://docs.python.org/3/tutorial/introduction.html#numbers">Numbers</a> (整數 int(), 浮點數 float())</h4>
<h4><a href="https://docs.python.org/3/tutorial/introduction.html#strings">Strings</a> (字串)</h4>
<h4>print (Python 內建函式, <a href="https://docs.python.org/3/library/functions.html#print">print()</a> 函式)</h4>
<p><a href="https://docs.python.org/3/tutorial/controlflow.html">Python control flow tools</a></p>
<h4 style="padding-left: 30px;"><a href="https://docs.python.org/3/tutorial/controlflow.html#for-statements">for</a></h4>
<h4 style="padding-left: 30px;"><a href="https://docs.python.org/3/tutorial/controlflow.html#if-statements">if</a></h4>
<h4 style="padding-left: 30px;"><a href="https://docs.python.org/3/tutorial/controlflow.html#the-range-function">range</a></h4>
<h4>open</h4>
<h4>read</h4>
<h4><a href="https://docs.python.org/3/tutorial/introduction.html#lists">lists</a></h4>
<h4><a href="https://docs.python.org/3/tutorial/datastructures.html#tuples-and-sequences">tuples</a></h4>
<h4><a href="https://docs.python.org/3/tutorial/datastructures.html#dictionaries">dictionaries</a></h4>
<h4><a href="https://docs.python.org/3/tutorial/controlflow.html#defining-functions">functions</a></h4>
<h4><a href="https://docs.python.org/3/tutorial/errors.html#exceptions">try ... except</a></h4>
<h4><a href="https://docs.python.org/3/tutorial/controlflow.html#break-and-continue-statements-and-else-clauses-on-loops">break</a></h4>
<h4><a href="https://docs.python.org/3/tutorial/controlflow.html#pass-statements">pass</a></h4>
<h4><a href="https://docs.python.org/3/tutorial/classes.html?highlight=classes">classes</a></h4>
<p>這個頁面 demo 如何在同一頁面下納入多個線上 Ace 編輯器與執行按鈕 (<a href="/downloads/practice_html.txt">practice_html.txt</a> 動態頁面超文件).</p>
<p><a href="/downloads/practice_html.txt">practice_html.txt</a> 動態頁面超文件應該可以在啟動 Brython 時, 設定將 .py 檔案放入 downloads/py 目錄中引用.</p>
<p>亦即將所有對應的 html 也使用 Brython 產生, 然後寫為 <a href="https://docs.python.org/3/tutorial/classes.html">class</a> 後, 在範例導入時透過 <a href="https://docs.python.org/3/tutorial/classes.html#instance-objects">instance</a> 引用.</p>
<pre class="brush:html;auto-links:false;toolbar:false" contenteditable="false">&lt;!-- 啟動 Brython --&gt;
&lt;script&gt;
window.onload=function(){
brython({debug:1, pythonpath:['/static/','./../downloads/py/']});
}
&lt;/script&gt;</pre>
<p>從 1 累加到 100:</p>
<p><button id="add1to100">1 add to 100</button></p>
<p>將 iterable 與 iterator <a href="https://home.gamer.com.tw/creationDetail.php?sn=4337438">相關說明</a>, 利用 Brython 與 Ace Editor 整理在這個頁面.</p>
<!-- 導入 brython 程式庫 -->
<p>
<script src="/static/brython.js"></script>
<script src="/static/brython_stdlib.js"></script>
</p>
<!-- 啟動 Brython -->
<p>
<script>
window.onload=function(){
brython({debug:1, pythonpath:['/static/','./../downloads/py/']});
}
</script>
</p>
<p><!-- 導入 FileSaver 與 filereader --></p>
<p>
<script src="/static/ace/FileSaver.min.js" type="text/javascript"></script>
<script src="/static/ace/filereader.js" type="text/javascript"></script>
</p>
<p><!-- 導入 ace --></p>
<p>
<script src="/static/ace/ace.js" type="text/javascript"></script>
<script src="/static/ace/ext-language_tools.js" type="text/javascript"></script>
<script src="/static/ace/mode-python3.js" type="text/javascript"></script>
<script src="/static/ace/snippets/python.js" type="text/javascript"></script>
</p>
<p><!-- 導入 gearUtils-0.9.js Cango 齒輪繪圖程式庫 -->
<script src="/static/Cango-24v03-min.js"></script>
<script src="/static/gearUtils-09.js"></script>
<script src="/static/SVGpathUtils-6v03-min.js"></script>
<script src="/static/sylvester.js"></script>
<script src="/static/PrairieDraw.js"></script>
</p>
<p><!-- 請注意, 這裡使用 Javascript 將 localStorage["kw_py_src1"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱--></p>
<p>
<script type="text/javascript">
function doSave(storage_id, filename){
    var blob = new Blob([localStorage[storage_id]], {type: "text/plain;charset=utf-8"});
    filename = document.getElementById(filename).value
    saveAs(blob, filename+".py");
}
</script>
</p>
<p>
<script type="text/python3">
from browser import document as doc
import ace
# 清除畫布
def clear_bd1(ev):
    bd = doc["brython_div1"]
    bd.clear()
Ace1 = ace.Editor(editor_id="kw_editor1", console_id="kw_console1", container_id="kw__container1", storage_id="kw_py_src1" )
# 從 gist 取出程式碼後, 放入 editor 作為 default 程式
def run1():
    # 利用 get 取下 src 變數值
    try:
        url = doc.query["src"]
    except:
        url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c3a6deaf717f8f2739a4b1392a5ab10936e9693a/from_1_add_to_10_1.py"
    prog = open(url).read()

    # 將程式載入編輯區
    Ace1.editor.setValue(prog)
    Ace1.editor.scrollToRow(0)
    Ace1.editor.gotoLine(0)
    # 直接執行程式
    #ns = {'__name__':'__main__'}
    #exec(prog, ns)
    # 按下 run 按鈕
    Ace1.run()

# 執行程式, 顯示輸出結果與清除輸出結果及對應按鈕綁定
doc['kw_run1'].bind('click', Ace1.run)
doc['kw_show_console1'].bind('click', Ace1.show_console)
doc['kw_clear_console1'].bind('click', Ace1.clear_console)
doc['clear_bd1'].bind('click', clear_bd1)
# 呼叫函式執行
run1()
</script>
</p>
<p><!-- add 1 to 100 開始 -->
<script type="text/python3">
from browser import document as doc
import ace

# 清除畫布
def clear_bd1(ev):
    bd = doc["brython_div1"]
    bd.clear()

# 利用 ace 中的 Editor 建立 Ace2 物件, 其中的輸入變數分別對應到頁面中的編輯區物件
Ace2 = ace.Editor(editor_id="kw_editor1", console_id="kw_console1", container_id="kw__container1", storage_id="kw_py_src1" )

add1to100_url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c48e37714f055c3a0027cbfef59e442a6ef659b9/from_1_add_to_100_1.py"

# 從 gist 取得程式碼
add_src = open(add1to100_url).read()
def add(ev):
    Ace2.editor.setValue(add_src)
    Ace2.editor.scrollToRow(0)
    Ace2.editor.gotoLine(0)
    Ace2.run()

# id 為 "add1to100" 的按鈕點按時, 執行 add 方法
doc["add1to100"].bind('click', add)
</script>
</p>
<p><!-- add 1 to 100 結束--></p>
<!-- editor1 開始 -->
<p><!-- 用來顯示程式碼的 editor 區域 --></p>
<div id="kw_editor1" style="width: 600px; height: 300px;"></div>
<p><!-- 以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合 --></p>
<p><!-- 存擋表單開始 --></p>
<form><label>Filename: <input id="kw_filename" placeholder="input file name" type="text"/>.py</label> <input onclick="doSave('kw_py_src1', 'kw_filename1');" type="submit" value="Save"/></form>
<p><!-- 存擋表單結束 --></p>
<p></p>
<p><!-- 執行與清除按鈕開始 --></p>
<p><button id="kw_run1">Run</button> <button id="kw_show_console1">Output</button> <button id="kw_clear_console1">清除輸出區</button><button id="clear_bd1">清除繪圖區</button><button onclick="window.location.reload()">Reload</button></p>
<p><!-- 執行與清除按鈕結束 --></p>
<p></p>
<p><!-- 程式執行 ouput 區 --></p>
<div style="width: 100%; height: 100%;"><textarea autocomplete="off" id="kw_console1"></textarea></div>
<p><!-- Brython 程式執行的結果, 都以 brython_div1 作為切入位置 --></p>
<div id="brython_div1"></div>
<!-- editor1 結束 --><hr/><!-- ########################################## -->
<p>從 1 累加到 100 part2:</p>
<p><button id="add1to100part2">1 add to 100</button><button id="cango_three_gears">cango_three_gears</button><button id="bsnake">BSnake</button><button id="aitetris">AI Tetris</button><button id="threejsblock">Rotating Block</button></p>
<p><!-- 請注意, 這裡使用 Javascript 將 localStorage["kw_py_src2"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱--></p>
<p>
<script type="text/python3">
from browser import document as doc
import ace
# 清除畫布
def clear_bd2(ev):
    bd = doc["brython_div2"]
    bd.clear()
Ace3 = ace.Editor(editor_id="kw_editor2", console_id="kw_console2", container_id="kw__container2", storage_id="kw_py_src2" )
# 從 gist 取出程式碼後, 放入 editor 作為 default 程式
def run2():
    # 利用 get 取下 src 變數值
    try:
        url = doc.query["src2"]
    except:
        url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c3a6deaf717f8f2739a4b1392a5ab10936e9693a/from_1_add_to_10_1.py"
    prog = open(url).read()

    # 將程式載入編輯區
    Ace3.editor.setValue(prog)
    Ace3.editor.scrollToRow(0)
    Ace3.editor.gotoLine(0)
    # 直接執行程式
    #ns = {'__name__':'__main__'}
    #exec(prog, ns)
    # 按下 run 按鈕
    Ace3.run()

# 執行程式, 顯示輸出結果與清除輸出結果及對應按鈕綁定
doc['kw_run2'].bind('click', Ace3.run)
doc['kw_show_console2'].bind('click', Ace3.show_console)
doc['kw_clear_console2'].bind('click', Ace3.clear_console)
doc['clear_bd2'].bind('click', clear_bd2)
# 呼叫函式執行
run2()
</script>
</p>
<p><!-- add 1 to 100 part2 開始 -->
<script type="text/python3">
from browser import document as doc
import ace

# 清除畫布
def clear_bd2(ev):
    bd = doc["brython_div2"]
    bd.clear()

# 利用 ace 中的 Editor 建立 Ace2 物件, 其中的輸入變數分別對應到頁面中的編輯區物件
Ace4 = ace.Editor(editor_id="kw_editor2", console_id="kw_console2", container_id="kw__container2", storage_id="kw_py_src2" )

# 透過 Ace4 以類別建立一個通用的 button2, 可以在多個案例中將 gist 程導入編輯區

class button2:
    def __init__(self, url):
        self.url = url

    # 記得加入 event 輸入變數
    def do(self,ev):
        Ace4.editor.setValue(open(self.url).read())
        Ace4.editor.scrollToRow(0)
        Ace4.editor.gotoLine(0)
        Ace4.run()

add1to100_url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c48e37714f055c3a0027cbfef59e442a6ef659b9/from_1_add_to_100_1.py"

# 從 gist 取得程式碼
add_src = open(add1to100_url).read()
def add2(ev):
    Ace4.editor.setValue(add_src)
    Ace4.editor.scrollToRow(0)
    Ace4.editor.gotoLine(0)
    Ace4.run()

# id 為 "add1to100part2" 的按鈕點按時, 執行 add 方法
doc["add1to100part2"].bind('click', add2)
# 以下為運用 button2 class 的通用 gist 程式導入區
################################## cango_three_gears start
cango_three_gears_url = "https://gist.githubusercontent.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d/raw/f7a85d737d6723d5e34c526d5daee990ed92c32b/cango_three_gears_brython_div2.py"
cango_three_gears = button2(cango_three_gears_url)
doc["cango_three_gears"].bind("click", cango_three_gears.do)
################################## cango_three_gears end
################################## bsnake start
bsnake_url = "https://gist.githubusercontent.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d/raw/f7a85d737d6723d5e34c526d5daee990ed92c32b/kmol_snakey.py"
bsnake = button2(bsnake_url)
doc["bsnake"].bind("click", bsnake.do)
################################## bsnake end
################################## aitetris start
aitetris_url = "https://gist.githubusercontent.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d/raw/f7a85d737d6723d5e34c526d5daee990ed92c32b/pygame_to_brython_tetris_ai.py"
aitetris = button2(aitetris_url)
doc["aitetris"].bind("click", aitetris.do)
################################## aitetris end
################################## threejsblock start
threejsblock_url = "https://gist.githubusercontent.com/mdecycu/2c6323eff49b496d1bafd210f3ec9707/raw/df37802f9e8a386b6424f7945af622b1cd0a9ca5/threejs_rotating_block.py"
threejsblock = button2(threejsblock_url)
doc["threejsblock"].bind("click", threejsblock.do)
################################## threejsblock end
</script>
</p>
<p><!-- add 1 to 100 part2 結束--></p>
<!-- editor2 開始 -->
<p><!-- 用來顯示程式碼的 editor 區域 --></p>
<div id="kw_editor2" style="width: 600px; height: 300px;"></div>
<p><!-- 以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合 --></p>
<p><!-- 存擋表單開始 --></p>
<form><label>Filename: <input id="kw_filename2" placeholder="input file name" type="text"/>.py</label> <input onclick="doSave('kw_py_src2', 'kw_filename2');" type="submit" value="Save"/></form>
<p><!-- 存擋表單結束 --></p>
<p></p>
<p><!-- 執行與清除按鈕開始 --></p>
<p><button id="kw_run2">Run</button> <button id="kw_show_console2">Output</button> <button id="kw_clear_console2">清除輸出區</button><button id="clear_bd2">清除繪圖區</button><button onclick="window.location.reload()">Reload</button></p>
<p><!-- 執行與清除按鈕結束 --></p>
<p></p>
<p><!-- 程式執行 ouput 區 --></p>
<div style="width: 100%; height: 100%;"><textarea autocomplete="off" id="kw_console2"></textarea></div>
<p><!-- Brython 程式執行的結果, 都以 brython_div1 作為切入位置 --></p>
<div id="brython_div2"></div>
<!-- editor2 結束 --><hr/>
<p>
<script src="https://unpkg.com/three@0.144.0/build/three.js" type="text/javascript"></script>
</p>